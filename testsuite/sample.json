{
  "language": "Solidity",
  "sources": {
    "HelloWorldTemplate.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity <0.9.0 =0.8.26 >=0.5.0 >=0.8.0 ^0.8.0 ^0.8.1 ^0.8.12 ^0.8.2 ^0.8.9;\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IBeaconChainOracle.sol\n\n/**\n * @title Interface for the BeaconStateOracle contract.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n */\ninterface IBeaconChainOracle {\n    /// @notice The block number to state root mapping.\n    function timestampToBlockRoot(uint256 timestamp) external view returns (bytes32);\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IETHPOSDeposit.sol\n// ┏━━━┓━┏┓━┏┓━━┏━━━┓━━┏━━━┓━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━┏┓━━━━━┏━━━┓━━━━━━━━━┏┓━━━━━━━━━━━━━━┏┓━\n// ┃┏━━┛┏┛┗┓┃┃━━┃┏━┓┃━━┃┏━┓┃━━━━┗┓┏┓┃━━━━━━━━━━━━━━━━━━┏┛┗┓━━━━┃┏━┓┃━━━━━━━━┏┛┗┓━━━━━━━━━━━━┏┛┗┓\n// ┃┗━━┓┗┓┏┛┃┗━┓┗┛┏┛┃━━┃┃━┃┃━━━━━┃┃┃┃┏━━┓┏━━┓┏━━┓┏━━┓┏┓┗┓┏┛━━━━┃┃━┗┛┏━━┓┏━┓━┗┓┏┛┏━┓┏━━┓━┏━━┓┗┓┏┛\n// ┃┏━━┛━┃┃━┃┏┓┃┏━┛┏┛━━┃┃━┃┃━━━━━┃┃┃┃┃┏┓┃┃┏┓┃┃┏┓┃┃━━┫┣┫━┃┃━━━━━┃┃━┏┓┃┏┓┃┃┏┓┓━┃┃━┃┏┛┗━┓┃━┃┏━┛━┃┃━\n// ┃┗━━┓━┃┗┓┃┃┃┃┃┃┗━┓┏┓┃┗━┛┃━━━━┏┛┗┛┃┃┃━┫┃┗┛┃┃┗┛┃┣━━┃┃┃━┃┗┓━━━━┃┗━┛┃┃┗┛┃┃┃┃┃━┃┗┓┃┃━┃┗┛┗┓┃┗━┓━┃┗┓\n// ┗━━━┛━┗━┛┗┛┗┛┗━━━┛┗┛┗━━━┛━━━━┗━━━┛┗━━┛┃┏━┛┗━━┛┗━━┛┗┛━┗━┛━━━━┗━━━┛┗━━┛┗┛┗┛━┗━┛┗┛━┗━━━┛┗━━┛━┗━┛\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┃┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┗┛━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n// This interface is designed to be compatible with the Vyper version.\n/// @notice This is the Ethereum 2.0 deposit contract interface.\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\ninterface IETHPOSDeposit {\n    /// @notice A processed deposit event.\n    event DepositEvent(bytes pubkey, bytes withdrawal_credentials, bytes amount, bytes signature, bytes index);\n\n    /// @notice Submit a Phase 0 DepositData object.\n    /// @param pubkey A BLS12-381 public key.\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\n    /// @param signature A BLS12-381 signature.\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\n    /// Used as a protection against malformed input.\n    function deposit(\n        bytes calldata pubkey,\n        bytes calldata withdrawal_credentials,\n        bytes calldata signature,\n        bytes32 deposit_data_root\n    ) external payable;\n\n    /// @notice Query the current deposit root hash.\n    /// @return The deposit root hash.\n    function get_deposit_root() external view returns (bytes32);\n\n    /// @notice Query the current deposit count.\n    /// @return The deposit count encoded as a little endian 64-bit number.\n    function get_deposit_count() external view returns (bytes memory);\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IPauserRegistry.sol\n\n/**\n * @title Interface for the `PauserRegistry` contract.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n */\ninterface IPauserRegistry {\n    event PauserStatusChanged(address pauser, bool canPause);\n\n    event UnpauserChanged(address previousUnpauser, address newUnpauser);\n    \n    /// @notice Mapping of addresses to whether they hold the pauser role.\n    function isPauser(address pauser) external view returns (bool);\n\n    /// @notice Unique address that holds the unpauser role. Capable of changing *both* the pauser and unpauser addresses.\n    function unpauser() external view returns (address);\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\n\n/**\n * @title The interface for common signature utilities.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n */\ninterface ISignatureUtils {\n    // @notice Struct that bundles together a signature and an expiration time for the signature. Used primarily for stack management.\n    struct SignatureWithExpiry {\n        // the signature itself, formatted as a single bytes object\n        bytes signature;\n        // the expiration timestamp (UTC) of the signature\n        uint256 expiry;\n    }\n\n    // @notice Struct that bundles together a signature, a salt for uniqueness, and an expiration time for the signature. Used primarily for stack management.\n    struct SignatureWithSaltAndExpiry {\n        // the signature itself, formatted as a single bytes object\n        bytes signature;\n        // the salt used to generate the signature\n        bytes32 salt;\n        // the expiration timestamp (UTC) of the signature\n        uint256 expiry;\n    }\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/BytesLib.sol\n\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\n\nlibrary BytesLib {\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(\n                0x40,\n                and(\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n                    not(31) // Round down to the nearest 32 bytes.\n                )\n            )\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                // solhint-disable-next-line no-unused-vars\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(bytes memory _bytes, uint256 _start, uint256 _length) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1, \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                } // while(uint256(mc < end) + cb == 2) // the next line is the loop condition:\n                eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        // solhint-disable-next-line no-empty-blocks\n                        for {\n\n                        } eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/Endian.sol\n\nlibrary Endian {\n    /**\n     * @notice Converts a little endian-formatted uint64 to a big endian-formatted uint64\n     * @param lenum little endian-formatted uint64 input, provided as 'bytes32' type\n     * @return n The big endian-formatted uint64\n     * @dev Note that the input is formatted as a 'bytes32' type (i.e. 256 bits), but it is immediately truncated to a uint64 (i.e. 64 bits)\n     * through a right-shift/shr operation.\n     */\n    function fromLittleEndianUint64(bytes32 lenum) internal pure returns (uint64 n) {\n        // the number needs to be stored in little-endian encoding (ie in bytes 0-8)\n        n = uint64(uint256(lenum >> 192));\n        return\n            (n >> 56) |\n            ((0x00FF000000000000 & n) >> 40) |\n            ((0x0000FF0000000000 & n) >> 24) |\n            ((0x000000FF00000000 & n) >> 8) |\n            ((0x00000000FF000000 & n) << 8) |\n            ((0x0000000000FF0000 & n) << 24) |\n            ((0x000000000000FF00 & n) << 40) |\n            ((0x00000000000000FF & n) << 56);\n    }\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/Merkle.sol\n\n// Adapted from OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary Merkle {\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\n     *\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\n     */\n    function verifyInclusionKeccak(\n        bytes memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        uint256 index\n    ) internal pure returns (bool) {\n        return processInclusionProofKeccak(proof, leaf, index) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\n     * @dev If the proof length is 0 then the leaf hash is returned.\n     *\n     * _Available since v4.4._\n     *\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\n     */\n    function processInclusionProofKeccak(\n        bytes memory proof,\n        bytes32 leaf,\n        uint256 index\n    ) internal pure returns (bytes32) {\n        require(\n            proof.length % 32 == 0,\n            \"Merkle.processInclusionProofKeccak: proof length should be a multiple of 32\"\n        );\n        bytes32 computedHash = leaf;\n        for (uint256 i = 32; i <= proof.length; i += 32) {\n            if (index % 2 == 0) {\n                // if ith bit of index is 0, then computedHash is a left sibling\n                assembly {\n                    mstore(0x00, computedHash)\n                    mstore(0x20, mload(add(proof, i)))\n                    computedHash := keccak256(0x00, 0x40)\n                    index := div(index, 2)\n                }\n            } else {\n                // if ith bit of index is 1, then computedHash is a right sibling\n                assembly {\n                    mstore(0x00, mload(add(proof, i)))\n                    mstore(0x20, computedHash)\n                    computedHash := keccak256(0x00, 0x40)\n                    index := div(index, 2)\n                }\n            }\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\n     *\n     * Note this is for a Merkle tree using the sha256 hash function\n     */\n    function verifyInclusionSha256(\n        bytes memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        uint256 index\n    ) internal view returns (bool) {\n        return processInclusionProofSha256(proof, leaf, index) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\n     *\n     * _Available since v4.4._\n     *\n     * Note this is for a Merkle tree using the sha256 hash function\n     */\n    function processInclusionProofSha256(\n        bytes memory proof,\n        bytes32 leaf,\n        uint256 index\n    ) internal view returns (bytes32) {\n        require(\n            proof.length != 0 && proof.length % 32 == 0,\n            \"Merkle.processInclusionProofSha256: proof length should be a non-zero multiple of 32\"\n        );\n        bytes32[1] memory computedHash = [leaf];\n        for (uint256 i = 32; i <= proof.length; i += 32) {\n            if (index % 2 == 0) {\n                // if ith bit of index is 0, then computedHash is a left sibling\n                assembly {\n                    mstore(0x00, mload(computedHash))\n                    mstore(0x20, mload(add(proof, i)))\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) {\n                        revert(0, 0)\n                    }\n                    index := div(index, 2)\n                }\n            } else {\n                // if ith bit of index is 1, then computedHash is a right sibling\n                assembly {\n                    mstore(0x00, mload(add(proof, i)))\n                    mstore(0x20, mload(computedHash))\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) {\n                        revert(0, 0)\n                    }\n                    index := div(index, 2)\n                }\n            }\n        }\n        return computedHash[0];\n    }\n\n    /**\n     @notice this function returns the merkle root of a tree created from a set of leaves using sha256 as its hash function\n     @param leaves the leaves of the merkle tree\n     @return The computed Merkle root of the tree.\n     @dev A pre-condition to this function is that leaves.length is a power of two.  If not, the function will merkleize the inputs incorrectly.\n     */\n    function merkleizeSha256(bytes32[] memory leaves) internal pure returns (bytes32) {\n        //there are half as many nodes in the layer above the leaves\n        uint256 numNodesInLayer = leaves.length / 2;\n        //create a layer to store the internal nodes\n        bytes32[] memory layer = new bytes32[](numNodesInLayer);\n        //fill the layer with the pairwise hashes of the leaves\n        for (uint256 i = 0; i < numNodesInLayer; i++) {\n            layer[i] = sha256(abi.encodePacked(leaves[2 * i], leaves[2 * i + 1]));\n        }\n        //the next layer above has half as many nodes\n        numNodesInLayer /= 2;\n        //while we haven't computed the root\n        while (numNodesInLayer != 0) {\n            //overwrite the first numNodesInLayer nodes in layer with the pairwise hashes of their children\n            for (uint256 i = 0; i < numNodesInLayer; i++) {\n                layer[i] = sha256(abi.encodePacked(layer[2 * i], layer[2 * i + 1]));\n            }\n            //the next layer above has half as many nodes\n            numNodesInLayer /= 2;\n        }\n        //the first node in the layer is the root\n        return layer[0];\n    }\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol\n\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\n\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/Strings.sol\n\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1271Upgradeable.sol\n\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271Upgradeable {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/MathUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCastUpgradeable {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248) {\n        require(value >= type(int248).min && value <= type(int248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return int248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240) {\n        require(value >= type(int240).min && value <= type(int240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return int240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232) {\n        require(value >= type(int232).min && value <= type(int232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return int232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224) {\n        require(value >= type(int224).min && value <= type(int224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return int224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216) {\n        require(value >= type(int216).min && value <= type(int216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return int216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208) {\n        require(value >= type(int208).min && value <= type(int208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return int208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200) {\n        require(value >= type(int200).min && value <= type(int200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return int200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192) {\n        require(value >= type(int192).min && value <= type(int192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return int192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184) {\n        require(value >= type(int184).min && value <= type(int184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return int184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176) {\n        require(value >= type(int176).min && value <= type(int176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return int176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168) {\n        require(value >= type(int168).min && value <= type(int168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return int168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160) {\n        require(value >= type(int160).min && value <= type(int160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return int160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152) {\n        require(value >= type(int152).min && value <= type(int152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return int152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144) {\n        require(value >= type(int144).min && value <= type(int144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return int144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136) {\n        require(value >= type(int136).min && value <= type(int136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return int136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120) {\n        require(value >= type(int120).min && value <= type(int120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return int120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112) {\n        require(value >= type(int112).min && value <= type(int112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return int112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104) {\n        require(value >= type(int104).min && value <= type(int104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return int104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96) {\n        require(value >= type(int96).min && value <= type(int96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return int96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88) {\n        require(value >= type(int88).min && value <= type(int88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return int88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80) {\n        require(value >= type(int80).min && value <= type(int80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return int80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72) {\n        require(value >= type(int72).min && value <= type(int72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return int72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56) {\n        require(value >= type(int56).min && value <= type(int56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return int56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48) {\n        require(value >= type(int48).min && value <= type(int48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return int48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40) {\n        require(value >= type(int40).min && value <= type(int40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return int40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24) {\n        require(value >= type(int24).min && value <= type(int24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return int24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n\n// lib/eigenlayer-middleware/src/interfaces/IRegistry.sol\n\n/**\n * @title Minimal interface for a `Registry`-type contract.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice Functions related to the registration process itself have been intentionally excluded\n * because their function signatures may vary significantly.\n */\ninterface IRegistry {\n    function registryCoordinator() external view returns (address);\n}\n\n// lib/eigenlayer-middleware/src/libraries/BN254.sol\n\n// several functions are taken or adapted from https://github.com/HarryR/solcrypto/blob/master/contracts/altbn128.sol (MIT license):\n// Copyright 2017 Christian Reitwiessner\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n\n// The remainder of the code in this library is written by LayrLabs Inc. and is also under an MIT license\n\n/**\n * @title Library for operations on the BN254 elliptic curve.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice Contains BN254 parameters, common operations (addition, scalar mul, pairing), and BLS signature functionality.\n */\nlibrary BN254 {\n    // modulus for the underlying field F_p of the elliptic curve\n    uint256 internal constant FP_MODULUS =\n        21888242871839275222246405745257275088696311157297823662689037894645226208583;\n    // modulus for the underlying field F_r of the elliptic curve\n    uint256 internal constant FR_MODULUS =\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    struct G1Point {\n        uint256 X;\n        uint256 Y;\n    }\n\n    // Encoding of field elements is: X[1] * i + X[0]\n    struct G2Point {\n        uint256[2] X;\n        uint256[2] Y;\n    }\n\n    function generatorG1() internal pure returns (G1Point memory) {\n        return G1Point(1, 2);\n    }\n\n    // generator of group G2\n    /// @dev Generator point in F_q2 is of the form: (x0 + ix1, y0 + iy1).\n    uint256 internal constant G2x1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 internal constant G2x0 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 internal constant G2y1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\n    uint256 internal constant G2y0 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\n\n    /// @notice returns the G2 generator\n    /// @dev mind the ordering of the 1s and 0s!\n    ///      this is because of the (unknown to us) convention used in the bn254 pairing precompile contract\n    ///      \"Elements a * i + b of F_p^2 are encoded as two elements of F_p, (a, b).\"\n    ///      https://github.com/ethereum/EIPs/blob/master/EIPS/eip-197.md#encoding\n    function generatorG2() internal pure returns (G2Point memory) {\n        return G2Point([G2x1, G2x0], [G2y1, G2y0]);\n    }\n\n    // negation of the generator of group G2\n    /// @dev Generator point in F_q2 is of the form: (x0 + ix1, y0 + iy1).\n    uint256 internal constant nG2x1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\n    uint256 internal constant nG2x0 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\n    uint256 internal constant nG2y1 = 17805874995975841540914202342111839520379459829704422454583296818431106115052;\n    uint256 internal constant nG2y0 = 13392588948715843804641432497768002650278120570034223513918757245338268106653;\n\n    function negGeneratorG2() internal pure returns (G2Point memory) {\n        return G2Point([nG2x1, nG2x0], [nG2y1, nG2y0]);\n    }\n\n    bytes32 internal constant powersOfTauMerkleRoot =\n        0x22c998e49752bbb1918ba87d6d59dd0e83620a311ba91dd4b2cc84990b31b56f;\n\n    /**\n     * @param p Some point in G1.\n     * @return The negation of `p`, i.e. p.plus(p.negate()) should be zero.\n     */\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\n        // The prime q in the base field F_q for G1\n        if (p.X == 0 && p.Y == 0) {\n            return G1Point(0, 0);\n        } else {\n            return G1Point(p.X, FP_MODULUS - (p.Y % FP_MODULUS));\n        }\n    }\n\n    /**\n     * @return r the sum of two points of G1\n     */\n    function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\n        uint256[4] memory input;\n        input[0] = p1.X;\n        input[1] = p1.Y;\n        input[2] = p2.X;\n        input[3] = p2.Y;\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 6, input, 0x80, r, 0x40)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n\n        require(success, \"ec-add-failed\");\n    }\n\n    /**\n     * @notice an optimized ecMul implementation that takes O(log_2(s)) ecAdds\n     * @param p the point to multiply\n     * @param s the scalar to multiply by\n     * @dev this function is only safe to use if the scalar is 9 bits or less\n     */ \n    function scalar_mul_tiny(BN254.G1Point memory p, uint16 s) internal view returns (BN254.G1Point memory) {\n        require(s < 2**9, \"scalar-too-large\");\n\n        // if s is 1 return p\n        if(s == 1) {\n            return p;\n        }\n\n        // the accumulated product to return\n        BN254.G1Point memory acc = BN254.G1Point(0, 0);\n        // the 2^n*p to add to the accumulated product in each iteration\n        BN254.G1Point memory p2n = p;\n        // value of most significant bit\n        uint16 m = 1;\n        // index of most significant bit\n        uint8 i = 0;\n\n        //loop until we reach the most significant bit\n        while(s >= m){\n            unchecked {\n                // if the  current bit is 1, add the 2^n*p to the accumulated product\n                if ((s >> i) & 1 == 1) {\n                    acc = plus(acc, p2n);\n                }\n                // double the 2^n*p for the next iteration\n                p2n = plus(p2n, p2n);\n\n                // increment the index and double the value of the most significant bit\n                m <<= 1;\n                ++i;\n            }\n        }\n        \n        // return the accumulated product\n        return acc;\n    }\n\n    /**\n     * @return r the product of a point on G1 and a scalar, i.e.\n     *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all\n     *         points p.\n     */\n    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\n        uint256[3] memory input;\n        input[0] = p.X;\n        input[1] = p.Y;\n        input[2] = s;\n        bool success;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 7, input, 0x60, r, 0x40)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n        require(success, \"ec-mul-failed\");\n    }\n\n    /**\n     *  @return The result of computing the pairing check\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n     *         For example,\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\n     */\n    function pairing(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2\n    ) internal view returns (bool) {\n        G1Point[2] memory p1 = [a1, b1];\n        G2Point[2] memory p2 = [a2, b2];\n\n        uint256[12] memory input;\n\n        for (uint256 i = 0; i < 2; i++) {\n            uint256 j = i * 6;\n            input[j + 0] = p1[i].X;\n            input[j + 1] = p1[i].Y;\n            input[j + 2] = p2[i].X[0];\n            input[j + 3] = p2[i].X[1];\n            input[j + 4] = p2[i].Y[0];\n            input[j + 5] = p2[i].Y[1];\n        }\n\n        uint256[1] memory out;\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 8, input, mul(12, 0x20), out, 0x20)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n\n        require(success, \"pairing-opcode-failed\");\n\n        return out[0] != 0;\n    }\n\n    /**\n     * @notice This function is functionally the same as pairing(), however it specifies a gas limit\n     *         the user can set, as a precompile may use the entire gas budget if it reverts.\n     */\n    function safePairing(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        uint256 pairingGas\n    ) internal view returns (bool, bool) {\n        G1Point[2] memory p1 = [a1, b1];\n        G2Point[2] memory p2 = [a2, b2];\n\n        uint256[12] memory input;\n\n        for (uint256 i = 0; i < 2; i++) {\n            uint256 j = i * 6;\n            input[j + 0] = p1[i].X;\n            input[j + 1] = p1[i].Y;\n            input[j + 2] = p2[i].X[0];\n            input[j + 3] = p2[i].X[1];\n            input[j + 4] = p2[i].Y[0];\n            input[j + 5] = p2[i].Y[1];\n        }\n\n        uint256[1] memory out;\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(pairingGas, 8, input, mul(12, 0x20), out, 0x20)\n        }\n\n        //Out is the output of the pairing precompile, either 0 or 1 based on whether the two pairings are equal.\n        //Success is true if the precompile actually goes through (aka all inputs are valid)\n\n        return (success, out[0] != 0);\n    }\n\n    /// @return hashedG1 the keccak256 hash of the G1 Point\n    /// @dev used for BLS signatures\n    function hashG1Point(BN254.G1Point memory pk) internal pure returns (bytes32 hashedG1) {\n        assembly {\n            mstore(0, mload(pk))\n            mstore(0x20, mload(add(0x20, pk)))\n            hashedG1 := keccak256(0, 0x40)\n        }\n    }\n\n    /// @return the keccak256 hash of the G2 Point\n    /// @dev used for BLS signatures\n    function hashG2Point(\n        BN254.G2Point memory pk\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(pk.X[0], pk.X[1], pk.Y[0], pk.Y[1]));\n    }\n\n    /**\n     * @notice adapted from https://github.com/HarryR/solcrypto/blob/master/contracts/altbn128.sol\n     */\n    function hashToG1(bytes32 _x) internal view returns (G1Point memory) {\n        uint256 beta = 0;\n        uint256 y = 0;\n\n        uint256 x = uint256(_x) % FP_MODULUS;\n\n        while (true) {\n            (beta, y) = findYFromX(x);\n\n            // y^2 == beta\n            if( beta == mulmod(y, y, FP_MODULUS) ) {\n                return G1Point(x, y);\n            }\n\n            x = addmod(x, 1, FP_MODULUS);\n        }\n        return G1Point(0, 0);\n    }\n\n    /**\n     * Given X, find Y\n     *\n     *   where y = sqrt(x^3 + b)\n     *\n     * Returns: (x^3 + b), y\n     */\n    function findYFromX(uint256 x) internal view returns (uint256, uint256) {\n        // beta = (x^3 + b) % p\n        uint256 beta = addmod(mulmod(mulmod(x, x, FP_MODULUS), x, FP_MODULUS), 3, FP_MODULUS);\n\n        // y^2 = x^3 + b\n        // this acts like: y = sqrt(beta) = beta^((p+1) / 4)\n        uint256 y = expMod(beta, 0xc19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52, FP_MODULUS);\n\n        return (beta, y);\n    }\n\n    function expMod(uint256 _base, uint256 _exponent, uint256 _modulus) internal view returns (uint256 retval) {\n        bool success;\n        uint256[1] memory output;\n        uint[6] memory input;\n        input[0] = 0x20; // baseLen = new(big.Int).SetBytes(getData(input, 0, 32))\n        input[1] = 0x20; // expLen  = new(big.Int).SetBytes(getData(input, 32, 32))\n        input[2] = 0x20; // modLen  = new(big.Int).SetBytes(getData(input, 64, 32))\n        input[3] = _base;\n        input[4] = _exponent;\n        input[5] = _modulus;\n        assembly {\n            success := staticcall(sub(gas(), 2000), 5, input, 0xc0, output, 0x20)\n            // Use \"invalid\" to make gas estimation work\n            switch success\n            case 0 {\n                invalid()\n            }\n        }\n        require(success, \"BN254.expMod: call failure\");\n        return output[0];\n    }\n}\n\n// src/Errors.sol\n\n// SEE LICENSE IN https://files.altlayer.io/Alt-Research-License-1.md\n// Copyright Alt Research Ltd. 2023. All rights reserved.\n//\n// You acknowledge and agree that Alt Research Ltd. (\"Alt Research\") (or Alt\n// Research's licensors) own all legal rights, titles and interests in and to the\n// work, software, application, source code, documentation and any other documents\n//\n//        db         888             88\n//       d88b         88     88      88\n//      d8'`8b        88     88      88\n//     d8'  `8b       88   MM88MMM   88          ,adPPYYba,  8b       d8   ,adPPYba,  8b,dPPYb\n//    d8YaaaaY8b      88     88      88          \"\"     `Y8  `8b     d8'  a8P_____88  88P'\n//   d8\"\"\"\"\"\"\"\"8b     88     88      88          ,adPPPPP88   `8b   d8'   8PP\"\"\"\"\"\"\"  88\n//  d8'        `8b    88     88,     88          88,    ,88    `8b,d8'    \"8b,   ,aa  88\n// d8'          `8b  8888    \"Y888   88888888888 `\"8bbdP\"Y8      Y88'      `\"Ybbd8\"'  88\n//                                                               d8'\n//                                                              d8'\n\nerror AlreadySet();\nerror NoOngoingDeployment();\nerror ZeroAddress();\nerror ZeroValue();\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IAVSDirectory.sol\n\ninterface IAVSDirectory is ISignatureUtils {\n    /// @notice Enum representing the status of an operator's registration with an AVS\n    enum OperatorAVSRegistrationStatus {\n        UNREGISTERED,       // Operator not registered to AVS\n        REGISTERED          // Operator registered to AVS\n    }\n\n    /**\n     * @notice Emitted when @param avs indicates that they are updating their MetadataURI string\n     * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\n     */\n    event AVSMetadataURIUpdated(address indexed avs, string metadataURI);\n\n    /// @notice Emitted when an operator's registration status for an AVS is updated\n    event OperatorAVSRegistrationStatusUpdated(address indexed operator, address indexed avs, OperatorAVSRegistrationStatus status);\n\n    /**\n     * @notice Called by an avs to register an operator with the avs.\n     * @param operator The address of the operator to register.\n     * @param operatorSignature The signature, salt, and expiry of the operator's signature.\n     */\n    function registerOperatorToAVS(\n        address operator,\n        ISignatureUtils.SignatureWithSaltAndExpiry memory operatorSignature\n    ) external;\n\n    /**\n     * @notice Called by an avs to deregister an operator with the avs.\n     * @param operator The address of the operator to deregister.\n     */\n    function deregisterOperatorFromAVS(address operator) external;\n\n    /**\n     * @notice Called by an AVS to emit an `AVSMetadataURIUpdated` event indicating the information has updated.\n     * @param metadataURI The URI for metadata associated with an AVS\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `AVSMetadataURIUpdated` event\n     */\n    function updateAVSMetadataURI(string calldata metadataURI) external;\n\n    /**\n     * @notice Returns whether or not the salt has already been used by the operator.\n     * @dev Salts is used in the `registerOperatorToAVS` function.\n     */\n    function operatorSaltIsSpent(address operator, bytes32 salt) external view returns (bool);\n\n    /**\n     * @notice Calculates the digest hash to be signed by an operator to register with an AVS\n     * @param operator The account registering as an operator\n     * @param avs The AVS the operator is registering to\n     * @param salt A unique and single use value associated with the approver signature.\n     * @param expiry Time after which the approver's signature becomes invalid\n     */\n    function calculateOperatorAVSRegistrationDigestHash(\n        address operator,\n        address avs,\n        bytes32 salt,\n        uint256 expiry\n    ) external view returns (bytes32);\n\n    /// @notice The EIP-712 typehash for the Registration struct used by the contract\n    function OPERATOR_AVS_REGISTRATION_TYPEHASH() external view returns (bytes32);\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IPausable.sol\n\n/**\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\n * These functions should be permissioned as \"onlyPauser\" which defers to a `PauserRegistry` for determining access control.\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \"paused\"), and if you unpause,\n * you can only flip (any number of) switches to off/0 (aka \"paused\").\n * If you want a pauseXYZ function that just flips a single bit / \"pausing flag\", it will:\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\n * 2) update the paused state to this new value\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\n */\n\ninterface IPausable {\n    /// @notice Emitted when the `pauserRegistry` is set to `newPauserRegistry`.\n    event PauserRegistrySet(IPauserRegistry pauserRegistry, IPauserRegistry newPauserRegistry);\n\n    /// @notice Emitted when the pause is triggered by `account`, and changed to `newPausedStatus`.\n    event Paused(address indexed account, uint256 newPausedStatus);\n\n    /// @notice Emitted when the pause is lifted by `account`, and changed to `newPausedStatus`.\n    event Unpaused(address indexed account, uint256 newPausedStatus);\n    \n    /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\n    function pauserRegistry() external view returns (IPauserRegistry);\n\n    /**\n     * @notice This function is used to pause an EigenLayer contract's functionality.\n     * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\n     * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\n     */\n    function pause(uint256 newPausedStatus) external;\n\n    /**\n     * @notice Alias for `pause(type(uint256).max)`.\n     */\n    function pauseAll() external;\n\n    /**\n     * @notice This function is used to unpause an EigenLayer contract's functionality.\n     * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\n     * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\n     */\n    function unpause(uint256 newPausedStatus) external;\n\n    /// @notice Returns the current paused status as a uint256.\n    function paused() external view returns (uint256);\n\n    /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\n    function paused(uint8 index) external view returns (bool);\n\n    /// @notice Allows the unpauser to set a new pauser registry\n    function setPauserRegistry(IPauserRegistry newPauserRegistry) external;\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\n\n/**\n * @title Minimal interface for an `Strategy` contract.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice Custom `Strategy` implementations may expand extensively on this interface.\n */\ninterface IStrategy {\n    /**\n     * @notice Used to deposit tokens into this Strategy\n     * @param token is the ERC20 token being deposited\n     * @param amount is the amount of token being deposited\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\n     * `depositIntoStrategy` function, and individual share balances are recorded in the strategyManager as well.\n     * @return newShares is the number of new shares issued at the current exchange ratio.\n     */\n    function deposit(IERC20 token, uint256 amount) external returns (uint256);\n\n    /**\n     * @notice Used to withdraw tokens from this Strategy, to the `recipient`'s address\n     * @param recipient is the address to receive the withdrawn funds\n     * @param token is the ERC20 token being transferred out\n     * @param amountShares is the amount of shares being withdrawn\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\n     * other functions, and individual share balances are recorded in the strategyManager as well.\n     */\n    function withdraw(address recipient, IERC20 token, uint256 amountShares) external;\n\n    /**\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\n     * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\n     */\n    function sharesToUnderlying(uint256 amountShares) external returns (uint256);\n\n    /**\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\n     * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\n     */\n    function underlyingToShares(uint256 amountUnderlying) external returns (uint256);\n\n    /**\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\n     * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\n     */\n    function userUnderlying(address user) external returns (uint256);\n\n    /**\n     * @notice convenience function for fetching the current total shares of `user` in this strategy, by\n     * querying the `strategyManager` contract\n     */\n    function shares(address user) external view returns (uint256);\n\n    /**\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\n     * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\n     * @return The amount of shares corresponding to the input `amountUnderlying`\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\n     */\n    function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\n\n    /**\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\n     * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\n     * @return The amount of shares corresponding to the input `amountUnderlying`\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\n     */\n    function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\n\n    /**\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\n     * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\n     */\n    function userUnderlyingView(address user) external view returns (uint256);\n\n    /// @notice The underlying token for shares in this Strategy\n    function underlyingToken() external view returns (IERC20);\n\n    /// @notice The total number of extant shares in this Strategy\n    function totalShares() external view returns (uint256);\n\n    /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\n    function explanation() external view returns (string memory);\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\n\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\n\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\n// lib/eigenlayer-middleware/src/interfaces/IIndexRegistry.sol\n\n/**\n * @title Interface for a `Registry`-type contract that keeps track of an ordered list of operators for up to 256 quorums.\n * @author Layr Labs, Inc.\n */\ninterface IIndexRegistry is IRegistry {\n    // EVENTS\n    \n    // emitted when an operator's index in the ordered operator list for the quorum with number `quorumNumber` is updated\n    event QuorumIndexUpdate(bytes32 indexed operatorId, uint8 quorumNumber, uint32 newOperatorIndex);\n\n    // DATA STRUCTURES\n\n    // struct used to give definitive ordering to operators at each blockNumber. \n    struct OperatorUpdate {\n        // blockNumber number from which `operatorIndex` was the operators index\n        // the operator's index is the first entry such that `blockNumber >= entry.fromBlockNumber`\n        uint32 fromBlockNumber;\n        // the operator at this index\n        bytes32 operatorId;\n    }\n\n    // struct used to denote the number of operators in a quorum at a given blockNumber\n    struct QuorumUpdate {\n        // The total number of operators at a `blockNumber` is the first entry such that `blockNumber >= entry.fromBlockNumber`\n        uint32 fromBlockNumber;\n        // The number of operators at `fromBlockNumber`\n        uint32 numOperators;\n    }\n\n    /**\n     * @notice Registers the operator with the specified `operatorId` for the quorums specified by `quorumNumbers`.\n     * @param operatorId is the id of the operator that is being registered\n     * @param quorumNumbers is the quorum numbers the operator is registered for\n     * @return numOperatorsPerQuorum is a list of the number of operators (including the registering operator) in each of the quorums the operator is registered for\n     * @dev access restricted to the RegistryCoordinator\n     * @dev Preconditions (these are assumed, not validated in this contract):\n     *         1) `quorumNumbers` has no duplicates\n     *         2) `quorumNumbers.length` != 0\n     *         3) `quorumNumbers` is ordered in ascending order\n     *         4) the operator is not already registered\n     */\n    function registerOperator(bytes32 operatorId, bytes calldata quorumNumbers) external returns(uint32[] memory);\n\n    /**\n     * @notice Deregisters the operator with the specified `operatorId` for the quorums specified by `quorumNumbers`.\n     * @param operatorId is the id of the operator that is being deregistered\n     * @param quorumNumbers is the quorum numbers the operator is deregistered for\n     * @dev access restricted to the RegistryCoordinator\n     * @dev Preconditions (these are assumed, not validated in this contract):\n     *         1) `quorumNumbers` has no duplicates\n     *         2) `quorumNumbers.length` != 0\n     *         3) `quorumNumbers` is ordered in ascending order\n     *         4) the operator is not already deregistered\n     *         5) `quorumNumbers` is a subset of the quorumNumbers that the operator is registered for\n     */\n    function deregisterOperator(bytes32 operatorId, bytes calldata quorumNumbers) external;\n\n    /**\n     * @notice Initialize a quorum by pushing its first quorum update\n     * @param quorumNumber The number of the new quorum\n     */\n    function initializeQuorum(uint8 quorumNumber) external;\n\n    /// @notice Returns the OperatorUpdate entry for the specified `operatorIndex` and `quorumNumber` at the specified `arrayIndex`\n    function getOperatorUpdateAtIndex(\n        uint8 quorumNumber,\n        uint32 operatorIndex,\n        uint32 arrayIndex\n    ) external view returns (OperatorUpdate memory);\n\n    /// @notice Returns the QuorumUpdate entry for the specified `quorumNumber` at the specified `quorumIndex`\n    function getQuorumUpdateAtIndex(uint8 quorumNumber, uint32 quorumIndex) external view returns (QuorumUpdate memory);\n\n    /// @notice Returns the most recent OperatorUpdate entry for the specified quorumNumber and operatorIndex\n    function getLatestOperatorUpdate(uint8 quorumNumber, uint32 operatorIndex) external view returns (OperatorUpdate memory);\n\n    /// @notice Returns the most recent QuorumUpdate entry for the specified quorumNumber\n    function getLatestQuorumUpdate(uint8 quorumNumber) external view returns (QuorumUpdate memory);\n\n    /// @notice Returns the current number of operators of this service for `quorumNumber`.\n    function totalOperatorsForQuorum(uint8 quorumNumber) external view returns (uint32);\n\n    /// @notice Returns an ordered list of operators of the services for the given `quorumNumber` at the given `blockNumber`\n    function getOperatorListAtBlockNumber(uint8 quorumNumber, uint32 blockNumber) external view returns (bytes32[] memory);\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/BeaconChainProofs.sol\n\n//Utility library for parsing and PHASE0 beacon chain block headers\n//SSZ Spec: https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization\n//BeaconBlockHeader Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblockheader\n//BeaconState Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconstate\nlibrary BeaconChainProofs {\n    // constants are the number of fields and the heights of the different merkle trees used in merkleizing beacon chain containers\n    uint256 internal constant BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT = 3;\n\n    uint256 internal constant BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT = 4;\n\n    uint256 internal constant BEACON_STATE_FIELD_TREE_HEIGHT = 5;\n\n    uint256 internal constant VALIDATOR_FIELD_TREE_HEIGHT = 3;\n\n    //Note: changed in the deneb hard fork from 4->5\n    uint256 internal constant EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT_DENEB = 5;\n    uint256 internal constant EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT_CAPELLA = 4;\n\n    // SLOTS_PER_HISTORICAL_ROOT = 2**13, so tree height is 13\n    uint256 internal constant BLOCK_ROOTS_TREE_HEIGHT = 13;\n\n    //HISTORICAL_ROOTS_LIMIT = 2**24, so tree height is 24\n    uint256 internal constant HISTORICAL_SUMMARIES_TREE_HEIGHT = 24;\n\n    //Index of block_summary_root in historical_summary container\n    uint256 internal constant BLOCK_SUMMARY_ROOT_INDEX = 0;\n\n    // tree height for hash tree of an individual withdrawal container\n    uint256 internal constant WITHDRAWAL_FIELD_TREE_HEIGHT = 2;\n\n    uint256 internal constant VALIDATOR_TREE_HEIGHT = 40;\n\n    // MAX_WITHDRAWALS_PER_PAYLOAD = 2**4, making tree height = 4\n    uint256 internal constant WITHDRAWALS_TREE_HEIGHT = 4;\n\n    //in beacon block body https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#beaconblockbody\n    uint256 internal constant EXECUTION_PAYLOAD_INDEX = 9;\n\n    // in beacon block header https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblockheader\n    uint256 internal constant SLOT_INDEX = 0;\n    uint256 internal constant STATE_ROOT_INDEX = 3;\n    uint256 internal constant BODY_ROOT_INDEX = 4;\n    // in beacon state https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#beaconstate\n    uint256 internal constant VALIDATOR_TREE_ROOT_INDEX = 11;\n    uint256 internal constant HISTORICAL_SUMMARIES_INDEX = 27;\n\n    // in validator https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\n    uint256 internal constant VALIDATOR_PUBKEY_INDEX = 0;\n    uint256 internal constant VALIDATOR_WITHDRAWAL_CREDENTIALS_INDEX = 1;\n    uint256 internal constant VALIDATOR_BALANCE_INDEX = 2;\n    uint256 internal constant VALIDATOR_WITHDRAWABLE_EPOCH_INDEX = 7;\n\n    // in execution payload header\n    uint256 internal constant TIMESTAMP_INDEX = 9;\n\n    //in execution payload\n    uint256 internal constant WITHDRAWALS_INDEX = 14;\n\n    // in withdrawal\n    uint256 internal constant WITHDRAWAL_VALIDATOR_INDEX_INDEX = 1;\n    uint256 internal constant WITHDRAWAL_VALIDATOR_AMOUNT_INDEX = 3;\n\n    //Misc Constants\n\n    /// @notice The number of slots each epoch in the beacon chain\n    uint64 internal constant SLOTS_PER_EPOCH = 32;\n\n    /// @notice The number of seconds in a slot in the beacon chain\n    uint64 internal constant SECONDS_PER_SLOT = 12;\n\n    /// @notice Number of seconds per epoch: 384 == 32 slots/epoch * 12 seconds/slot \n    uint64 internal constant SECONDS_PER_EPOCH = SLOTS_PER_EPOCH * SECONDS_PER_SLOT;\n\n    bytes8 internal constant UINT64_MASK = 0xffffffffffffffff;\n\n    /// @notice This struct contains the merkle proofs and leaves needed to verify a partial/full withdrawal\n    struct WithdrawalProof {\n        bytes withdrawalProof;\n        bytes slotProof;\n        bytes executionPayloadProof;\n        bytes timestampProof;\n        bytes historicalSummaryBlockRootProof;\n        uint64 blockRootIndex;\n        uint64 historicalSummaryIndex;\n        uint64 withdrawalIndex;\n        bytes32 blockRoot;\n        bytes32 slotRoot;\n        bytes32 timestampRoot;\n        bytes32 executionPayloadRoot;\n    }\n\n    /// @notice This struct contains the root and proof for verifying the state root against the oracle block root\n    struct StateRootProof {\n        bytes32 beaconStateRoot;\n        bytes proof;\n    }\n\n    /**\n     * @notice This function verifies merkle proofs of the fields of a certain validator against a beacon chain state root\n     * @param validatorIndex the index of the proven validator\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\n     * @param validatorFieldsProof is the data used in proving the validator's fields\n     * @param validatorFields the claimed fields of the validator\n     */\n    function verifyValidatorFields(\n        bytes32 beaconStateRoot,\n        bytes32[] calldata validatorFields,\n        bytes calldata validatorFieldsProof,\n        uint40 validatorIndex\n    ) internal view {\n        require(\n            validatorFields.length == 2 ** VALIDATOR_FIELD_TREE_HEIGHT,\n            \"BeaconChainProofs.verifyValidatorFields: Validator fields has incorrect length\"\n        );\n\n        /**\n         * Note: the length of the validator merkle proof is BeaconChainProofs.VALIDATOR_TREE_HEIGHT + 1.\n         * There is an additional layer added by hashing the root with the length of the validator list\n         */\n        require(\n            validatorFieldsProof.length == 32 * ((VALIDATOR_TREE_HEIGHT + 1) + BEACON_STATE_FIELD_TREE_HEIGHT),\n            \"BeaconChainProofs.verifyValidatorFields: Proof has incorrect length\"\n        );\n        uint256 index = (VALIDATOR_TREE_ROOT_INDEX << (VALIDATOR_TREE_HEIGHT + 1)) | uint256(validatorIndex);\n        // merkleize the validatorFields to get the leaf to prove\n        bytes32 validatorRoot = Merkle.merkleizeSha256(validatorFields);\n\n        // verify the proof of the validatorRoot against the beaconStateRoot\n        require(\n            Merkle.verifyInclusionSha256({\n                proof: validatorFieldsProof,\n                root: beaconStateRoot,\n                leaf: validatorRoot,\n                index: index\n            }),\n            \"BeaconChainProofs.verifyValidatorFields: Invalid merkle proof\"\n        );\n    }\n\n    /**\n     * @notice This function verifies the latestBlockHeader against the state root. the latestBlockHeader is\n     * a tracked in the beacon state.\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\n     * @param stateRootProof is the provided merkle proof\n     * @param latestBlockRoot is hashtree root of the latest block header in the beacon state\n     */\n    function verifyStateRootAgainstLatestBlockRoot(\n        bytes32 latestBlockRoot,\n        bytes32 beaconStateRoot,\n        bytes calldata stateRootProof\n    ) internal view {\n        require(\n            stateRootProof.length == 32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),\n            \"BeaconChainProofs.verifyStateRootAgainstLatestBlockRoot: Proof has incorrect length\"\n        );\n        //Next we verify the slot against the blockRoot\n        require(\n            Merkle.verifyInclusionSha256({\n                proof: stateRootProof,\n                root: latestBlockRoot,\n                leaf: beaconStateRoot,\n                index: STATE_ROOT_INDEX\n            }),\n            \"BeaconChainProofs.verifyStateRootAgainstLatestBlockRoot: Invalid latest block header root merkle proof\"\n        );\n    }\n\n    /**\n     * @notice This function verifies the slot and the withdrawal fields for a given withdrawal\n     * @param withdrawalProof is the provided set of merkle proofs\n     * @param withdrawalFields is the serialized withdrawal container to be proven\n     */\n    function verifyWithdrawal(\n        bytes32 beaconStateRoot,\n        bytes32[] calldata withdrawalFields,\n        WithdrawalProof calldata withdrawalProof,\n        uint64 denebForkTimestamp\n    ) internal view {\n        require(\n            withdrawalFields.length == 2 ** WITHDRAWAL_FIELD_TREE_HEIGHT,\n            \"BeaconChainProofs.verifyWithdrawal: withdrawalFields has incorrect length\"\n        );\n\n        require(\n            withdrawalProof.blockRootIndex < 2 ** BLOCK_ROOTS_TREE_HEIGHT,\n            \"BeaconChainProofs.verifyWithdrawal: blockRootIndex is too large\"\n        );\n        require(\n            withdrawalProof.withdrawalIndex < 2 ** WITHDRAWALS_TREE_HEIGHT,\n            \"BeaconChainProofs.verifyWithdrawal: withdrawalIndex is too large\"\n        );\n\n        require(\n            withdrawalProof.historicalSummaryIndex < 2 ** HISTORICAL_SUMMARIES_TREE_HEIGHT,\n            \"BeaconChainProofs.verifyWithdrawal: historicalSummaryIndex is too large\"\n        );\n\n        //Note: post deneb hard fork, the number of exection payload header fields increased from 15->17, adding an extra level to the tree height\n        uint256 executionPayloadHeaderFieldTreeHeight = (getWithdrawalTimestamp(withdrawalProof) < denebForkTimestamp) ? EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT_CAPELLA : EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT_DENEB;\n        require(\n            withdrawalProof.withdrawalProof.length ==\n                32 * (executionPayloadHeaderFieldTreeHeight + WITHDRAWALS_TREE_HEIGHT + 1),\n            \"BeaconChainProofs.verifyWithdrawal: withdrawalProof has incorrect length\"\n        );\n        require(\n            withdrawalProof.executionPayloadProof.length ==\n                32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT + BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT),\n            \"BeaconChainProofs.verifyWithdrawal: executionPayloadProof has incorrect length\"\n        );\n        require(\n            withdrawalProof.slotProof.length == 32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),\n            \"BeaconChainProofs.verifyWithdrawal: slotProof has incorrect length\"\n        );\n        require(\n            withdrawalProof.timestampProof.length == 32 * (executionPayloadHeaderFieldTreeHeight),\n            \"BeaconChainProofs.verifyWithdrawal: timestampProof has incorrect length\"\n        );\n\n        require(\n            withdrawalProof.historicalSummaryBlockRootProof.length ==\n                32 *\n                    (BEACON_STATE_FIELD_TREE_HEIGHT +\n                        (HISTORICAL_SUMMARIES_TREE_HEIGHT + 1) +\n                        1 +\n                        (BLOCK_ROOTS_TREE_HEIGHT)),\n            \"BeaconChainProofs.verifyWithdrawal: historicalSummaryBlockRootProof has incorrect length\"\n        );\n        /**\n         * Note: Here, the \"1\" in \"1 + (BLOCK_ROOTS_TREE_HEIGHT)\" signifies that extra step of choosing the \"block_root_summary\" within the individual\n         * \"historical_summary\". Everywhere else it signifies merkelize_with_mixin, where the length of an array is hashed with the root of the array,\n         * but not here.\n         */\n        uint256 historicalBlockHeaderIndex = (HISTORICAL_SUMMARIES_INDEX <<\n            ((HISTORICAL_SUMMARIES_TREE_HEIGHT + 1) + 1 + (BLOCK_ROOTS_TREE_HEIGHT))) |\n            (uint256(withdrawalProof.historicalSummaryIndex) << (1 + (BLOCK_ROOTS_TREE_HEIGHT))) |\n            (BLOCK_SUMMARY_ROOT_INDEX << (BLOCK_ROOTS_TREE_HEIGHT)) |\n            uint256(withdrawalProof.blockRootIndex);\n\n        require(\n            Merkle.verifyInclusionSha256({\n                proof: withdrawalProof.historicalSummaryBlockRootProof,\n                root: beaconStateRoot,\n                leaf: withdrawalProof.blockRoot,\n                index: historicalBlockHeaderIndex\n            }),\n            \"BeaconChainProofs.verifyWithdrawal: Invalid historicalsummary merkle proof\"\n        );\n\n        //Next we verify the slot against the blockRoot\n        require(\n            Merkle.verifyInclusionSha256({\n                proof: withdrawalProof.slotProof,\n                root: withdrawalProof.blockRoot,\n                leaf: withdrawalProof.slotRoot,\n                index: SLOT_INDEX\n            }),\n            \"BeaconChainProofs.verifyWithdrawal: Invalid slot merkle proof\"\n        );\n\n        {\n            // Next we verify the executionPayloadRoot against the blockRoot\n            uint256 executionPayloadIndex = (BODY_ROOT_INDEX << (BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT)) |\n                EXECUTION_PAYLOAD_INDEX;\n            require(\n                Merkle.verifyInclusionSha256({\n                    proof: withdrawalProof.executionPayloadProof,\n                    root: withdrawalProof.blockRoot,\n                    leaf: withdrawalProof.executionPayloadRoot,\n                    index: executionPayloadIndex\n                }),\n                \"BeaconChainProofs.verifyWithdrawal: Invalid executionPayload merkle proof\"\n            );\n        }\n\n        // Next we verify the timestampRoot against the executionPayload root\n        require(\n            Merkle.verifyInclusionSha256({\n                proof: withdrawalProof.timestampProof,\n                root: withdrawalProof.executionPayloadRoot,\n                leaf: withdrawalProof.timestampRoot,\n                index: TIMESTAMP_INDEX\n            }),\n            \"BeaconChainProofs.verifyWithdrawal: Invalid timestamp merkle proof\"\n        );\n\n        {\n            /**\n             * Next we verify the withdrawal fields against the executionPayloadRoot:\n             * First we compute the withdrawal_index, then we merkleize the \n             * withdrawalFields container to calculate the withdrawalRoot.\n             *\n             * Note: Merkleization of the withdrawals root tree uses MerkleizeWithMixin, i.e., the length of the array is hashed with the root of\n             * the array.  Thus we shift the WITHDRAWALS_INDEX over by WITHDRAWALS_TREE_HEIGHT + 1 and not just WITHDRAWALS_TREE_HEIGHT.\n             */\n            uint256 withdrawalIndex = (WITHDRAWALS_INDEX << (WITHDRAWALS_TREE_HEIGHT + 1)) |\n                uint256(withdrawalProof.withdrawalIndex);\n            bytes32 withdrawalRoot = Merkle.merkleizeSha256(withdrawalFields);\n            require(\n                Merkle.verifyInclusionSha256({\n                    proof: withdrawalProof.withdrawalProof,\n                    root: withdrawalProof.executionPayloadRoot,\n                    leaf: withdrawalRoot,\n                    index: withdrawalIndex\n                }),\n                \"BeaconChainProofs.verifyWithdrawal: Invalid withdrawal merkle proof\"\n            );\n        }\n    }\n\n    /**\n     * @notice This function replicates the ssz hashing of a validator's pubkey, outlined below:\n     *  hh := ssz.NewHasher()\n     *  hh.PutBytes(validatorPubkey[:])\n     *  validatorPubkeyHash := hh.Hash()\n     *  hh.Reset()\n     */\n    function hashValidatorBLSPubkey(bytes memory validatorPubkey) internal pure returns (bytes32 pubkeyHash) {\n        require(validatorPubkey.length == 48, \"Input should be 48 bytes in length\");\n        return sha256(abi.encodePacked(validatorPubkey, bytes16(0)));\n    }\n\n    /**\n     * @dev Retrieve the withdrawal timestamp\n     */\n    function getWithdrawalTimestamp(WithdrawalProof memory withdrawalProof) internal pure returns (uint64) {\n        return\n            Endian.fromLittleEndianUint64(withdrawalProof.timestampRoot);\n    }\n\n    /**\n     * @dev Converts the withdrawal's slot to an epoch\n     */\n    function getWithdrawalEpoch(WithdrawalProof memory withdrawalProof) internal pure returns (uint64) {\n        return\n            Endian.fromLittleEndianUint64(withdrawalProof.slotRoot) / SLOTS_PER_EPOCH;\n    }\n\n    /**\n     * Indices for validator fields (refer to consensus specs):\n     * 0: pubkey\n     * 1: withdrawal credentials\n     * 2: effective balance\n     * 3: slashed?\n     * 4: activation elligibility epoch\n     * 5: activation epoch\n     * 6: exit epoch\n     * 7: withdrawable epoch\n     */\n\n    /**\n     * @dev Retrieves a validator's pubkey hash\n     */\n    function getPubkeyHash(bytes32[] memory validatorFields) internal pure returns (bytes32) {\n        return \n            validatorFields[VALIDATOR_PUBKEY_INDEX];\n    }\n\n    function getWithdrawalCredentials(bytes32[] memory validatorFields) internal pure returns (bytes32) {\n        return\n            validatorFields[VALIDATOR_WITHDRAWAL_CREDENTIALS_INDEX];\n    }\n\n    /**\n     * @dev Retrieves a validator's effective balance (in gwei)\n     */\n    function getEffectiveBalanceGwei(bytes32[] memory validatorFields) internal pure returns (uint64) {\n        return \n            Endian.fromLittleEndianUint64(validatorFields[VALIDATOR_BALANCE_INDEX]);\n    }\n\n    /**\n     * @dev Retrieves a validator's withdrawable epoch\n     */\n    function getWithdrawableEpoch(bytes32[] memory validatorFields) internal pure returns (uint64) {\n        return \n            Endian.fromLittleEndianUint64(validatorFields[VALIDATOR_WITHDRAWABLE_EPOCH_INDEX]);\n    }\n\n    /**\n     * Indices for withdrawal fields (refer to consensus specs):\n     * 0: withdrawal index\n     * 1: validator index\n     * 2: execution address\n     * 3: withdrawal amount\n     */\n\n    /**\n     * @dev Retrieves a withdrawal's validator index\n     */\n    function getValidatorIndex(bytes32[] memory withdrawalFields) internal pure returns (uint40) {\n        return \n            uint40(Endian.fromLittleEndianUint64(withdrawalFields[WITHDRAWAL_VALIDATOR_INDEX_INDEX]));\n    }\n\n    /**\n     * @dev Retrieves a withdrawal's withdrawal amount (in gwei)\n     */\n    function getWithdrawalAmountGwei(bytes32[] memory withdrawalFields) internal pure returns (uint64) {\n        return\n            Endian.fromLittleEndianUint64(withdrawalFields[WITHDRAWAL_VALIDATOR_AMOUNT_INDEX]);\n    }\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/permissions/Pausable.sol\n\n/**\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\n * These functions should be permissioned as \"onlyPauser\" which defers to a `PauserRegistry` for determining access control.\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \"paused\"), and if you unpause,\n * you can only flip (any number of) switches to off/0 (aka \"paused\").\n * If you want a pauseXYZ function that just flips a single bit / \"pausing flag\", it will:\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\n * 2) update the paused state to this new value\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\n */\ncontract Pausable is IPausable {\n    /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\n    IPauserRegistry public pauserRegistry;\n\n    /// @dev whether or not the contract is currently paused\n    uint256 private _paused;\n\n    uint256 internal constant UNPAUSE_ALL = 0;\n    uint256 internal constant PAUSE_ALL = type(uint256).max;\n\n    /// @notice\n    modifier onlyPauser() {\n        require(pauserRegistry.isPauser(msg.sender), \"msg.sender is not permissioned as pauser\");\n        _;\n    }\n\n    modifier onlyUnpauser() {\n        require(msg.sender == pauserRegistry.unpauser(), \"msg.sender is not permissioned as unpauser\");\n        _;\n    }\n\n    /// @notice Throws if the contract is paused, i.e. if any of the bits in `_paused` is flipped to 1.\n    modifier whenNotPaused() {\n        require(_paused == 0, \"Pausable: contract is paused\");\n        _;\n    }\n\n    /// @notice Throws if the `indexed`th bit of `_paused` is 1, i.e. if the `index`th pause switch is flipped.\n    modifier onlyWhenNotPaused(uint8 index) {\n        require(!paused(index), \"Pausable: index is paused\");\n        _;\n    }\n\n    /// @notice One-time function for setting the `pauserRegistry` and initializing the value of `_paused`.\n    function _initializePauser(IPauserRegistry _pauserRegistry, uint256 initPausedStatus) internal {\n        require(\n            address(pauserRegistry) == address(0) && address(_pauserRegistry) != address(0),\n            \"Pausable._initializePauser: _initializePauser() can only be called once\"\n        );\n        _paused = initPausedStatus;\n        emit Paused(msg.sender, initPausedStatus);\n        _setPauserRegistry(_pauserRegistry);\n    }\n\n    /**\n     * @notice This function is used to pause an EigenLayer contract's functionality.\n     * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\n     * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\n     */\n    function pause(uint256 newPausedStatus) external onlyPauser {\n        // verify that the `newPausedStatus` does not *unflip* any bits (i.e. doesn't unpause anything, all 1 bits remain)\n        require((_paused & newPausedStatus) == _paused, \"Pausable.pause: invalid attempt to unpause functionality\");\n        _paused = newPausedStatus;\n        emit Paused(msg.sender, newPausedStatus);\n    }\n\n    /**\n     * @notice Alias for `pause(type(uint256).max)`.\n     */\n    function pauseAll() external onlyPauser {\n        _paused = type(uint256).max;\n        emit Paused(msg.sender, type(uint256).max);\n    }\n\n    /**\n     * @notice This function is used to unpause an EigenLayer contract's functionality.\n     * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\n     * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\n     */\n    function unpause(uint256 newPausedStatus) external onlyUnpauser {\n        // verify that the `newPausedStatus` does not *flip* any bits (i.e. doesn't pause anything, all 0 bits remain)\n        require(\n            ((~_paused) & (~newPausedStatus)) == (~_paused),\n            \"Pausable.unpause: invalid attempt to pause functionality\"\n        );\n        _paused = newPausedStatus;\n        emit Unpaused(msg.sender, newPausedStatus);\n    }\n\n    /// @notice Returns the current paused status as a uint256.\n    function paused() public view virtual returns (uint256) {\n        return _paused;\n    }\n\n    /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\n    function paused(uint8 index) public view virtual returns (bool) {\n        uint256 mask = 1 << index;\n        return ((_paused & mask) == mask);\n    }\n\n    /// @notice Allows the unpauser to set a new pauser registry\n    function setPauserRegistry(IPauserRegistry newPauserRegistry) external onlyUnpauser {\n        _setPauserRegistry(newPauserRegistry);\n    }\n\n    /// internal function for setting pauser registry\n    function _setPauserRegistry(IPauserRegistry newPauserRegistry) internal {\n        require(\n            address(newPauserRegistry) != address(0),\n            \"Pausable._setPauserRegistry: newPauserRegistry cannot be the zero address\"\n        );\n        emit PauserRegistrySet(pauserRegistry, newPauserRegistry);\n        pauserRegistry = newPauserRegistry;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\n\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/CheckpointsUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Checkpoints.sol)\n\n/**\n * @dev This library defines the `History` struct, for checkpointing values as they change at different points in\n * time, and later looking up past values by block number. See {Votes} as an example.\n *\n * To create a history of checkpoints define a variable type `Checkpoints.History` in your contract, and store a new\n * checkpoint for the current transaction block using the {push} function.\n *\n * _Available since v4.5._\n */\nlibrary CheckpointsUpgradeable {\n    struct Checkpoint {\n        uint32 _blockNumber;\n        uint224 _value;\n    }\n\n    struct History {\n        Checkpoint[] _checkpoints;\n    }\n\n    /**\n     * @dev Returns the value in the latest checkpoint, or zero if there are no checkpoints.\n     */\n    function latest(History storage self) internal view returns (uint256) {\n        uint256 pos = self._checkpoints.length;\n        return pos == 0 ? 0 : self._checkpoints[pos - 1]._value;\n    }\n\n    /**\n     * @dev Returns the value at a given block number. If a checkpoint is not available at that block, the closest one\n     * before it is returned, or zero otherwise.\n     */\n    function getAtBlock(History storage self, uint256 blockNumber) internal view returns (uint256) {\n        require(blockNumber < block.number, \"Checkpoints: block not yet mined\");\n\n        uint256 high = self._checkpoints.length;\n        uint256 low = 0;\n        while (low < high) {\n            uint256 mid = MathUpgradeable.average(low, high);\n            if (self._checkpoints[mid]._blockNumber > blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return high == 0 ? 0 : self._checkpoints[high - 1]._value;\n    }\n\n    /**\n     * @dev Pushes a value onto a History so that it is stored as the checkpoint for the current block.\n     *\n     * Returns previous value and new value.\n     */\n    function push(History storage self, uint256 value) internal returns (uint256, uint256) {\n        uint256 pos = self._checkpoints.length;\n        uint256 old = latest(self);\n        if (pos > 0 && self._checkpoints[pos - 1]._blockNumber == block.number) {\n            self._checkpoints[pos - 1]._value = SafeCastUpgradeable.toUint224(value);\n        } else {\n            self._checkpoints.push(\n                Checkpoint({_blockNumber: SafeCastUpgradeable.toUint32(block.number), _value: SafeCastUpgradeable.toUint224(value)})\n            );\n        }\n        return (old, value);\n    }\n\n    /**\n     * @dev Pushes a value onto a History, by updating the latest value using binary operation `op`. The new value will\n     * be set to `op(latest, delta)`.\n     *\n     * Returns previous value and new value.\n     */\n    function push(\n        History storage self,\n        function(uint256, uint256) view returns (uint256) op,\n        uint256 delta\n    ) internal returns (uint256, uint256) {\n        return push(self, op(latest(self), delta));\n    }\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n// lib/eigenlayer-middleware/src/interfaces/IBLSApkRegistry.sol\n\n/**\n * @title Minimal interface for a registry that keeps track of aggregate operator public keys across many quorums.\n * @author Layr Labs, Inc.\n */\ninterface IBLSApkRegistry is IRegistry {\n    // STRUCTS\n    /// @notice Data structure used to track the history of the Aggregate Public Key of all operators\n    struct ApkUpdate {\n        // first 24 bytes of keccak256(apk_x0, apk_x1, apk_y0, apk_y1)\n        bytes24 apkHash;\n        // block number at which the update occurred\n        uint32 updateBlockNumber;\n        // block number at which the next update occurred\n        uint32 nextUpdateBlockNumber;\n    }\n\n    /**\n     * @notice Struct used when registering a new public key\n     * @param pubkeyRegistrationSignature is the registration message signed by the private key of the operator\n     * @param pubkeyG1 is the corresponding G1 public key of the operator \n     * @param pubkeyG2 is the corresponding G2 public key of the operator\n     */     \n    struct PubkeyRegistrationParams {\n        BN254.G1Point pubkeyRegistrationSignature;\n        BN254.G1Point pubkeyG1;\n        BN254.G2Point pubkeyG2;\n    }\n\n    // EVENTS\n    /// @notice Emitted when `operator` registers with the public keys `pubkeyG1` and `pubkeyG2`.\n    event NewPubkeyRegistration(address indexed operator, BN254.G1Point pubkeyG1, BN254.G2Point pubkeyG2);\n\n    // @notice Emitted when a new operator pubkey is registered for a set of quorums\n    event OperatorAddedToQuorums(\n        address operator,\n        bytes32 operatorId,\n        bytes quorumNumbers\n    );\n\n    // @notice Emitted when an operator pubkey is removed from a set of quorums\n    event OperatorRemovedFromQuorums(\n        address operator, \n        bytes32 operatorId,\n        bytes quorumNumbers\n    );\n\n    /**\n     * @notice Registers the `operator`'s pubkey for the specified `quorumNumbers`.\n     * @param operator The address of the operator to register.\n     * @param quorumNumbers The quorum numbers the operator is registering for, where each byte is an 8 bit integer quorumNumber.\n     * @dev access restricted to the RegistryCoordinator\n     * @dev Preconditions (these are assumed, not validated in this contract):\n     *         1) `quorumNumbers` has no duplicates\n     *         2) `quorumNumbers.length` != 0\n     *         3) `quorumNumbers` is ordered in ascending order\n     *         4) the operator is not already registered\n     */\n    function registerOperator(address operator, bytes calldata quorumNumbers) external;\n\n    /**\n     * @notice Deregisters the `operator`'s pubkey for the specified `quorumNumbers`.\n     * @param operator The address of the operator to deregister.\n     * @param quorumNumbers The quorum numbers the operator is deregistering from, where each byte is an 8 bit integer quorumNumber.\n     * @dev access restricted to the RegistryCoordinator\n     * @dev Preconditions (these are assumed, not validated in this contract):\n     *         1) `quorumNumbers` has no duplicates\n     *         2) `quorumNumbers.length` != 0\n     *         3) `quorumNumbers` is ordered in ascending order\n     *         4) the operator is not already deregistered\n     *         5) `quorumNumbers` is a subset of the quorumNumbers that the operator is registered for\n     */ \n    function deregisterOperator(address operator, bytes calldata quorumNumbers) external;\n    \n    /**\n     * @notice Initializes a new quorum by pushing its first apk update\n     * @param quorumNumber The number of the new quorum\n     */\n    function initializeQuorum(uint8 quorumNumber) external;\n\n    /**\n     * @notice mapping from operator address to pubkey hash.\n     * Returns *zero* if the `operator` has never registered, and otherwise returns the hash of the public key of the operator.\n     */\n    function operatorToPubkeyHash(address operator) external view returns (bytes32);\n\n    /**\n     * @notice mapping from pubkey hash to operator address.\n     * Returns *zero* if no operator has ever registered the public key corresponding to `pubkeyHash`,\n     * and otherwise returns the (unique) registered operator who owns the BLS public key that is the preimage of `pubkeyHash`.\n     */\n    function pubkeyHashToOperator(bytes32 pubkeyHash) external view returns (address);\n\n    /**\n     * @notice Called by the RegistryCoordinator register an operator as the owner of a BLS public key.\n     * @param operator is the operator for whom the key is being registered\n     * @param params contains the G1 & G2 public keys of the operator, and a signature proving their ownership\n     * @param pubkeyRegistrationMessageHash is a hash that the operator must sign to prove key ownership\n     */\n    function registerBLSPublicKey(\n        address operator,\n        PubkeyRegistrationParams calldata params,\n        BN254.G1Point calldata pubkeyRegistrationMessageHash\n    ) external returns (bytes32 operatorId);\n\n    /**\n     * @notice Returns the pubkey and pubkey hash of an operator\n     * @dev Reverts if the operator has not registered a valid pubkey\n     */\n    function getRegisteredPubkey(address operator) external view returns (BN254.G1Point memory, bytes32);\n\n    /// @notice Returns the current APK for the provided `quorumNumber `\n    function getApk(uint8 quorumNumber) external view returns (BN254.G1Point memory);\n\n    /// @notice Returns the index of the quorumApk index at `blockNumber` for the provided `quorumNumber`\n    function getApkIndicesAtBlockNumber(bytes calldata quorumNumbers, uint256 blockNumber) external view returns(uint32[] memory);\n\n    /// @notice Returns the `ApkUpdate` struct at `index` in the list of APK updates for the `quorumNumber`\n    function getApkUpdateAtIndex(uint8 quorumNumber, uint256 index) external view returns (ApkUpdate memory);\n\n    /// @notice Returns the operator address for the given `pubkeyHash`\n    function getOperatorFromPubkeyHash(bytes32 pubkeyHash) external view returns (address);\n\n    /**\n     * @notice get 24 byte hash of the apk of `quorumNumber` at `blockNumber` using the provided `index`;\n     * called by checkSignatures in BLSSignatureChecker.sol.\n     * @param quorumNumber is the quorum whose ApkHash is being retrieved\n     * @param blockNumber is the number of the block for which the latest ApkHash will be retrieved\n     * @param index is the index of the apkUpdate being retrieved from the list of quorum apkUpdates in storage\n     */\n    function getApkHashAtBlockNumberAndIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) external view returns (bytes24);\n\n    /// @notice returns the ID used to identify the `operator` within this AVS.\n    /// @dev Returns zero in the event that the `operator` has never registered for the AVS\n    function getOperatorId(address operator) external view returns (bytes32);\n}\n\n// lib/eigenlayer-middleware/src/interfaces/IECDSAStakeRegistryEventsAndErrors.sol\n\nstruct StrategyParams {\n    IStrategy strategy; // The strategy contract reference\n    uint96 multiplier; // The multiplier applied to the strategy\n}\n\nstruct Quorum {\n    StrategyParams[] strategies; // An array of strategy parameters to define the quorum\n}\n\ninterface ECDSAStakeRegistryEventsAndErrors {\n    /// @notice Emitted when the system registers an operator\n    /// @param _operator The address of the registered operator\n    /// @param _avs The address of the associated AVS\n    event OperatorRegistered(address indexed _operator, address indexed _avs);\n\n    /// @notice Emitted when the system deregisters an operator\n    /// @param _operator The address of the deregistered operator\n    /// @param _avs The address of the associated AVS\n    event OperatorDeregistered(address indexed _operator, address indexed _avs);\n\n    /// @notice Emitted when the system updates the quorum\n    /// @param _old The previous quorum configuration\n    /// @param _new The new quorum configuration\n    event QuorumUpdated(Quorum _old, Quorum _new);\n\n    /// @notice Emitted when the weight to join the operator set updates\n    /// @param _old The previous minimum weight\n    /// @param _new The new minimumWeight\n    event MinimumWeightUpdated(uint256 _old, uint256 _new);\n\n    /// @notice Emitted when the weight required to be an operator changes\n    /// @param oldMinimumWeight The previous weight\n    /// @param newMinimumWeight The updated weight\n    event UpdateMinimumWeight(\n        uint256 oldMinimumWeight,\n        uint256 newMinimumWeight\n    );\n\n    /// @notice Emitted when the system updates an operator's weight\n    /// @param _operator The address of the operator updated\n    /// @param oldWeight The operator's weight before the update\n    /// @param newWeight The operator's weight after the update\n    event OperatorWeightUpdated(\n        address indexed _operator,\n        uint256 oldWeight,\n        uint256 newWeight\n    );\n\n    /// @notice Emitted when the system updates the total weight\n    /// @param oldTotalWeight The total weight before the update\n    /// @param newTotalWeight The total weight after the update\n    event TotalWeightUpdated(uint256 oldTotalWeight, uint256 newTotalWeight);\n\n    /// @notice Emits when setting a new threshold weight.\n    event ThresholdWeightUpdated(uint256 _thresholdWeight);\n\n    /// @notice Emitted when an operator's signing key is updated\n    /// @param operator The address of the operator whose signing key was updated\n    /// @param updateBlock The block number at which the signing key was updated\n    /// @param newSigningKey The operator's signing key after the update\n    /// @param oldSigningKey The operator's signing key before the update\n    event SigningKeyUpdate(\n        address indexed operator,\n        uint256 indexed updateBlock,\n        address indexed newSigningKey,\n        address oldSigningKey\n    );\n    /// @notice Indicates when the lengths of the signers array and signatures array do not match.\n    error LengthMismatch();\n\n    /// @notice Indicates encountering an invalid length for the signers or signatures array.\n    error InvalidLength();\n\n    /// @notice Indicates encountering an invalid signature.\n    error InvalidSignature();\n\n    /// @notice Thrown when the threshold update is greater than BPS\n    error InvalidThreshold();\n\n    /// @notice Thrown when missing operators in an update\n    error MustUpdateAllOperators();\n\n    /// @notice Reference blocks must be for blocks that have already been confirmed\n    error InvalidReferenceBlock();\n\n    /// @notice Indicates operator weights were out of sync and the signed weight exceed the total\n    error InvalidSignedWeight();\n\n    /// @notice Indicates the total signed stake fails to meet the required threshold.\n    error InsufficientSignedStake();\n\n    /// @notice Indicates an individual signer's weight fails to meet the required threshold.\n    error InsufficientWeight();\n\n    /// @notice Indicates the quorum is invalid\n    error InvalidQuorum();\n\n    /// @notice Indicates the system finds a list of items unsorted\n    error NotSorted();\n\n    /// @notice Thrown when registering an already registered operator\n    error OperatorAlreadyRegistered();\n\n    /// @notice Thrown when de-registering or updating the stake for an unregisted operator\n    error OperatorNotRegistered();\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IRewardsCoordinator.sol\n\n/**\n * @title Interface for the `IRewardsCoordinator` contract.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice Allows AVSs to make \"Rewards Submissions\", which get distributed amongst the AVSs' confirmed\n * Operators and the Stakers delegated to those Operators.\n * Calculations are performed based on the completed RewardsSubmission, with the results posted in\n * a Merkle root against which Stakers & Operators can make claims.\n */\ninterface IRewardsCoordinator {\n    /// STRUCTS ///\n    /**\n     * @notice A linear combination of strategies and multipliers for AVSs to weigh\n     * EigenLayer strategies.\n     * @param strategy The EigenLayer strategy to be used for the rewards submission\n     * @param multiplier The weight of the strategy in the rewards submission\n     */\n    struct StrategyAndMultiplier {\n        IStrategy strategy;\n        uint96 multiplier;\n    }\n\n    /**\n     * Sliding Window for valid RewardsSubmission startTimestamp\n     *\n     * Scenario A: GENESIS_REWARDS_TIMESTAMP IS WITHIN RANGE\n     *         <-----MAX_RETROACTIVE_LENGTH-----> t (block.timestamp) <---MAX_FUTURE_LENGTH--->\n     *             <--------------------valid range for startTimestamp------------------------>\n     *             ^\n     *         GENESIS_REWARDS_TIMESTAMP\n     *\n     *\n     * Scenario B: GENESIS_REWARDS_TIMESTAMP IS OUT OF RANGE\n     *         <-----MAX_RETROACTIVE_LENGTH-----> t (block.timestamp) <---MAX_FUTURE_LENGTH--->\n     *         <------------------------valid range for startTimestamp------------------------>\n     *     ^\n     * GENESIS_REWARDS_TIMESTAMP\n     * @notice RewardsSubmission struct submitted by AVSs when making rewards for their operators and stakers\n     * RewardsSubmission can be for a time range within the valid window for startTimestamp and must be within max duration.\n     * See `createAVSRewardsSubmission()` for more details.\n     * @param strategiesAndMultipliers The strategies and their relative weights\n     * cannot have duplicate strategies and need to be sorted in ascending address order\n     * @param token The rewards token to be distributed\n     * @param amount The total amount of tokens to be distributed\n     * @param startTimestamp The timestamp (seconds) at which the submission range is considered for distribution\n     * could start in the past or in the future but within a valid range. See the diagram above.\n     * @param duration The duration of the submission range in seconds. Must be <= MAX_REWARDS_DURATION\n     */\n    struct RewardsSubmission {\n        StrategyAndMultiplier[] strategiesAndMultipliers;\n        IERC20 token;\n        uint256 amount;\n        uint32 startTimestamp;\n        uint32 duration;\n    }\n\n    /**\n     * @notice A distribution root is a merkle root of the distribution of earnings for a given period.\n     * The RewardsCoordinator stores all historical distribution roots so that earners can claim their earnings against older roots\n     * if they wish but the merkle tree contains the cumulative earnings of all earners and tokens for a given period so earners (or their claimers if set)\n     * only need to claim against the latest root to claim all available earnings.\n     * @param root The merkle root of the distribution\n     * @param rewardsCalculationEndTimestamp The timestamp (seconds) until which rewards have been calculated\n     * @param activatedAt The timestamp (seconds) at which the root can be claimed against\n     */\n    struct DistributionRoot {\n        bytes32 root;\n        uint32 rewardsCalculationEndTimestamp;\n        uint32 activatedAt;\n    }\n\n    /**\n     * @notice Internal leaf in the merkle tree for the earner's account leaf\n     * @param earner The address of the earner\n     * @param earnerTokenRoot The merkle root of the earner's token subtree\n     * Each leaf in the earner's token subtree is a TokenTreeMerkleLeaf\n     */\n\n    struct EarnerTreeMerkleLeaf {\n        address earner;\n        bytes32 earnerTokenRoot;\n    }\n\n    /**\n     * @notice The actual leaves in the distribution merkle tree specifying the token earnings\n     * for the respective earner's subtree. Each leaf is a claimable amount of a token for an earner.\n     * @param token The token for which the earnings are being claimed\n     * @param cumulativeEarnings The cumulative earnings of the earner for the token\n     */\n    struct TokenTreeMerkleLeaf {\n        IERC20 token;\n        uint256 cumulativeEarnings;\n    }\n\n    /**\n     * @notice A claim against a distribution root called by an\n     * earners claimer (could be the earner themselves). Each token claim will claim the difference\n     * between the cumulativeEarnings of the earner and the cumulativeClaimed of the claimer.\n     * Each claim can specify which of the earner's earned tokens they want to claim.\n     * See `processClaim()` for more details.\n     * @param rootIndex The index of the root in the list of DistributionRoots\n     * @param earnerIndex The index of the earner's account root in the merkle tree\n     * @param earnerTreeProof The proof of the earner's EarnerTreeMerkleLeaf against the merkle root\n     * @param earnerLeaf The earner's EarnerTreeMerkleLeaf struct, providing the earner address and earnerTokenRoot\n     * @param tokenIndices The indices of the token leaves in the earner's subtree\n     * @param tokenTreeProofs The proofs of the token leaves against the earner's earnerTokenRoot\n     * @param tokenLeaves The token leaves to be claimed\n     * @dev The merkle tree is structured with the merkle root at the top and EarnerTreeMerkleLeaf as internal leaves\n     * in the tree. Each earner leaf has its own subtree with TokenTreeMerkleLeaf as leaves in the subtree.\n     * To prove a claim against a specified rootIndex(which specifies the distributionRoot being used),\n     * the claim will first verify inclusion of the earner leaf in the tree against distributionRoots[rootIndex].root.\n     * Then for each token, it will verify inclusion of the token leaf in the earner's subtree against the earner's earnerTokenRoot.\n     */\n    struct RewardsMerkleClaim {\n        uint32 rootIndex;\n        uint32 earnerIndex;\n        bytes earnerTreeProof;\n        EarnerTreeMerkleLeaf earnerLeaf;\n        uint32[] tokenIndices;\n        bytes[] tokenTreeProofs;\n        TokenTreeMerkleLeaf[] tokenLeaves;\n    }\n\n    /// EVENTS ///\n\n    /// @notice emitted when an AVS creates a valid RewardsSubmission\n    event AVSRewardsSubmissionCreated(\n        address indexed avs,\n        uint256 indexed submissionNonce,\n        bytes32 indexed rewardsSubmissionHash,\n        RewardsSubmission rewardsSubmission\n    );\n    /// @notice emitted when a valid RewardsSubmission is created for all stakers by a valid submitter\n    event RewardsSubmissionForAllCreated(\n        address indexed submitter,\n        uint256 indexed submissionNonce,\n        bytes32 indexed rewardsSubmissionHash,\n        RewardsSubmission rewardsSubmission\n    );\n    /// @notice rewardsUpdater is responsible for submiting DistributionRoots, only owner can set rewardsUpdater\n    event RewardsUpdaterSet(address indexed oldRewardsUpdater, address indexed newRewardsUpdater);\n    event RewardsForAllSubmitterSet(\n        address indexed rewardsForAllSubmitter,\n        bool indexed oldValue,\n        bool indexed newValue\n    );\n    event ActivationDelaySet(uint32 oldActivationDelay, uint32 newActivationDelay);\n    event GlobalCommissionBipsSet(uint16 oldGlobalCommissionBips, uint16 newGlobalCommissionBips);\n    event ClaimerForSet(address indexed earner, address indexed oldClaimer, address indexed claimer);\n    /// @notice rootIndex is the specific array index of the newly created root in the storage array\n    event DistributionRootSubmitted(\n        uint32 indexed rootIndex,\n        bytes32 indexed root,\n        uint32 indexed rewardsCalculationEndTimestamp,\n        uint32 activatedAt\n    );\n    /// @notice root is one of the submitted distribution roots that was claimed against\n    event RewardsClaimed(\n        bytes32 root,\n        address indexed earner,\n        address indexed claimer,\n        address indexed recipient,\n        IERC20 token,\n        uint256 claimedAmount\n    );\n\n    /*******************************************************************************\n                            VIEW FUNCTIONS\n    *******************************************************************************/\n\n    /// @notice The address of the entity that can update the contract with new merkle roots\n    function rewardsUpdater() external view returns (address);\n    \n    /**\n     * @notice The interval in seconds at which the calculation for a RewardsSubmission distribution is done.\n     * @dev Rewards Submission durations must be multiples of this interval.\n     */\n    function CALCULATION_INTERVAL_SECONDS() external view returns (uint32);\n\n    /// @notice The maximum amount of time (seconds) that a RewardsSubmission can span over\n    function MAX_REWARDS_DURATION() external view returns (uint32);\n\n    /// @notice max amount of time (seconds) that a submission can start in the past\n    function MAX_RETROACTIVE_LENGTH() external view returns (uint32);\n\n    /// @notice max amount of time (seconds) that a submission can start in the future\n    function MAX_FUTURE_LENGTH() external view returns (uint32);\n\n    /// @notice absolute min timestamp (seconds) that a submission can start at\n    function GENESIS_REWARDS_TIMESTAMP() external view returns (uint32);\n\n    /// @notice Delay in timestamp (seconds) before a posted root can be claimed against\n    function activationDelay() external view returns (uint32);\n\n    /// @notice Mapping: earner => the address of the entity who can call `processClaim` on behalf of the earner\n    function claimerFor(address earner) external view returns (address);\n\n    /// @notice Mapping: claimer => token => total amount claimed\n    function cumulativeClaimed(address claimer, IERC20 token) external view returns (uint256);\n\n    /// @notice the commission for all operators across all avss\n    function globalOperatorCommissionBips() external view returns (uint16);\n\n    /// @notice the commission for a specific operator for a specific avs\n    /// NOTE: Currently unused and simply returns the globalOperatorCommissionBips value but will be used in future release\n    function operatorCommissionBips(address operator, address avs) external view returns (uint16);\n\n    /// @notice return the hash of the earner's leaf\n    function calculateEarnerLeafHash(EarnerTreeMerkleLeaf calldata leaf) external pure returns (bytes32);\n\n    /// @notice returns the hash of the earner's token leaf\n    function calculateTokenLeafHash(TokenTreeMerkleLeaf calldata leaf) external pure returns (bytes32);\n\n    /// @notice returns 'true' if the claim would currently pass the check in `processClaims`\n    /// but will revert if not valid\n    function checkClaim(RewardsMerkleClaim calldata claim) external view returns (bool);\n\n    /// @notice The timestamp until which RewardsSubmissions have been calculated\n    function currRewardsCalculationEndTimestamp() external view returns (uint32);\n\n    /// @notice loop through distribution roots from reverse and return hash\n    function getRootIndexFromHash(bytes32 rootHash) external view returns (uint32);\n\n    /// @notice returns the number of distribution roots posted\n    function getDistributionRootsLength() external view returns (uint256);\n\n    /*******************************************************************************\n                            EXTERNAL FUNCTIONS \n    *******************************************************************************/\n\n    /**\n     * @notice Creates a new rewards submission on behalf of an AVS, to be split amongst the\n     * set of stakers delegated to operators who are registered to the `avs`\n     * @param rewardsSubmissions The rewards submissions being created\n     * @dev Expected to be called by the ServiceManager of the AVS on behalf of which the submission is being made\n     * @dev The duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`\n     * @dev The tokens are sent to the `RewardsCoordinator` contract\n     * @dev Strategies must be in ascending order of addresses to check for duplicates\n     * @dev This function will revert if the `rewardsSubmission` is malformed,\n     * e.g. if the `strategies` and `weights` arrays are of non-equal lengths\n     */\n    function createAVSRewardsSubmission(RewardsSubmission[] calldata rewardsSubmissions) external;\n\n    /**\n     * @notice similar to `createAVSRewardsSubmission` except the rewards are split amongst *all* stakers\n     * rather than just those delegated to operators who are registered to a single avs and is\n     * a permissioned call based on isRewardsForAllSubmitter mapping.\n     */\n    function createRewardsForAllSubmission(RewardsSubmission[] calldata rewardsSubmission) external;\n\n    /**\n     * @notice Claim rewards against a given root (read from distributionRoots[claim.rootIndex]).\n     * Earnings are cumulative so earners don't have to claim against all distribution roots they have earnings for,\n     * they can simply claim against the latest root and the contract will calculate the difference between\n     * their cumulativeEarnings and cumulativeClaimed. This difference is then transferred to recipient address.\n     * @param claim The RewardsMerkleClaim to be processed.\n     * Contains the root index, earner, token leaves, and required proofs\n     * @param recipient The address recipient that receives the ERC20 rewards\n     * @dev only callable by the valid claimer, that is\n     * if claimerFor[claim.earner] is address(0) then only the earner can claim, otherwise only\n     * claimerFor[claim.earner] can claim the rewards.\n     */\n    function processClaim(RewardsMerkleClaim calldata claim, address recipient) external;\n\n    /**\n     * @notice Creates a new distribution root. activatedAt is set to block.timestamp + activationDelay\n     * @param root The merkle root of the distribution\n     * @param rewardsCalculationEndTimestamp The timestamp (seconds) until which rewards have been calculated\n     * @dev Only callable by the rewardsUpdater\n     */\n    function submitRoot(bytes32 root, uint32 rewardsCalculationEndTimestamp) external;\n\n    /**\n     * @notice Sets the address of the entity that can call `processClaim` on behalf of the earner (msg.sender)\n     * @param claimer The address of the entity that can claim rewards on behalf of the earner\n     * @dev Only callable by the `earner`\n     */\n    function setClaimerFor(address claimer) external;\n\n    /**\n     * @notice Sets the delay in timestamp before a posted root can be claimed against\n     * @param _activationDelay Delay in timestamp (seconds) before a posted root can be claimed against\n     * @dev Only callable by the contract owner\n     */\n    function setActivationDelay(uint32 _activationDelay) external;\n\n    /**\n     * @notice Sets the global commission for all operators across all avss\n     * @param _globalCommissionBips The commission for all operators across all avss\n     * @dev Only callable by the contract owner\n     */\n    function setGlobalOperatorCommission(uint16 _globalCommissionBips) external;\n\n    /**\n     * @notice Sets the permissioned `rewardsUpdater` address which can post new roots\n     * @dev Only callable by the contract owner\n     */\n    function setRewardsUpdater(address _rewardsUpdater) external;\n\n    /**\n     * @notice Sets the permissioned `rewardsForAllSubmitter` address which can submit createRewardsForAllSubmission\n     * @dev Only callable by the contract owner\n     * @param _submitter The address of the rewardsForAllSubmitter\n     * @param _newValue The new value for isRewardsForAllSubmitter\n     */\n    function setRewardsForAllSubmitter(address _submitter, bool _newValue) external;\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/EIP1271SignatureUtils.sol\n\n/**\n * @title Library of utilities for making EIP1271-compliant signature checks.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n */\nlibrary EIP1271SignatureUtils {\n    // bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\n    bytes4 internal constant EIP1271_MAGICVALUE = 0x1626ba7e;\n\n    /**\n     * @notice Checks @param signature is a valid signature of @param digestHash from @param signer.\n     * If the `signer` contains no code -- i.e. it is not (yet, at least) a contract address, then checks using standard ECDSA logic\n     * Otherwise, passes on the signature to the signer to verify the signature and checks that it returns the `EIP1271_MAGICVALUE`.\n     */\n    function checkSignature_EIP1271(address signer, bytes32 digestHash, bytes memory signature) internal view {\n        /**\n         * check validity of signature:\n         * 1) if `signer` is an EOA, then `signature` must be a valid ECDSA signature from `signer`,\n         * indicating their intention for this action\n         * 2) if `signer` is a contract, then `signature` must will be checked according to EIP-1271\n         */\n        if (Address.isContract(signer)) {\n            require(\n                IERC1271(signer).isValidSignature(digestHash, signature) == EIP1271_MAGICVALUE,\n                \"EIP1271SignatureUtils.checkSignature_EIP1271: ERC1271 signature verification failed\"\n            );\n        } else {\n            require(\n                ECDSA.recover(digestHash, signature) == signer,\n                \"EIP1271SignatureUtils.checkSignature_EIP1271: signature not from signer\"\n            );\n        }\n    }\n}\n\n// lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/SignatureCheckerUpgradeable.sol\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureCheckerUpgradeable {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSAUpgradeable.RecoverError error) = ECDSAUpgradeable.tryRecover(hash, signature);\n        if (error == ECDSAUpgradeable.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271Upgradeable.isValidSignature.selector, hash, signature)\n        );\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271Upgradeable.isValidSignature.selector);\n    }\n}\n\n// src/templates/OperatorAllowlist.sol\n\n// SEE LICENSE IN https://files.altlayer.io/Alt-Research-License-1.md\n// Copyright Alt Research Ltd. 2023. All rights reserved.\n//\n// You acknowledge and agree that Alt Research Ltd. (\"Alt Research\") (or Alt\n// Research's licensors) own all legal rights, titles and interests in and to the\n// work, software, application, source code, documentation and any other documents\n//\n//        db         888             88\n//       d88b         88     88      88\n//      d8'`8b        88     88      88\n//     d8'  `8b       88   MM88MMM   88          ,adPPYYba,  8b       d8   ,adPPYba,  8b,dPPYb\n//    d8YaaaaY8b      88     88      88          \"\"     `Y8  `8b     d8'  a8P_____88  88P'\n//   d8\"\"\"\"\"\"\"\"8b     88     88      88          ,adPPPPP88   `8b   d8'   8PP\"\"\"\"\"\"\"  88\n//  d8'        `8b    88     88,     88          88,    ,88    `8b,d8'    \"8b,   ,aa  88\n// d8'          `8b  8888    \"Y888   88888888888 `\"8bbdP\"Y8      Y88'      `\"Ybbd8\"'  88\n//                                                               d8'\n//                                                              d8'\n\nabstract contract OperatorAllowlist is ContextUpgradeable, OwnableUpgradeable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    error NotAllowed();\n    error NotAllowlistManager();\n    error AlreadyEnabled();\n    error AlreadyDisabled();\n\n    event AllowlistUpdated(address[] operators, bool[] status);\n    event AllowlistEnabled();\n    event AllowlistDisabled();\n    event AllowlistManagerChanged(address indexed previousManager, address indexed newManager);\n\n    /// @notice Set of operators that are allowed to register\n    EnumerableSet.AddressSet private _allowlist;\n\n    /// @notice Whether or not the allowlist is enabled\n    bool public allowlistEnabled;\n\n    /// @notice Role for whitelisting operators\n    address public allowlistManager;\n\n    // storage gap for upgradeability\n    // slither-disable-next-line shadowing-state\n    uint256[47] private __GAP;\n\n    /**\n     * @dev Ensures that the function is only callable by the `allowlistManager`.\n     */\n    modifier onlyAllowlistManager() {\n        if (_msgSender() != allowlistManager) {\n            revert NotAllowlistManager();\n        }\n        _;\n    }\n\n    function __OperatorAllowlist_init(address _allowlistManager, bool _allowlistEnabled) internal onlyInitializing {\n        _setAllowlistManager(_allowlistManager);\n        allowlistEnabled = _allowlistEnabled;\n    }\n\n    function setAllowlist(address[] calldata operators, bool[] calldata status) external onlyAllowlistManager {\n        require(operators.length == status.length, \"Input arrays length mismatch\");\n\n        for (uint256 i = 0; i < operators.length; ++i) {\n            address operator = operators[i];\n\n            if (operator == address(0)) {\n                revert ZeroAddress();\n            }\n\n            if (status[i]) {\n                _allowlist.add(operator);\n            } else {\n                _allowlist.remove(operator);\n            }\n        }\n        emit AllowlistUpdated(operators, status);\n    }\n\n    function enableAllowlist() external onlyOwner {\n        _setAllowlistStatus(true);\n    }\n\n    function disableAllowlist() external onlyOwner {\n        _setAllowlistStatus(false);\n    }\n\n    function setAllowlistManager(address _allowlistManager) external onlyOwner {\n        _setAllowlistManager(_allowlistManager);\n    }\n\n    function isOperatorAllowed(address operator) public view returns (bool) {\n        return _allowlist.contains(operator);\n    }\n\n    function getAllowlistSize() public view returns (uint256) {\n        return _allowlist.length();\n    }\n\n    function getAllowlistAtIndex(uint256 index) public view returns (address) {\n        return _allowlist.at(index);\n    }\n\n    function queryOperators(uint256 start, uint256 count) external view returns (address[] memory operators) {\n        uint256 length = _allowlist.length();\n        require(start < length, \"Start index out of bounds\");\n\n        uint256 end = start + count;\n        if (end > length) {\n            end = length;\n        }\n\n        uint256 querySize = end - start;\n        operators = new address[](querySize);\n\n        for (uint256 i = 0; i < querySize; ++i) {\n            operators[i] = _allowlist.at(start + i);\n        }\n\n        return operators;\n    }\n\n    /**\n     *  @dev Sets the allowlist status\n     *  @param enable A boolean indicating whether to enable or disable the allowlist\n     */\n    function _setAllowlistStatus(bool enable) internal {\n        if (enable) {\n            if (allowlistEnabled) {\n                revert AlreadyEnabled();\n            } else {\n                allowlistEnabled = true;\n                emit AllowlistEnabled();\n            }\n        } else {\n            if (!allowlistEnabled) {\n                revert AlreadyDisabled();\n            } else {\n                allowlistEnabled = false;\n                emit AllowlistDisabled();\n            }\n        }\n    }\n\n    /**\n     *  @dev Changes the allowlistManager\n     */\n    function _setAllowlistManager(address allowlistManager_) internal {\n        emit AllowlistManagerChanged(allowlistManager, allowlistManager_);\n        allowlistManager = allowlistManager_;\n    }\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\n\n/**\n * @title DelegationManager\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice  This is the contract for delegation in EigenLayer. The main functionalities of this contract are\n * - enabling anyone to register as an operator in EigenLayer\n * - allowing operators to specify parameters related to stakers who delegate to them\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\n */\ninterface IDelegationManager is ISignatureUtils {\n    // @notice Struct used for storing information about a single operator who has registered with EigenLayer\n    struct OperatorDetails {\n        /// @notice DEPRECATED -- this field is no longer used, payments are handled in PaymentCoordinator.sol\n        address __deprecated_earningsReceiver;\n        /**\n         * @notice Address to verify signatures when a staker wishes to delegate to the operator, as well as controlling \"forced undelegations\".\n         * @dev Signature verification follows these rules:\n         * 1) If this address is left as address(0), then any staker will be free to delegate to the operator, i.e. no signature verification will be performed.\n         * 2) If this address is an EOA (i.e. it has no code), then we follow standard ECDSA signature verification for delegations to the operator.\n         * 3) If this address is a contract (i.e. it has code) then we forward a call to the contract and verify that it returns the correct EIP-1271 \"magic value\".\n         */\n        address delegationApprover;\n        /**\n         * @notice A minimum delay -- measured in blocks -- enforced between:\n         * 1) the operator signalling their intent to register for a service, via calling `Slasher.optIntoSlashing`\n         * and\n         * 2) the operator completing registration for the service, via the service ultimately calling `Slasher.recordFirstStakeUpdate`\n         * @dev note that for a specific operator, this value *cannot decrease*, i.e. if the operator wishes to modify their OperatorDetails,\n         * then they are only allowed to either increase this value or keep it the same.\n         */\n        uint32 stakerOptOutWindowBlocks;\n    }\n\n    /**\n     * @notice Abstract struct used in calculating an EIP712 signature for a staker to approve that they (the staker themselves) delegate to a specific operator.\n     * @dev Used in computing the `STAKER_DELEGATION_TYPEHASH` and as a reference in the computation of the stakerDigestHash in the `delegateToBySignature` function.\n     */\n    struct StakerDelegation {\n        // the staker who is delegating\n        address staker;\n        // the operator being delegated to\n        address operator;\n        // the staker's nonce\n        uint256 nonce;\n        // the expiration timestamp (UTC) of the signature\n        uint256 expiry;\n    }\n\n    /**\n     * @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\n     * @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function.\n     */\n    struct DelegationApproval {\n        // the staker who is delegating\n        address staker;\n        // the operator being delegated to\n        address operator;\n        // the operator's provided salt\n        bytes32 salt;\n        // the expiration timestamp (UTC) of the signature\n        uint256 expiry;\n    }\n\n    /**\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\n     * In functions that operate on existing queued withdrawals -- e.g. completeQueuedWithdrawal`, the data is resubmitted and the hash of the submitted\n     * data is computed by `calculateWithdrawalRoot` and checked against the stored hash in order to confirm the integrity of the submitted data.\n     */\n    struct Withdrawal {\n        // The address that originated the Withdrawal\n        address staker;\n        // The address that the staker was delegated to at the time that the Withdrawal was created\n        address delegatedTo;\n        // The address that can complete the Withdrawal + will receive funds when completing the withdrawal\n        address withdrawer;\n        // Nonce used to guarantee that otherwise identical withdrawals have unique hashes\n        uint256 nonce;\n        // Block number when the Withdrawal was created\n        uint32 startBlock;\n        // Array of strategies that the Withdrawal contains\n        IStrategy[] strategies;\n        // Array containing the amount of shares in each Strategy in the `strategies` array\n        uint256[] shares;\n    }\n\n    struct QueuedWithdrawalParams {\n        // Array of strategies that the QueuedWithdrawal contains\n        IStrategy[] strategies;\n        // Array containing the amount of shares in each Strategy in the `strategies` array\n        uint256[] shares;\n        // The address of the withdrawer\n        address withdrawer;\n    }\n\n    // @notice Emitted when a new operator registers in EigenLayer and provides their OperatorDetails.\n    event OperatorRegistered(address indexed operator, OperatorDetails operatorDetails);\n\n    /// @notice Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\n    event OperatorDetailsModified(address indexed operator, OperatorDetails newOperatorDetails);\n\n    /**\n     * @notice Emitted when @param operator indicates that they are updating their MetadataURI string\n     * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\n     */\n    event OperatorMetadataURIUpdated(address indexed operator, string metadataURI);\n\n    /// @notice Emitted whenever an operator's shares are increased for a given strategy. Note that shares is the delta in the operator's shares.\n    event OperatorSharesIncreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\n\n    /// @notice Emitted whenever an operator's shares are decreased for a given strategy. Note that shares is the delta in the operator's shares.\n    event OperatorSharesDecreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\n\n    /// @notice Emitted when @param staker delegates to @param operator.\n    event StakerDelegated(address indexed staker, address indexed operator);\n\n    /// @notice Emitted when @param staker undelegates from @param operator.\n    event StakerUndelegated(address indexed staker, address indexed operator);\n\n    /// @notice Emitted when @param staker is undelegated via a call not originating from the staker themself\n    event StakerForceUndelegated(address indexed staker, address indexed operator);\n\n    /**\n     * @notice Emitted when a new withdrawal is queued.\n     * @param withdrawalRoot Is the hash of the `withdrawal`.\n     * @param withdrawal Is the withdrawal itself.\n     */\n    event WithdrawalQueued(bytes32 withdrawalRoot, Withdrawal withdrawal);\n\n    /// @notice Emitted when a queued withdrawal is completed\n    event WithdrawalCompleted(bytes32 withdrawalRoot);\n    \n    /// @notice Emitted when the `minWithdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\n    event MinWithdrawalDelayBlocksSet(uint256 previousValue, uint256 newValue);\n\n    /// @notice Emitted when the `strategyWithdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\n    event StrategyWithdrawalDelayBlocksSet(IStrategy strategy, uint256 previousValue, uint256 newValue);\n\n    /**\n     * @notice Registers the caller as an operator in EigenLayer.\n     * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\n     * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\n     *\n     * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \"delegated to themself\".\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\n     */\n    function registerAsOperator(\n        OperatorDetails calldata registeringOperatorDetails,\n        string calldata metadataURI\n    ) external;\n\n    /**\n     * @notice Updates an operator's stored `OperatorDetails`.\n     * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\n     *\n     * @dev The caller must have previously registered as an operator in EigenLayer.\n     */\n    function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external;\n\n    /**\n     * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\n     * @param metadataURI The URI for metadata associated with an operator\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\n     */\n    function updateOperatorMetadataURI(string calldata metadataURI) external;\n\n    /**\n     * @notice Caller delegates their stake to an operator.\n     * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on EigenLayer.\n     * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\n     * @param approverSalt A unique single use value tied to an individual signature.\n     * @dev The approverSignatureAndExpiry is used in the event that:\n     *          1) the operator's `delegationApprover` address is set to a non-zero value.\n     *                  AND\n     *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\n     *             or their delegationApprover is the `msg.sender`, then approval is assumed.\n     * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n     * in this case to save on complexity + gas costs\n     */\n    function delegateTo(\n        address operator,\n        SignatureWithExpiry memory approverSignatureAndExpiry,\n        bytes32 approverSalt\n    ) external;\n\n    /**\n     * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\n     * @param staker The account delegating stake to an `operator` account\n     * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on EigenLayer.\n     * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\n     * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\n     * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\n     *\n     * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\n     * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\n     * @dev the operator's `delegationApprover` address is set to a non-zero value.\n     * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\n     * is the `msg.sender`, then approval is assumed.\n     * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\n     * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n     * in this case to save on complexity + gas costs\n     */\n    function delegateToBySignature(\n        address staker,\n        address operator,\n        SignatureWithExpiry memory stakerSignatureAndExpiry,\n        SignatureWithExpiry memory approverSignatureAndExpiry,\n        bytes32 approverSalt\n    ) external;\n\n    /**\n     * @notice Undelegates the staker from the operator who they are delegated to. Puts the staker into the \"undelegation limbo\" mode of the EigenPodManager\n     * and queues a withdrawal of all of the staker's shares in the StrategyManager (to the staker), if necessary.\n     * @param staker The account to be undelegated.\n     * @return withdrawalRoot The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\n     *\n     * @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\n     * @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \"delegationApprover\"\n     * @dev Reverts if the `staker` is already undelegated.\n     */\n    function undelegate(address staker) external returns (bytes32[] memory withdrawalRoot);\n\n    /**\n     * Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed\n     * from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from\n     * their operator.\n     *\n     * All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay.\n     */\n    function queueWithdrawals(\n        QueuedWithdrawalParams[] calldata queuedWithdrawalParams\n    ) external returns (bytes32[] memory);\n\n    /**\n     * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\n     * @param withdrawal The Withdrawal to complete.\n     * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\n     * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\n     * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\n     * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves\n     * and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\n     * will simply be transferred to the caller directly.\n     * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\n     * @dev beaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\n     * any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\n     * any other strategies, which will be transferred to the withdrawer.\n     */\n    function completeQueuedWithdrawal(\n        Withdrawal calldata withdrawal,\n        IERC20[] calldata tokens,\n        uint256 middlewareTimesIndex,\n        bool receiveAsTokens\n    ) external;\n\n    /**\n     * @notice Array-ified version of `completeQueuedWithdrawal`.\n     * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\n     * @param withdrawals The Withdrawals to complete.\n     * @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\n     * @param middlewareTimesIndexes One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\n     * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\n     * @dev See `completeQueuedWithdrawal` for relevant dev tags\n     */\n    function completeQueuedWithdrawals(\n        Withdrawal[] calldata withdrawals,\n        IERC20[][] calldata tokens,\n        uint256[] calldata middlewareTimesIndexes,\n        bool[] calldata receiveAsTokens\n    ) external;\n\n    /**\n     * @notice Increases a staker's delegated share balance in a strategy.\n     * @param staker The address to increase the delegated shares for their operator.\n     * @param strategy The strategy in which to increase the delegated shares.\n     * @param shares The number of shares to increase.\n     *\n     * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n     * @dev Callable only by the StrategyManager or EigenPodManager.\n     */\n    function increaseDelegatedShares(\n        address staker,\n        IStrategy strategy,\n        uint256 shares\n    ) external;\n\n    /**\n     * @notice Decreases a staker's delegated share balance in a strategy.\n     * @param staker The address to increase the delegated shares for their operator.\n     * @param strategy The strategy in which to decrease the delegated shares.\n     * @param shares The number of shares to decrease.\n     *\n     * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n     * @dev Callable only by the StrategyManager or EigenPodManager.\n     */\n    function decreaseDelegatedShares(\n        address staker,\n        IStrategy strategy,\n        uint256 shares\n    ) external;\n\n    /**\n     * @notice returns the address of the operator that `staker` is delegated to.\n     * @notice Mapping: staker => operator whom the staker is currently delegated to.\n     * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\n     */\n    function delegatedTo(address staker) external view returns (address);\n\n    /**\n     * @notice Returns the OperatorDetails struct associated with an `operator`.\n     */\n    function operatorDetails(address operator) external view returns (OperatorDetails memory);\n\n    /**\n     * @notice Returns the delegationApprover account for an operator\n     */\n    function delegationApprover(address operator) external view returns (address);\n\n    /**\n     * @notice Returns the stakerOptOutWindowBlocks for an operator\n     */\n    function stakerOptOutWindowBlocks(address operator) external view returns (uint256);\n\n    /**\n     * @notice Given array of strategies, returns array of shares for the operator\n     */\n    function getOperatorShares(\n        address operator,\n        IStrategy[] memory strategies\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @notice Given a list of strategies, return the minimum number of blocks that must pass to withdraw\n     * from all the inputted strategies. Return value is >= minWithdrawalDelayBlocks as this is the global min withdrawal delay.\n     * @param strategies The strategies to check withdrawal delays for\n     */\n    function getWithdrawalDelay(IStrategy[] calldata strategies) external view returns (uint256);\n\n    /**\n     * @notice returns the total number of shares in `strategy` that are delegated to `operator`.\n     * @notice Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\n     * @dev By design, the following invariant should hold for each Strategy:\n     * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\n     * = sum (delegateable shares of all stakers delegated to the operator)\n     */\n    function operatorShares(address operator, IStrategy strategy) external view returns (uint256);\n\n    /**\n     * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\n     */\n    function isDelegated(address staker) external view returns (bool);\n\n    /**\n     * @notice Returns true is an operator has previously registered for delegation.\n     */\n    function isOperator(address operator) external view returns (bool);\n\n    /// @notice Mapping: staker => number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked\n    function stakerNonce(address staker) external view returns (uint256);\n\n    /**\n     * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\n     * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\n     * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\n     */\n    function delegationApproverSaltIsSpent(address _delegationApprover, bytes32 salt) external view returns (bool);\n\n    /**\n     * @notice Minimum delay enforced by this contract for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner,\n     * up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\n     * Note that strategies each have a separate withdrawal delay, which can be greater than this value. So the minimum number of blocks that must pass\n     * to withdraw a strategy is MAX(minWithdrawalDelayBlocks, strategyWithdrawalDelayBlocks[strategy])\n     */\n    function minWithdrawalDelayBlocks() external view returns (uint256);\n\n    /**\n     * @notice Minimum delay enforced by this contract per Strategy for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner,\n     * up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\n     */\n    function strategyWithdrawalDelayBlocks(IStrategy strategy) external view returns (uint256);\n\n    /// @notice return address of the beaconChainETHStrategy\n    function beaconChainETHStrategy() external view returns (IStrategy);\n\n    /**\n     * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\n     * @param staker The signing staker\n     * @param operator The operator who is being delegated to\n     * @param expiry The desired expiry time of the staker's signature\n     */\n    function calculateCurrentStakerDelegationDigestHash(\n        address staker,\n        address operator,\n        uint256 expiry\n    ) external view returns (bytes32);\n\n    /**\n     * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\n     * @param staker The signing staker\n     * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\n     * @param operator The operator who is being delegated to\n     * @param expiry The desired expiry time of the staker's signature\n     */\n    function calculateStakerDelegationDigestHash(\n        address staker,\n        uint256 _stakerNonce,\n        address operator,\n        uint256 expiry\n    ) external view returns (bytes32);\n\n    /**\n     * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\n     * @param staker The account delegating their stake\n     * @param operator The account receiving delegated stake\n     * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\n     * @param approverSalt A unique and single use value associated with the approver signature.\n     * @param expiry Time after which the approver's signature becomes invalid\n     */\n    function calculateDelegationApprovalDigestHash(\n        address staker,\n        address operator,\n        address _delegationApprover,\n        bytes32 approverSalt,\n        uint256 expiry\n    ) external view returns (bytes32);\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\n\n    /// @notice The EIP-712 typehash for the StakerDelegation struct used by the contract\n    function STAKER_DELEGATION_TYPEHASH() external view returns (bytes32);\n\n    /// @notice The EIP-712 typehash for the DelegationApproval struct used by the contract\n    function DELEGATION_APPROVAL_TYPEHASH() external view returns (bytes32);\n\n    /**\n     * @notice Getter function for the current EIP-712 domain separator for this contract.\n     *\n     * @dev The domain separator will change in the event of a fork that changes the ChainID.\n     * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\n     * for more detailed information please read EIP-712.\n     */\n    function domainSeparator() external view returns (bytes32);\n    \n    /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\n    /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\n    function cumulativeWithdrawalsQueued(address staker) external view returns (uint256);\n\n    /// @notice Returns the keccak256 hash of `withdrawal`.\n    function calculateWithdrawalRoot(Withdrawal memory withdrawal) external pure returns (bytes32);\n\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPod.sol\n\n/**\n * @title The implementation contract used for restaking beacon chain ETH on EigenLayer\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice The main functionalities are:\n * - creating new ETH validators with their withdrawal credentials pointed to this contract\n * - proving from beacon chain state roots that withdrawal credentials are pointed to this contract\n * - proving from beacon chain state roots the balances of ETH validators with their withdrawal credentials\n *   pointed to this contract\n * - updating aggregate balances in the EigenPodManager\n * - withdrawing eth when withdrawals are initiated\n * @dev Note that all beacon chain balances are stored as gwei within the beacon chain datastructures. We choose\n *   to account balances in terms of gwei in the EigenPod contract and convert to wei when making calls to other contracts\n */\ninterface IEigenPod {\n    enum VALIDATOR_STATUS {\n        INACTIVE, // doesnt exist\n        ACTIVE, // staked on ethpos and withdrawal credentials are pointed to the EigenPod\n        WITHDRAWN // withdrawn from the Beacon Chain\n    }\n\n    struct ValidatorInfo {\n        // index of the validator in the beacon chain\n        uint64 validatorIndex;\n        // amount of beacon chain ETH restaked on EigenLayer in gwei\n        uint64 restakedBalanceGwei;\n        //timestamp of the validator's most recent balance update\n        uint64 mostRecentBalanceUpdateTimestamp;\n        // status of the validator\n        VALIDATOR_STATUS status;\n    }\n\n    /**\n     * @notice struct used to store amounts related to proven withdrawals in memory. Used to help\n     * manage stack depth and optimize the number of external calls, when batching withdrawal operations.\n     */\n    struct VerifiedWithdrawal {\n        // amount to send to a podOwner from a proven withdrawal\n        uint256 amountToSendGwei;\n        // difference in shares to be recorded in the eigenPodManager, as a result of the withdrawal\n        int256 sharesDeltaGwei;\n    }\n\n    enum PARTIAL_WITHDRAWAL_CLAIM_STATUS {\n        REDEEMED,\n        PENDING,\n        FAILED\n    }\n\n    /// @notice Emitted when an ETH validator stakes via this eigenPod\n    event EigenPodStaked(bytes pubkey);\n\n    /// @notice Emitted when an ETH validator's withdrawal credentials are successfully verified to be pointed to this eigenPod\n    event ValidatorRestaked(uint40 validatorIndex);\n\n    /// @notice Emitted when an ETH validator's  balance is proven to be updated.  Here newValidatorBalanceGwei\n    //  is the validator's balance that is credited on EigenLayer.\n    event ValidatorBalanceUpdated(uint40 validatorIndex, uint64 balanceTimestamp, uint64 newValidatorBalanceGwei);\n\n    /// @notice Emitted when an ETH validator is prove to have withdrawn from the beacon chain\n    event FullWithdrawalRedeemed(\n        uint40 validatorIndex,\n        uint64 withdrawalTimestamp,\n        address indexed recipient,\n        uint64 withdrawalAmountGwei\n    );\n\n    /// @notice Emitted when a partial withdrawal claim is successfully redeemed\n    event PartialWithdrawalRedeemed(\n        uint40 validatorIndex,\n        uint64 withdrawalTimestamp,\n        address indexed recipient,\n        uint64 partialWithdrawalAmountGwei\n    );\n\n    /// @notice Emitted when restaked beacon chain ETH is withdrawn from the eigenPod.\n    event RestakedBeaconChainETHWithdrawn(address indexed recipient, uint256 amount);\n\n    /// @notice Emitted when podOwner enables restaking\n    event RestakingActivated(address indexed podOwner);\n\n    /// @notice Emitted when ETH is received via the `receive` fallback\n    event NonBeaconChainETHReceived(uint256 amountReceived);\n\n    /// @notice Emitted when ETH that was previously received via the `receive` fallback is withdrawn\n    event NonBeaconChainETHWithdrawn(address indexed recipient, uint256 amountWithdrawn);\n\n    /// @notice The max amount of eth, in gwei, that can be restaked per validator\n    function MAX_RESTAKED_BALANCE_GWEI_PER_VALIDATOR() external view returns (uint64);\n\n    /// @notice the amount of execution layer ETH in this contract that is staked in EigenLayer (i.e. withdrawn from beaconchain but not EigenLayer),\n    function withdrawableRestakedExecutionLayerGwei() external view returns (uint64);\n\n    /// @notice any ETH deposited into the EigenPod contract via the `receive` fallback function\n    function nonBeaconChainETHBalanceWei() external view returns (uint256);\n\n    /// @notice Used to initialize the pointers to contracts crucial to the pod's functionality, in beacon proxy construction from EigenPodManager\n    function initialize(address owner) external;\n\n    /// @notice Called by EigenPodManager when the owner wants to create another ETH validator.\n    function stake(bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable;\n\n    /**\n     * @notice Transfers `amountWei` in ether from this contract to the specified `recipient` address\n     * @notice Called by EigenPodManager to withdrawBeaconChainETH that has been added to the EigenPod's balance due to a withdrawal from the beacon chain.\n     * @dev The podOwner must have already proved sufficient withdrawals, so that this pod's `withdrawableRestakedExecutionLayerGwei` exceeds the\n     * `amountWei` input (when converted to GWEI).\n     * @dev Reverts if `amountWei` is not a whole Gwei amount\n     */\n    function withdrawRestakedBeaconChainETH(address recipient, uint256 amount) external;\n\n    /// @notice The single EigenPodManager for EigenLayer\n    function eigenPodManager() external view returns (IEigenPodManager);\n\n    /// @notice The owner of this EigenPod\n    function podOwner() external view returns (address);\n\n    /// @notice an indicator of whether or not the podOwner has ever \"fully restaked\" by successfully calling `verifyCorrectWithdrawalCredentials`.\n    function hasRestaked() external view returns (bool);\n\n    /**\n     * @notice The latest timestamp at which the pod owner withdrew the balance of the pod, via calling `withdrawBeforeRestaking`.\n     * @dev This variable is only updated when the `withdrawBeforeRestaking` function is called, which can only occur before `hasRestaked` is set to true for this pod.\n     * Proofs for this pod are only valid against Beacon Chain state roots corresponding to timestamps after the stored `mostRecentWithdrawalTimestamp`.\n     */\n    function mostRecentWithdrawalTimestamp() external view returns (uint64);\n\n    /// @notice Returns the validatorInfo struct for the provided pubkeyHash\n    function validatorPubkeyHashToInfo(bytes32 validatorPubkeyHash) external view returns (ValidatorInfo memory);\n\n    /// @notice Returns the validatorInfo struct for the provided pubkey\n    function validatorPubkeyToInfo(bytes calldata validatorPubkey) external view returns (ValidatorInfo memory);\n\n    ///@notice mapping that tracks proven withdrawals\n    function provenWithdrawal(bytes32 validatorPubkeyHash, uint64 slot) external view returns (bool);\n\n    /// @notice This returns the status of a given validator\n    function validatorStatus(bytes32 pubkeyHash) external view returns (VALIDATOR_STATUS);\n\n    /// @notice This returns the status of a given validator pubkey\n    function validatorStatus(bytes calldata validatorPubkey) external view returns (VALIDATOR_STATUS);\n\n    /**\n     * @notice This function verifies that the withdrawal credentials of validator(s) owned by the podOwner are pointed to\n     * this contract. It also verifies the effective balance  of the validator.  It verifies the provided proof of the ETH validator against the beacon chain state\n     * root, marks the validator as 'active' in EigenLayer, and credits the restaked ETH in Eigenlayer.\n     * @param oracleTimestamp is the Beacon Chain timestamp whose state root the `proof` will be proven against.\n     * @param validatorIndices is the list of indices of the validators being proven, refer to consensus specs\n     * @param withdrawalCredentialProofs is an array of proofs, where each proof proves each ETH validator's balance and withdrawal credentials\n     * against a beacon chain state root\n     * @param validatorFields are the fields of the \"Validator Container\", refer to consensus specs\n     * for details: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\n     */\n    function verifyWithdrawalCredentials(\n        uint64 oracleTimestamp,\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\n        uint40[] calldata validatorIndices,\n        bytes[] calldata withdrawalCredentialProofs,\n        bytes32[][] calldata validatorFields\n    )\n        external;\n\n    /**\n     * @notice This function records an update (either increase or decrease) in the pod's balance in the StrategyManager.  \n               It also verifies a merkle proof of the validator's current beacon chain balance.  \n     * @param oracleTimestamp The oracleTimestamp whose state root the `proof` will be proven against.\n     *        Must be within `VERIFY_BALANCE_UPDATE_WINDOW_SECONDS` of the current block.\n     * @param validatorIndices is the list of indices of the validators being proven, refer to consensus specs \n     * @param validatorFieldsProofs proofs against the `beaconStateRoot` for each validator in `validatorFields`\n     * @param validatorFields are the fields of the \"Validator Container\", refer to consensus specs\n     * @dev For more details on the Beacon Chain spec, see: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\n     */\n    function verifyBalanceUpdates(\n        uint64 oracleTimestamp,\n        uint40[] calldata validatorIndices,\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\n        bytes[] calldata validatorFieldsProofs,\n        bytes32[][] calldata validatorFields\n    ) external;\n\n    /**\n     * @notice This function records full and partial withdrawals on behalf of one of the Ethereum validators for this EigenPod\n     * @param oracleTimestamp is the timestamp of the oracle slot that the withdrawal is being proven against\n     * @param withdrawalProofs is the information needed to check the veracity of the block numbers and withdrawals being proven\n     * @param validatorFieldsProofs is the proof of the validator's fields' in the validator tree\n     * @param withdrawalFields are the fields of the withdrawals being proven\n     * @param validatorFields are the fields of the validators being proven\n     */\n    function verifyAndProcessWithdrawals(\n        uint64 oracleTimestamp,\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\n        BeaconChainProofs.WithdrawalProof[] calldata withdrawalProofs,\n        bytes[] calldata validatorFieldsProofs,\n        bytes32[][] calldata validatorFields,\n        bytes32[][] calldata withdrawalFields\n    ) external;\n\n    /**\n     * @notice Called by the pod owner to activate restaking by withdrawing\n     * all existing ETH from the pod and preventing further withdrawals via\n     * \"withdrawBeforeRestaking()\"\n     */\n    function activateRestaking() external;\n\n    /// @notice Called by the pod owner to withdraw the balance of the pod when `hasRestaked` is set to false\n    function withdrawBeforeRestaking() external;\n\n    /// @notice Called by the pod owner to withdraw the nonBeaconChainETHBalanceWei\n    function withdrawNonBeaconChainETHBalanceWei(address recipient, uint256 amountToWithdraw) external;\n\n    /// @notice called by owner of a pod to remove any ERC20s deposited in the pod\n    function recoverTokens(IERC20[] memory tokenList, uint256[] memory amountsToWithdraw, address recipient) external;\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPodManager.sol\n\n/**\n * @title Interface for factory that creates and manages solo staking pods that have their withdrawal credentials pointed to EigenLayer.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n */\n\ninterface IEigenPodManager is IPausable {\n    /// @notice Emitted to notify the update of the beaconChainOracle address\n    event BeaconOracleUpdated(address indexed newOracleAddress);\n\n    /// @notice Emitted to notify the deployment of an EigenPod\n    event PodDeployed(address indexed eigenPod, address indexed podOwner);\n\n    /// @notice Emitted to notify a deposit of beacon chain ETH recorded in the strategy manager\n    event BeaconChainETHDeposited(address indexed podOwner, uint256 amount);\n\n    /// @notice Emitted when the balance of an EigenPod is updated\n    event PodSharesUpdated(address indexed podOwner, int256 sharesDelta);\n\n    /// @notice Emitted when a withdrawal of beacon chain ETH is completed\n    event BeaconChainETHWithdrawalCompleted(\n        address indexed podOwner,\n        uint256 shares,\n        uint96 nonce,\n        address delegatedAddress,\n        address withdrawer,\n        bytes32 withdrawalRoot\n    );\n\n    event DenebForkTimestampUpdated(uint64 newValue);\n\n    /**\n     * @notice Creates an EigenPod for the sender.\n     * @dev Function will revert if the `msg.sender` already has an EigenPod.\n     * @dev Returns EigenPod address \n     */\n    function createPod() external returns (address);\n\n    /**\n     * @notice Stakes for a new beacon chain validator on the sender's EigenPod.\n     * Also creates an EigenPod for the sender if they don't have one already.\n     * @param pubkey The 48 bytes public key of the beacon chain validator.\n     * @param signature The validator's signature of the deposit data.\n     * @param depositDataRoot The root/hash of the deposit data for the validator's deposit.\n     */\n    function stake(bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable;\n\n    /**\n     * @notice Changes the `podOwner`'s shares by `sharesDelta` and performs a call to the DelegationManager\n     * to ensure that delegated shares are also tracked correctly\n     * @param podOwner is the pod owner whose balance is being updated.\n     * @param sharesDelta is the change in podOwner's beaconChainETHStrategy shares\n     * @dev Callable only by the podOwner's EigenPod contract.\n     * @dev Reverts if `sharesDelta` is not a whole Gwei amount\n     */\n    function recordBeaconChainETHBalanceUpdate(address podOwner, int256 sharesDelta) external;\n\n    /**\n     * @notice Updates the oracle contract that provides the beacon chain state root\n     * @param newBeaconChainOracle is the new oracle contract being pointed to\n     * @dev Callable only by the owner of this contract (i.e. governance)\n     */\n    function updateBeaconChainOracle(IBeaconChainOracle newBeaconChainOracle) external;\n\n    /// @notice Returns the address of the `podOwner`'s EigenPod if it has been deployed.\n    function ownerToPod(address podOwner) external view returns (IEigenPod);\n\n    /// @notice Returns the address of the `podOwner`'s EigenPod (whether it is deployed yet or not).\n    function getPod(address podOwner) external view returns (IEigenPod);\n\n    /// @notice The ETH2 Deposit Contract\n    function ethPOS() external view returns (IETHPOSDeposit);\n\n    /// @notice Beacon proxy to which the EigenPods point\n    function eigenPodBeacon() external view returns (IBeacon);\n\n    /// @notice Oracle contract that provides updates to the beacon chain's state\n    function beaconChainOracle() external view returns (IBeaconChainOracle);\n\n    /// @notice Returns the beacon block root at `timestamp`. Reverts if the Beacon block root at `timestamp` has not yet been finalized.\n    function getBlockRootAtTimestamp(uint64 timestamp) external view returns (bytes32);\n\n    /// @notice EigenLayer's StrategyManager contract\n    function strategyManager() external view returns (IStrategyManager);\n\n    /// @notice EigenLayer's Slasher contract\n    function slasher() external view returns (ISlasher);\n\n    /// @notice Returns 'true' if the `podOwner` has created an EigenPod, and 'false' otherwise.\n    function hasPod(address podOwner) external view returns (bool);\n\n    /// @notice Returns the number of EigenPods that have been created\n    function numPods() external view returns (uint256);\n\n    /**\n     * @notice Mapping from Pod owner owner to the number of shares they have in the virtual beacon chain ETH strategy.\n     * @dev The share amount can become negative. This is necessary to accommodate the fact that a pod owner's virtual beacon chain ETH shares can\n     * decrease between the pod owner queuing and completing a withdrawal.\n     * When the pod owner's shares would otherwise increase, this \"deficit\" is decreased first _instead_.\n     * Likewise, when a withdrawal is completed, this \"deficit\" is decreased and the withdrawal amount is decreased; We can think of this\n     * as the withdrawal \"paying off the deficit\".\n     */\n    function podOwnerShares(address podOwner) external view returns (int256);\n\n    /// @notice returns canonical, virtual beaconChainETH strategy\n    function beaconChainETHStrategy() external view returns (IStrategy);\n\n    /**\n     * @notice Used by the DelegationManager to remove a pod owner's shares while they're in the withdrawal queue.\n     * Simply decreases the `podOwner`'s shares by `shares`, down to a minimum of zero.\n     * @dev This function reverts if it would result in `podOwnerShares[podOwner]` being less than zero, i.e. it is forbidden for this function to\n     * result in the `podOwner` incurring a \"share deficit\". This behavior prevents a Staker from queuing a withdrawal which improperly removes excessive\n     * shares from the operator to whom the staker is delegated.\n     * @dev Reverts if `shares` is not a whole Gwei amount\n     */\n    function removeShares(address podOwner, uint256 shares) external;\n\n    /**\n     * @notice Increases the `podOwner`'s shares by `shares`, paying off deficit if possible.\n     * Used by the DelegationManager to award a pod owner shares on exiting the withdrawal queue\n     * @dev Returns the number of shares added to `podOwnerShares[podOwner]` above zero, which will be less than the `shares` input\n     * in the event that the podOwner has an existing shares deficit (i.e. `podOwnerShares[podOwner]` starts below zero)\n     * @dev Reverts if `shares` is not a whole Gwei amount\n     */\n    function addShares(address podOwner, uint256 shares) external returns (uint256);\n\n    /**\n     * @notice Used by the DelegationManager to complete a withdrawal, sending tokens to some destination address\n     * @dev Prioritizes decreasing the podOwner's share deficit, if they have one\n     * @dev Reverts if `shares` is not a whole Gwei amount\n     */\n    function withdrawSharesAsTokens(address podOwner, address destination, uint256 shares) external;\n\n    /**\n     * @notice the deneb hard fork timestamp used to determine which proof path to use for proving a withdrawal\n     */\n    function denebForkTimestamp() external view returns (uint64);\n\n     /**\n     * setting the deneb hard fork timestamp by the eigenPodManager owner\n     * @dev this function is designed to be called twice.  Once, it is set to type(uint64).max \n     * prior to the actual deneb fork timestamp being set, and then the second time it is set \n     * to the actual deneb fork timestamp.\n     */\n    function setDenebForkTimestamp(uint64 newDenebForkTimestamp) external;\n\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISlasher.sol\n\n/**\n * @title Interface for the primary 'slashing' contract for EigenLayer.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice See the `Slasher` contract itself for implementation details.\n */\ninterface ISlasher {\n    // struct used to store information about the current state of an operator's obligations to middlewares they are serving\n    struct MiddlewareTimes {\n        // The update block for the middleware whose most recent update was earliest, i.e. the 'stalest' update out of all middlewares the operator is serving\n        uint32 stalestUpdateBlock;\n        // The latest 'serveUntilBlock' from all of the middleware that the operator is serving\n        uint32 latestServeUntilBlock;\n    }\n\n    // struct used to store details relevant to a single middleware that an operator has opted-in to serving\n    struct MiddlewareDetails {\n        // the block at which the contract begins being able to finalize the operator's registration with the service via calling `recordFirstStakeUpdate`\n        uint32 registrationMayBeginAtBlock;\n        // the block before which the contract is allowed to slash the user\n        uint32 contractCanSlashOperatorUntilBlock;\n        // the block at which the middleware's view of the operator's stake was most recently updated\n        uint32 latestUpdateBlock;\n    }\n\n    /// @notice Emitted when a middleware times is added to `operator`'s array.\n    event MiddlewareTimesAdded(\n        address operator,\n        uint256 index,\n        uint32 stalestUpdateBlock,\n        uint32 latestServeUntilBlock\n    );\n\n    /// @notice Emitted when `operator` begins to allow `contractAddress` to slash them.\n    event OptedIntoSlashing(address indexed operator, address indexed contractAddress);\n\n    /// @notice Emitted when `contractAddress` signals that it will no longer be able to slash `operator` after the `contractCanSlashOperatorUntilBlock`.\n    event SlashingAbilityRevoked(\n        address indexed operator,\n        address indexed contractAddress,\n        uint32 contractCanSlashOperatorUntilBlock\n    );\n\n    /**\n     * @notice Emitted when `slashingContract` 'freezes' the `slashedOperator`.\n     * @dev The `slashingContract` must have permission to slash the `slashedOperator`, i.e. `canSlash(slasherOperator, slashingContract)` must return 'true'.\n     */\n    event OperatorFrozen(address indexed slashedOperator, address indexed slashingContract);\n\n    /// @notice Emitted when `previouslySlashedAddress` is 'unfrozen', allowing them to again move deposited funds within EigenLayer.\n    event FrozenStatusReset(address indexed previouslySlashedAddress);\n\n    /**\n     * @notice Gives the `contractAddress` permission to slash the funds of the caller.\n     * @dev Typically, this function must be called prior to registering for a middleware.\n     */\n    function optIntoSlashing(address contractAddress) external;\n\n    /**\n     * @notice Used for 'slashing' a certain operator.\n     * @param toBeFrozen The operator to be frozen.\n     * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\n     * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `optIntoSlashing`.\n     */\n    function freezeOperator(address toBeFrozen) external;\n\n    /**\n     * @notice Removes the 'frozen' status from each of the `frozenAddresses`\n     * @dev Callable only by the contract owner (i.e. governance).\n     */\n    function resetFrozenStatus(address[] calldata frozenAddresses) external;\n\n    /**\n     * @notice this function is a called by middlewares during an operator's registration to make sure the operator's stake at registration\n     *         is slashable until serveUntil\n     * @param operator the operator whose stake update is being recorded\n     * @param serveUntilBlock the block until which the operator's stake at the current block is slashable\n     * @dev adds the middleware's slashing contract to the operator's linked list\n     */\n    function recordFirstStakeUpdate(address operator, uint32 serveUntilBlock) external;\n\n    /**\n     * @notice this function is a called by middlewares during a stake update for an operator (perhaps to free pending withdrawals)\n     *         to make sure the operator's stake at updateBlock is slashable until serveUntil\n     * @param operator the operator whose stake update is being recorded\n     * @param updateBlock the block for which the stake update is being recorded\n     * @param serveUntilBlock the block until which the operator's stake at updateBlock is slashable\n     * @param insertAfter the element of the operators linked list that the currently updating middleware should be inserted after\n     * @dev insertAfter should be calculated offchain before making the transaction that calls this. this is subject to race conditions,\n     *      but it is anticipated to be rare and not detrimental.\n     */\n    function recordStakeUpdate(\n        address operator,\n        uint32 updateBlock,\n        uint32 serveUntilBlock,\n        uint256 insertAfter\n    ) external;\n\n    /**\n     * @notice this function is a called by middlewares during an operator's deregistration to make sure the operator's stake at deregistration\n     *         is slashable until serveUntil\n     * @param operator the operator whose stake update is being recorded\n     * @param serveUntilBlock the block until which the operator's stake at the current block is slashable\n     * @dev removes the middleware's slashing contract to the operator's linked list and revokes the middleware's (i.e. caller's) ability to\n     * slash `operator` once `serveUntil` is reached\n     */\n    function recordLastStakeUpdateAndRevokeSlashingAbility(address operator, uint32 serveUntilBlock) external;\n\n    /// @notice The StrategyManager contract of EigenLayer\n    function strategyManager() external view returns (IStrategyManager);\n\n    /// @notice The DelegationManager contract of EigenLayer\n    function delegation() external view returns (IDelegationManager);\n\n    /**\n     * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\n     * slashing of their funds, and cannot cannot deposit or withdraw from the strategyManager until the slashing process is completed\n     * and the staker's status is reset (to 'unfrozen').\n     * @param staker The staker of interest.\n     * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\n     * to an operator who has their status set to frozen. Otherwise returns 'false'.\n     */\n    function isFrozen(address staker) external view returns (bool);\n\n    /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\n    function canSlash(address toBeSlashed, address slashingContract) external view returns (bool);\n\n    /// @notice Returns the block until which `serviceContract` is allowed to slash the `operator`.\n    function contractCanSlashOperatorUntilBlock(\n        address operator,\n        address serviceContract\n    ) external view returns (uint32);\n\n    /// @notice Returns the block at which the `serviceContract` last updated its view of the `operator`'s stake\n    function latestUpdateBlock(address operator, address serviceContract) external view returns (uint32);\n\n    /// @notice A search routine for finding the correct input value of `insertAfter` to `recordStakeUpdate` / `_updateMiddlewareList`.\n    function getCorrectValueForInsertAfter(address operator, uint32 updateBlock) external view returns (uint256);\n\n    /**\n     * @notice Returns 'true' if `operator` can currently complete a withdrawal started at the `withdrawalStartBlock`, with `middlewareTimesIndex` used\n     * to specify the index of a `MiddlewareTimes` struct in the operator's list (i.e. an index in `operatorToMiddlewareTimes[operator]`). The specified\n     * struct is consulted as proof of the `operator`'s ability (or lack thereof) to complete the withdrawal.\n     * This function will return 'false' if the operator cannot currently complete a withdrawal started at the `withdrawalStartBlock`, *or* in the event\n     * that an incorrect `middlewareTimesIndex` is supplied, even if one or more correct inputs exist.\n     * @param operator Either the operator who queued the withdrawal themselves, or if the withdrawing party is a staker who delegated to an operator,\n     * this address is the operator *who the staker was delegated to* at the time of the `withdrawalStartBlock`.\n     * @param withdrawalStartBlock The block number at which the withdrawal was initiated.\n     * @param middlewareTimesIndex Indicates an index in `operatorToMiddlewareTimes[operator]` to consult as proof of the `operator`'s ability to withdraw\n     * @dev The correct `middlewareTimesIndex` input should be computable off-chain.\n     */\n    function canWithdraw(\n        address operator,\n        uint32 withdrawalStartBlock,\n        uint256 middlewareTimesIndex\n    ) external returns (bool);\n\n    /**\n     * operator =>\n     *  [\n     *      (\n     *          the least recent update block of all of the middlewares it's serving/served,\n     *          latest time that the stake bonded at that update needed to serve until\n     *      )\n     *  ]\n     */\n    function operatorToMiddlewareTimes(\n        address operator,\n        uint256 arrayIndex\n    ) external view returns (MiddlewareTimes memory);\n\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator].length`\n    function middlewareTimesLength(address operator) external view returns (uint256);\n\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].stalestUpdateBlock`.\n    function getMiddlewareTimesIndexStalestUpdateBlock(address operator, uint32 index) external view returns (uint32);\n\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].latestServeUntil`.\n    function getMiddlewareTimesIndexServeUntilBlock(address operator, uint32 index) external view returns (uint32);\n\n    /// @notice Getter function for fetching `_operatorToWhitelistedContractsByUpdate[operator].size`.\n    function operatorWhitelistedContractsLinkedListSize(address operator) external view returns (uint256);\n\n    /// @notice Getter function for fetching a single node in the operator's linked list (`_operatorToWhitelistedContractsByUpdate[operator]`).\n    function operatorWhitelistedContractsLinkedListEntry(\n        address operator,\n        address node\n    ) external view returns (bool, uint256, uint256);\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategyManager.sol\n\n/**\n * @title Interface for the primary entrypoint for funds into EigenLayer.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice See the `StrategyManager` contract itself for implementation details.\n */\ninterface IStrategyManager {\n    /**\n     * @notice Emitted when a new deposit occurs on behalf of `staker`.\n     * @param staker Is the staker who is depositing funds into EigenLayer.\n     * @param strategy Is the strategy that `staker` has deposited into.\n     * @param token Is the token that `staker` deposited.\n     * @param shares Is the number of new shares `staker` has been granted in `strategy`.\n     */\n    event Deposit(address staker, IERC20 token, IStrategy strategy, uint256 shares);\n\n    /// @notice Emitted when `thirdPartyTransfersForbidden` is updated for a strategy and value by the owner\n    event UpdatedThirdPartyTransfersForbidden(IStrategy strategy, bool value);\n\n    /// @notice Emitted when the `strategyWhitelister` is changed\n    event StrategyWhitelisterChanged(address previousAddress, address newAddress);\n\n    /// @notice Emitted when a strategy is added to the approved list of strategies for deposit\n    event StrategyAddedToDepositWhitelist(IStrategy strategy);\n\n    /// @notice Emitted when a strategy is removed from the approved list of strategies for deposit\n    event StrategyRemovedFromDepositWhitelist(IStrategy strategy);\n\n    /**\n     * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `msg.sender`\n     * @param strategy is the specified strategy where deposit is to be made,\n     * @param token is the denomination in which the deposit is to be made,\n     * @param amount is the amount of token to be deposited in the strategy by the staker\n     * @return shares The amount of new shares in the `strategy` created as part of the action.\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n     * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\n     *\n     * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\n     *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\n     */\n    function depositIntoStrategy(IStrategy strategy, IERC20 token, uint256 amount) external returns (uint256 shares);\n\n    /**\n     * @notice Used for depositing an asset into the specified strategy with the resultant shares credited to `staker`,\n     * who must sign off on the action.\n     * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed\n     * purely to help one address deposit 'for' another.\n     * @param strategy is the specified strategy where deposit is to be made,\n     * @param token is the denomination in which the deposit is to be made,\n     * @param amount is the amount of token to be deposited in the strategy by the staker\n     * @param staker the staker that the deposited assets will be credited to\n     * @param expiry the timestamp at which the signature expires\n     * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\n     * following EIP-1271 if the `staker` is a contract\n     * @return shares The amount of new shares in the `strategy` created as part of the action.\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\n     * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\n     * targeting stakers who may be attempting to undelegate.\n     * @dev Cannot be called if thirdPartyTransfersForbidden is set to true for this strategy\n     *\n     *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\n     *          where the token balance and corresponding strategy shares are not in sync upon reentrancy\n     */\n    function depositIntoStrategyWithSignature(\n        IStrategy strategy,\n        IERC20 token,\n        uint256 amount,\n        address staker,\n        uint256 expiry,\n        bytes memory signature\n    ) external returns (uint256 shares);\n\n    /// @notice Used by the DelegationManager to remove a Staker's shares from a particular strategy when entering the withdrawal queue\n    function removeShares(address staker, IStrategy strategy, uint256 shares) external;\n\n    /// @notice Used by the DelegationManager to award a Staker some shares that have passed through the withdrawal queue\n    function addShares(address staker, IERC20 token, IStrategy strategy, uint256 shares) external;\n    \n    /// @notice Used by the DelegationManager to convert withdrawn shares to tokens and send them to a recipient\n    function withdrawSharesAsTokens(address recipient, IStrategy strategy, uint256 shares, IERC20 token) external;\n\n    /// @notice Returns the current shares of `user` in `strategy`\n    function stakerStrategyShares(address user, IStrategy strategy) external view returns (uint256 shares);\n\n    /**\n     * @notice Get all details on the staker's deposits and corresponding shares\n     * @return (staker's strategies, shares in these strategies)\n     */\n    function getDeposits(address staker) external view returns (IStrategy[] memory, uint256[] memory);\n\n    /// @notice Simple getter function that returns `stakerStrategyList[staker].length`.\n    function stakerStrategyListLength(address staker) external view returns (uint256);\n\n    /**\n     * @notice Owner-only function that adds the provided Strategies to the 'whitelist' of strategies that stakers can deposit into\n     * @param strategiesToWhitelist Strategies that will be added to the `strategyIsWhitelistedForDeposit` mapping (if they aren't in it already)\n     * @param thirdPartyTransfersForbiddenValues bool values to set `thirdPartyTransfersForbidden` to for each strategy\n     */\n    function addStrategiesToDepositWhitelist(\n        IStrategy[] calldata strategiesToWhitelist,\n        bool[] calldata thirdPartyTransfersForbiddenValues\n    ) external;\n\n    /**\n     * @notice Owner-only function that removes the provided Strategies from the 'whitelist' of strategies that stakers can deposit into\n     * @param strategiesToRemoveFromWhitelist Strategies that will be removed to the `strategyIsWhitelistedForDeposit` mapping (if they are in it)\n     */\n    function removeStrategiesFromDepositWhitelist(IStrategy[] calldata strategiesToRemoveFromWhitelist) external;\n\n    /// @notice Returns the single, central Delegation contract of EigenLayer\n    function delegation() external view returns (IDelegationManager);\n\n    /// @notice Returns the single, central Slasher contract of EigenLayer\n    function slasher() external view returns (ISlasher);\n\n    /// @notice Returns the EigenPodManager contract of EigenLayer\n    function eigenPodManager() external view returns (IEigenPodManager);\n\n    /// @notice Returns the address of the `strategyWhitelister`\n    function strategyWhitelister() external view returns (address);\n\n    /// @notice Returns bool for whether or not `strategy` is whitelisted for deposit\n    function strategyIsWhitelistedForDeposit(IStrategy strategy) external view returns (bool);\n\n    /**\n     * @notice Returns bool for whether or not `strategy` enables credit transfers. i.e enabling\n     * depositIntoStrategyWithSignature calls or queueing withdrawals to a different address than the staker.\n     */\n    function thirdPartyTransfersForbidden(IStrategy strategy) external view returns (bool);\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/core/DelegationManagerStorage.sol\n\n/**\n * @title Storage variables for the `DelegationManager` contract.\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice This storage contract is separate from the logic to simplify the upgrade process.\n */\nabstract contract DelegationManagerStorage is IDelegationManager {\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH =\n        keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the `StakerDelegation` struct used by the contract\n    bytes32 public constant STAKER_DELEGATION_TYPEHASH =\n        keccak256(\"StakerDelegation(address staker,address operator,uint256 nonce,uint256 expiry)\");\n\n    /// @notice The EIP-712 typehash for the `DelegationApproval` struct used by the contract\n    bytes32 public constant DELEGATION_APPROVAL_TYPEHASH =\n        keccak256(\"DelegationApproval(address delegationApprover,address staker,address operator,bytes32 salt,uint256 expiry)\");\n\n    /**\n     * @notice Original EIP-712 Domain separator for this contract.\n     * @dev The domain separator may change in the event of a fork that modifies the ChainID.\n     * Use the getter function `domainSeparator` to get the current domain separator for this contract.\n     */\n    bytes32 internal _DOMAIN_SEPARATOR;\n\n    /// @notice The StrategyManager contract for EigenLayer\n    IStrategyManager public immutable strategyManager;\n\n    /// @notice The Slasher contract for EigenLayer\n    ISlasher public immutable slasher;\n\n    /// @notice The EigenPodManager contract for EigenLayer\n    IEigenPodManager public immutable eigenPodManager;\n\n    // the number of 12-second blocks in 30 days (60 * 60 * 24 * 30 / 12 = 216,000)\n    uint256 public constant MAX_WITHDRAWAL_DELAY_BLOCKS = 216000;\n\n    /**\n     * @notice returns the total number of shares in `strategy` that are delegated to `operator`.\n     * @notice Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\n     * @dev By design, the following invariant should hold for each Strategy:\n     * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\n     * = sum (delegateable shares of all stakers delegated to the operator)\n     */\n    mapping(address => mapping(IStrategy => uint256)) public operatorShares;\n\n    /**\n     * @notice Mapping: operator => OperatorDetails struct\n     * @dev This struct is internal with an external getter so we can return an `OperatorDetails memory` object\n     */\n    mapping(address => OperatorDetails) internal _operatorDetails;\n\n    /**\n     * @notice Mapping: staker => operator whom the staker is currently delegated to.\n     * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\n     */\n    mapping(address => address) public delegatedTo;\n\n    /// @notice Mapping: staker => number of signed messages (used in `delegateToBySignature`) from the staker that this contract has already checked.\n    mapping(address => uint256) public stakerNonce;\n\n    /**\n     * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\n     * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\n     * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\n     */\n    mapping(address => mapping(bytes32 => bool)) public delegationApproverSaltIsSpent;\n\n    /**\n     * @notice Global minimum withdrawal delay for all strategy withdrawals.\n     * In a prior Goerli release, we only had a global min withdrawal delay across all strategies.\n     * In addition, we now also configure withdrawal delays on a per-strategy basis.\n     * To withdraw from a strategy, max(minWithdrawalDelayBlocks, strategyWithdrawalDelayBlocks[strategy]) number of blocks must have passed. \n     * See mapping strategyWithdrawalDelayBlocks below for per-strategy withdrawal delays.\n     */\n    uint256 public minWithdrawalDelayBlocks;\n\n    /// @notice Mapping: hash of withdrawal inputs, aka 'withdrawalRoot' => whether the withdrawal is pending\n    mapping(bytes32 => bool) public pendingWithdrawals;\n\n    /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\n    /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\n    mapping(address => uint256) public cumulativeWithdrawalsQueued;\n\n    /// @notice Deprecated from an old Goerli release\n    /// See conversation here: https://github.com/Layr-Labs/eigenlayer-contracts/pull/365/files#r1417525270\n    address private __deprecated_stakeRegistry;\n\n    /**\n     * @notice Minimum delay enforced by this contract per Strategy for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner,\n     * up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\n     */\n    mapping(IStrategy => uint256) public strategyWithdrawalDelayBlocks;\n\n    constructor(IStrategyManager _strategyManager, ISlasher _slasher, IEigenPodManager _eigenPodManager) {\n        strategyManager = _strategyManager;\n        eigenPodManager = _eigenPodManager;\n        slasher = _slasher;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[39] private __gap;\n}\n\n// lib/eigenlayer-middleware/src/interfaces/IServiceManagerUI.sol\n\n/**\n * @title Minimal interface for a ServiceManager-type contract that AVS ServiceManager contracts must implement\n * for eigenlabs to be able to index their data on the AVS marketplace frontend.\n * @author Layr Labs, Inc.\n */\ninterface IServiceManagerUI {\n    /**\n     * Metadata should follow the format outlined by this example.\n        {\n            \"name\": \"EigenLabs AVS 1\",\n            \"website\": \"https://www.eigenlayer.xyz/\",\n            \"description\": \"This is my 1st AVS\",\n            \"logo\": \"https://holesky-operator-metadata.s3.amazonaws.com/eigenlayer.png\",\n            \"twitter\": \"https://twitter.com/eigenlayer\"\n        }\n     * @notice Updates the metadata URI for the AVS\n     * @param _metadataURI is the metadata URI for the AVS\n     */\n    function updateAVSMetadataURI(string memory _metadataURI) external;\n\n    /**\n     * @notice Forwards a call to EigenLayer's DelegationManager contract to confirm operator registration with the AVS\n     * @param operator The address of the operator to register.\n     * @param operatorSignature The signature, salt, and expiry of the operator's signature.\n     */\n    function registerOperatorToAVS(\n        address operator,\n        ISignatureUtils.SignatureWithSaltAndExpiry memory operatorSignature\n    ) external;\n\n    /**\n     * @notice Forwards a call to EigenLayer's DelegationManager contract to confirm operator deregistration from the AVS\n     * @param operator The address of the operator to deregister.\n     */\n    function deregisterOperatorFromAVS(address operator) external;\n\n    /**\n     * @notice Returns the list of strategies that the operator has potentially restaked on the AVS\n     * @param operator The address of the operator to get restaked strategies for\n     * @dev This function is intended to be called off-chain\n     * @dev No guarantee is made on whether the operator has shares for a strategy in a quorum or uniqueness \n     *      of each element in the returned array. The off-chain service should do that validation separately\n     */\n    function getOperatorRestakedStrategies(address operator) external view returns (address[] memory);\n\n    /**\n     * @notice Returns the list of strategies that the AVS supports for restaking\n     * @dev This function is intended to be called off-chain\n     * @dev No guarantee is made on uniqueness of each element in the returned array. \n     *      The off-chain service should do that validation separately\n     */\n    function getRestakeableStrategies() external view returns (address[] memory);\n\n    /// @notice Returns the EigenLayer AVSDirectory contract.\n    function avsDirectory() external view returns (address);\n}\n\n// lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol\n\n/**\n * @title Interface for a `Registry` that keeps track of stakes of operators for up to 256 quorums.\n * @author Layr Labs, Inc.\n */\ninterface IStakeRegistry is IRegistry {\n    \n    // DATA STRUCTURES\n\n    /// @notice struct used to store the stakes of an individual operator or the sum of all operators' stakes, for storage\n    struct StakeUpdate {\n        // the block number at which the stake amounts were updated and stored\n        uint32 updateBlockNumber;\n        // the block number at which the *next update* occurred.\n        /// @notice This entry has the value **0** until another update takes place.\n        uint32 nextUpdateBlockNumber;\n        // stake weight for the quorum\n        uint96 stake;\n    }\n\n    /**\n     * @notice In weighing a particular strategy, the amount of underlying asset for that strategy is\n     * multiplied by its multiplier, then divided by WEIGHTING_DIVISOR\n     */\n    struct StrategyParams {\n        IStrategy strategy;\n        uint96 multiplier;\n    }\n\n    // EVENTS\n\n    /// @notice emitted whenever the stake of `operator` is updated\n    event OperatorStakeUpdate(\n        bytes32 indexed operatorId,\n        uint8 quorumNumber,\n        uint96 stake\n    );\n    /// @notice emitted when the minimum stake for a quorum is updated\n    event MinimumStakeForQuorumUpdated(uint8 indexed quorumNumber, uint96 minimumStake);\n    /// @notice emitted when a new quorum is created\n    event QuorumCreated(uint8 indexed quorumNumber);\n    /// @notice emitted when `strategy` has been added to the array at `strategyParams[quorumNumber]`\n    event StrategyAddedToQuorum(uint8 indexed quorumNumber, IStrategy strategy);\n    /// @notice emitted when `strategy` has removed from the array at `strategyParams[quorumNumber]`\n    event StrategyRemovedFromQuorum(uint8 indexed quorumNumber, IStrategy strategy);\n    /// @notice emitted when `strategy` has its `multiplier` updated in the array at `strategyParams[quorumNumber]`\n    event StrategyMultiplierUpdated(uint8 indexed quorumNumber, IStrategy strategy, uint256 multiplier);\n\n    /**\n     * @notice Registers the `operator` with `operatorId` for the specified `quorumNumbers`.\n     * @param operator The address of the operator to register.\n     * @param operatorId The id of the operator to register.\n     * @param quorumNumbers The quorum numbers the operator is registering for, where each byte is an 8 bit integer quorumNumber.\n     * @return The operator's current stake for each quorum, and the total stake for each quorum\n     * @dev access restricted to the RegistryCoordinator\n     * @dev Preconditions (these are assumed, not validated in this contract):\n     *         1) `quorumNumbers` has no duplicates\n     *         2) `quorumNumbers.length` != 0\n     *         3) `quorumNumbers` is ordered in ascending order\n     *         4) the operator is not already registered\n     */\n    function registerOperator(\n        address operator, \n        bytes32 operatorId, \n        bytes memory quorumNumbers\n    ) external returns (uint96[] memory, uint96[] memory);\n\n    /**\n     * @notice Deregisters the operator with `operatorId` for the specified `quorumNumbers`.\n     * @param operatorId The id of the operator to deregister.\n     * @param quorumNumbers The quorum numbers the operator is deregistering from, where each byte is an 8 bit integer quorumNumber.\n     * @dev access restricted to the RegistryCoordinator\n     * @dev Preconditions (these are assumed, not validated in this contract):\n     *         1) `quorumNumbers` has no duplicates\n     *         2) `quorumNumbers.length` != 0\n     *         3) `quorumNumbers` is ordered in ascending order\n     *         4) the operator is not already deregistered\n     *         5) `quorumNumbers` is a subset of the quorumNumbers that the operator is registered for\n     */\n    function deregisterOperator(bytes32 operatorId, bytes memory quorumNumbers) external;\n\n    /**\n     * @notice Initialize a new quorum created by the registry coordinator by setting strategies, weights, and minimum stake\n     */\n    function initializeQuorum(uint8 quorumNumber, uint96 minimumStake, StrategyParams[] memory strategyParams) external;\n\n    /// @notice Adds new strategies and the associated multipliers to the @param quorumNumber.\n    function addStrategies(\n        uint8 quorumNumber,\n        StrategyParams[] memory strategyParams\n    ) external;\n\n    /**\n     * @notice This function is used for removing strategies and their associated weights from the\n     * mapping strategyParams for a specific @param quorumNumber.\n     * @dev higher indices should be *first* in the list of @param indicesToRemove, since otherwise\n     * the removal of lower index entries will cause a shift in the indices of the other strategiesToRemove\n     */\n    function removeStrategies(uint8 quorumNumber, uint256[] calldata indicesToRemove) external;\n\n    /**\n     * @notice This function is used for modifying the weights of strategies that are already in the\n     * mapping strategyParams for a specific\n     * @param quorumNumber is the quorum number to change the strategy for\n     * @param strategyIndices are the indices of the strategies to change\n     * @param newMultipliers are the new multipliers for the strategies\n     */\n    function modifyStrategyParams(\n        uint8 quorumNumber,\n        uint256[] calldata strategyIndices,\n        uint96[] calldata newMultipliers\n    ) external;\n\n    /// @notice Constant used as a divisor in calculating weights.\n    function WEIGHTING_DIVISOR() external pure returns (uint256);\n\n    /// @notice Returns the EigenLayer delegation manager contract.\n    function delegation() external view returns (IDelegationManager);\n\n    /// @notice In order to register for a quorum i, an operator must have at least `minimumStakeForQuorum[i]`\n    function minimumStakeForQuorum(uint8 quorumNumber) external view returns (uint96);\n\n    /// @notice Returns the length of the dynamic array stored in `strategyParams[quorumNumber]`.\n    function strategyParamsLength(uint8 quorumNumber) external view returns (uint256);\n\n    /// @notice Returns the strategy and weight multiplier for the `index`'th strategy in the quorum `quorumNumber`\n    function strategyParamsByIndex(\n        uint8 quorumNumber,\n        uint256 index\n    ) external view returns (StrategyParams memory);\n\n    /**\n     * @notice This function computes the total weight of the @param operator in the quorum @param quorumNumber.\n     * @dev reverts in the case that `quorumNumber` is greater than or equal to `quorumCount`\n     */\n    function weightOfOperatorForQuorum(uint8 quorumNumber, address operator) external view returns (uint96);\n\n    /**\n     * @notice Returns the entire `operatorIdToStakeHistory[operatorId][quorumNumber]` array.\n     * @param operatorId The id of the operator of interest.\n     * @param quorumNumber The quorum number to get the stake for.\n     */\n    function getStakeHistory(bytes32 operatorId, uint8 quorumNumber) external view returns (StakeUpdate[] memory);\n\n    function getTotalStakeHistoryLength(uint8 quorumNumber) external view returns (uint256);\n\n    /**\n     * @notice Returns the `index`-th entry in the dynamic array of total stake, `totalStakeHistory` for quorum `quorumNumber`.\n     * @param quorumNumber The quorum number to get the stake for.\n     * @param index Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.\n     */\n    function getTotalStakeUpdateAtIndex(uint8 quorumNumber, uint256 index) external view returns (StakeUpdate memory);\n\n    /// @notice Returns the indices of the operator stakes for the provided `quorumNumber` at the given `blockNumber`\n    function getStakeUpdateIndexAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber)\n        external\n        view\n        returns (uint32);\n\n    /// @notice Returns the indices of the total stakes for the provided `quorumNumbers` at the given `blockNumber`\n    function getTotalStakeIndicesAtBlockNumber(uint32 blockNumber, bytes calldata quorumNumbers) external view returns(uint32[] memory) ;\n\n    /**\n     * @notice Returns the `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array.\n     * @param quorumNumber The quorum number to get the stake for.\n     * @param operatorId The id of the operator of interest.\n     * @param index Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.\n     * @dev Function will revert if `index` is out-of-bounds.\n     */\n    function getStakeUpdateAtIndex(uint8 quorumNumber, bytes32 operatorId, uint256 index)\n        external\n        view\n        returns (StakeUpdate memory);\n\n    /**\n     * @notice Returns the most recent stake weight for the `operatorId` for a certain quorum\n     * @dev Function returns an StakeUpdate struct with **every entry equal to 0** in the event that the operator has no stake history\n     */\n    function getLatestStakeUpdate(bytes32 operatorId, uint8 quorumNumber) external view returns (StakeUpdate memory);\n\n    /**\n     * @notice Returns the stake weight corresponding to `operatorId` for quorum `quorumNumber`, at the\n     * `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array if the entry \n     * corresponds to the operator's stake at `blockNumber`. Reverts otherwise.\n     * @param quorumNumber The quorum number to get the stake for.\n     * @param operatorId The id of the operator of interest.\n     * @param index Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.\n     * @param blockNumber Block number to make sure the stake is from.\n     * @dev Function will revert if `index` is out-of-bounds.\n     * @dev used the BLSSignatureChecker to get past stakes of signing operators\n     */\n    function getStakeAtBlockNumberAndIndex(uint8 quorumNumber, uint32 blockNumber, bytes32 operatorId, uint256 index)\n        external\n        view\n        returns (uint96);\n\n    /**\n     * @notice Returns the total stake weight for quorum `quorumNumber`, at the `index`-th entry in the \n     * `totalStakeHistory[quorumNumber]` array if the entry corresponds to the total stake at `blockNumber`. \n     * Reverts otherwise.\n     * @param quorumNumber The quorum number to get the stake for.\n     * @param index Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.\n     * @param blockNumber Block number to make sure the stake is from.\n     * @dev Function will revert if `index` is out-of-bounds.\n     * @dev used the BLSSignatureChecker to get past stakes of signing operators\n     */\n    function getTotalStakeAtBlockNumberFromIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) external view returns (uint96);\n\n    /**\n     * @notice Returns the most recent stake weight for the `operatorId` for quorum `quorumNumber`\n     * @dev Function returns weight of **0** in the event that the operator has no stake history\n     */\n    function getCurrentStake(bytes32 operatorId, uint8 quorumNumber) external view returns (uint96);\n\n    /// @notice Returns the stake of the operator for the provided `quorumNumber` at the given `blockNumber`\n    function getStakeAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber)\n        external\n        view\n        returns (uint96);\n\n    /**\n     * @notice Returns the stake weight from the latest entry in `_totalStakeHistory` for quorum `quorumNumber`.\n     * @dev Will revert if `_totalStakeHistory[quorumNumber]` is empty.\n     */\n    function getCurrentTotalStake(uint8 quorumNumber) external view returns (uint96);\n\n    /**\n     * @notice Called by the registry coordinator to update an operator's stake for one\n     * or more quorums.\n     *\n     * If the operator no longer has the minimum stake required for a quorum, they are\n     * added to the\n     * @return A bitmap of quorums where the operator no longer meets the minimum stake\n     * and should be deregistered.\n     */\n    function updateOperatorStake(\n        address operator, \n        bytes32 operatorId, \n        bytes calldata quorumNumbers\n    ) external returns (uint192);\n}\n\n// lib/eigenlayer-middleware/src/interfaces/IServiceManager.sol\n\n/**\n * @title Minimal interface for a ServiceManager-type contract that forms the single point for an AVS to push updates to EigenLayer\n * @author Layr Labs, Inc.\n */\ninterface IServiceManager is IServiceManagerUI {\n    /**\n     * @notice Creates a new rewards submission to the EigenLayer RewardsCoordinator contract, to be split amongst the\n     * set of stakers delegated to operators who are registered to this `avs`\n     * @param rewardsSubmissions The rewards submissions being created\n     * @dev Only callabe by the permissioned rewardsInitiator address\n     * @dev The duration of the `rewardsSubmission` cannot exceed `MAX_REWARDS_DURATION`\n     * @dev The tokens are sent to the `RewardsCoordinator` contract\n     * @dev Strategies must be in ascending order of addresses to check for duplicates\n     * @dev This function will revert if the `rewardsSubmission` is malformed,\n     * e.g. if the `strategies` and `weights` arrays are of non-equal lengths\n     */\n    function createAVSRewardsSubmission(IRewardsCoordinator.RewardsSubmission[] calldata rewardsSubmissions) external;\n\n    // EVENTS\n    event RewardsInitiatorUpdated(address prevRewardsInitiator, address newRewardsInitiator);\n}\n\n// lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistryStorage.sol\n\nabstract contract ECDSAStakeRegistryStorage is\n    ECDSAStakeRegistryEventsAndErrors\n{\n    /// @notice Manages staking delegations through the DelegationManager interface\n    IDelegationManager internal immutable DELEGATION_MANAGER;\n\n    /// @dev The total amount of multipliers to weigh stakes\n    uint256 internal constant BPS = 10_000;\n\n    /// @notice The size of the current operator set\n    uint256 internal _totalOperators;\n\n    /// @notice Stores the current quorum configuration\n    Quorum internal _quorum;\n\n    /// @notice Specifies the weight required to become an operator\n    uint256 internal _minimumWeight;\n\n    /// @notice Holds the address of the service manager\n    address internal _serviceManager;\n\n    /// @notice Defines the duration after which the stake's weight expires.\n    uint256 internal _stakeExpiry;\n\n    /// @notice Maps an operator to their signing key history using checkpoints\n    mapping(address => CheckpointsUpgradeable.History)\n        internal _operatorSigningKeyHistory;\n\n    /// @notice Tracks the total stake history over time using checkpoints\n    CheckpointsUpgradeable.History internal _totalWeightHistory;\n\n    /// @notice Tracks the threshold bps history using checkpoints\n    CheckpointsUpgradeable.History internal _thresholdWeightHistory;\n\n    /// @notice Maps operator addresses to their respective stake histories using checkpoints\n    mapping(address => CheckpointsUpgradeable.History)\n        internal _operatorWeightHistory;\n\n    /// @notice Maps an operator to their registration status\n    mapping(address => bool) internal _operatorRegistered;\n\n    /// @param _delegationManager Connects this registry with the DelegationManager\n    constructor(IDelegationManager _delegationManager) {\n        DELEGATION_MANAGER = _delegationManager;\n    }\n\n    // slither-disable-next-line shadowing-state\n    /// @dev Reserves storage slots for future upgrades\n    // solhint-disable-next-line\n    uint256[40] private __gap;\n}\n\n// lib/eigenlayer-middleware/src/interfaces/IRegistryCoordinator.sol\n\n/**\n * @title Interface for a contract that coordinates between various registries for an AVS.\n * @author Layr Labs, Inc.\n */\ninterface IRegistryCoordinator {\n    // EVENTS\n\n    /// Emits when an operator is registered\n    event OperatorRegistered(address indexed operator, bytes32 indexed operatorId);\n\n    /// Emits when an operator is deregistered\n    event OperatorDeregistered(address indexed operator, bytes32 indexed operatorId);\n\n    event OperatorSetParamsUpdated(uint8 indexed quorumNumber, OperatorSetParam operatorSetParams);\n\n    event ChurnApproverUpdated(address prevChurnApprover, address newChurnApprover);\n\n    event EjectorUpdated(address prevEjector, address newEjector);\n\n    /// @notice emitted when all the operators for a quorum are updated at once\n    event QuorumBlockNumberUpdated(uint8 indexed quorumNumber, uint256 blocknumber);\n\n    // DATA STRUCTURES\n    enum OperatorStatus\n    {\n        // default is NEVER_REGISTERED\n        NEVER_REGISTERED,\n        REGISTERED,\n        DEREGISTERED\n    }\n\n    // STRUCTS\n\n    /**\n     * @notice Data structure for storing info on operators\n     */\n    struct OperatorInfo {\n        // the id of the operator, which is likely the keccak256 hash of the operator's public key if using BLSRegistry\n        bytes32 operatorId;\n        // indicates whether the operator is actively registered for serving the middleware or not\n        OperatorStatus status;\n    }\n\n    /**\n     * @notice Data structure for storing info on quorum bitmap updates where the `quorumBitmap` is the bitmap of the \n     * quorums the operator is registered for starting at (inclusive)`updateBlockNumber` and ending at (exclusive) `nextUpdateBlockNumber`\n     * @dev nextUpdateBlockNumber is initialized to 0 for the latest update\n     */\n    struct QuorumBitmapUpdate {\n        uint32 updateBlockNumber;\n        uint32 nextUpdateBlockNumber;\n        uint192 quorumBitmap;\n    }\n\n    /**\n     * @notice Data structure for storing operator set params for a given quorum. Specifically the \n     * `maxOperatorCount` is the maximum number of operators that can be registered for the quorum,\n     * `kickBIPsOfOperatorStake` is the basis points of a new operator needs to have of an operator they are trying to kick from the quorum,\n     * and `kickBIPsOfTotalStake` is the basis points of the total stake of the quorum that an operator needs to be below to be kicked.\n     */ \n     struct OperatorSetParam {\n        uint32 maxOperatorCount;\n        uint16 kickBIPsOfOperatorStake;\n        uint16 kickBIPsOfTotalStake;\n    }\n\n    /**\n     * @notice Data structure for the parameters needed to kick an operator from a quorum with number `quorumNumber`, used during registration churn.\n     * `operator` is the address of the operator to kick\n     */\n    struct OperatorKickParam {\n        uint8 quorumNumber;\n        address operator;\n    }\n\n    /// @notice Returns the operator set params for the given `quorumNumber`\n    function getOperatorSetParams(uint8 quorumNumber) external view returns (OperatorSetParam memory);\n    /// @notice the Stake registry contract that will keep track of operators' stakes\n    function stakeRegistry() external view returns (IStakeRegistry);\n    /// @notice the BLS Aggregate Pubkey Registry contract that will keep track of operators' BLS aggregate pubkeys per quorum\n    function blsApkRegistry() external view returns (IBLSApkRegistry);\n    /// @notice the index Registry contract that will keep track of operators' indexes\n    function indexRegistry() external view returns (IIndexRegistry);\n\n    /**\n     * @notice Ejects the provided operator from the provided quorums from the AVS\n     * @param operator is the operator to eject\n     * @param quorumNumbers are the quorum numbers to eject the operator from\n     */\n    function ejectOperator(\n        address operator, \n        bytes calldata quorumNumbers\n    ) external;\n\n    /// @notice Returns the number of quorums the registry coordinator has created\n    function quorumCount() external view returns (uint8);\n\n    /// @notice Returns the operator struct for the given `operator`\n    function getOperator(address operator) external view returns (OperatorInfo memory);\n\n    /// @notice Returns the operatorId for the given `operator`\n    function getOperatorId(address operator) external view returns (bytes32);\n\n    /// @notice Returns the operator address for the given `operatorId`\n    function getOperatorFromId(bytes32 operatorId) external view returns (address operator);\n\n    /// @notice Returns the status for the given `operator`\n    function getOperatorStatus(address operator) external view returns (IRegistryCoordinator.OperatorStatus);\n\n    /// @notice Returns the indices of the quorumBitmaps for the provided `operatorIds` at the given `blockNumber`\n    function getQuorumBitmapIndicesAtBlockNumber(uint32 blockNumber, bytes32[] memory operatorIds) external view returns (uint32[] memory);\n\n    /**\n     * @notice Returns the quorum bitmap for the given `operatorId` at the given `blockNumber` via the `index`\n     * @dev reverts if `index` is incorrect \n     */ \n    function getQuorumBitmapAtBlockNumberByIndex(bytes32 operatorId, uint32 blockNumber, uint256 index) external view returns (uint192);\n\n    /// @notice Returns the `index`th entry in the operator with `operatorId`'s bitmap history\n    function getQuorumBitmapUpdateByIndex(bytes32 operatorId, uint256 index) external view returns (QuorumBitmapUpdate memory);\n\n    /// @notice Returns the current quorum bitmap for the given `operatorId`\n    function getCurrentQuorumBitmap(bytes32 operatorId) external view returns (uint192);\n\n    /// @notice Returns the length of the quorum bitmap history for the given `operatorId`\n    function getQuorumBitmapHistoryLength(bytes32 operatorId) external view returns (uint256);\n\n    /// @notice Returns the registry at the desired index\n    function registries(uint256) external view returns (address);\n\n    /// @notice Returns the number of registries\n    function numRegistries() external view returns (uint256);\n\n    /**\n     * @notice Returns the message hash that an operator must sign to register their BLS public key.\n     * @param operator is the address of the operator registering their BLS public key\n     */\n    function pubkeyRegistrationMessageHash(address operator) external view returns (BN254.G1Point memory);\n\n    /// @notice returns the blocknumber the quorum was last updated all at once for all operators\n    function quorumUpdateBlockNumber(uint8 quorumNumber) external view returns (uint256);\n\n    /// @notice The owner of the registry coordinator\n    function owner() external view returns (address);\n}\n\n// lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/core/DelegationManager.sol\n\n/**\n * @title DelegationManager\n * @author Layr Labs, Inc.\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\n * @notice  This is the contract for delegation in EigenLayer. The main functionalities of this contract are\n * - enabling anyone to register as an operator in EigenLayer\n * - allowing operators to specify parameters related to stakers who delegate to them\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\n */\ncontract DelegationManager is Initializable, OwnableUpgradeable, Pausable, DelegationManagerStorage, ReentrancyGuardUpgradeable {\n    // @dev Index for flag that pauses new delegations when set\n    uint8 internal constant PAUSED_NEW_DELEGATION = 0;\n\n    // @dev Index for flag that pauses queuing new withdrawals when set.\n    uint8 internal constant PAUSED_ENTER_WITHDRAWAL_QUEUE = 1;\n\n    // @dev Index for flag that pauses completing existing withdrawals when set.\n    uint8 internal constant PAUSED_EXIT_WITHDRAWAL_QUEUE = 2;\n\n    // @dev Chain ID at the time of contract deployment\n    uint256 internal immutable ORIGINAL_CHAIN_ID;\n\n    // @dev Maximum Value for `stakerOptOutWindowBlocks`. Approximately equivalent to 6 months in blocks.\n    uint256 public constant MAX_STAKER_OPT_OUT_WINDOW_BLOCKS = (180 days) / 12;\n\n    /// @notice Canonical, virtual beacon chain ETH strategy\n    IStrategy public constant beaconChainETHStrategy = IStrategy(0xbeaC0eeEeeeeEEeEeEEEEeeEEeEeeeEeeEEBEaC0);\n\n    // @notice Simple permission for functions that are only callable by the StrategyManager contract OR by the EigenPodManagerContract\n    modifier onlyStrategyManagerOrEigenPodManager() {\n        require(\n            msg.sender == address(strategyManager) || msg.sender == address(eigenPodManager),\n            \"DelegationManager: onlyStrategyManagerOrEigenPodManager\"\n        );\n        _;\n    }\n\n    /*******************************************************************************\n                            INITIALIZING FUNCTIONS\n    *******************************************************************************/\n\n    /**\n     * @dev Initializes the immutable addresses of the strategy mananger and slasher.\n     */\n    constructor(\n        IStrategyManager _strategyManager,\n        ISlasher _slasher,\n        IEigenPodManager _eigenPodManager\n    ) DelegationManagerStorage(_strategyManager, _slasher, _eigenPodManager) {\n        _disableInitializers();\n        ORIGINAL_CHAIN_ID = block.chainid;\n    }\n\n    /**\n     * @dev Initializes the addresses of the initial owner, pauser registry, and paused status.\n     * minWithdrawalDelayBlocks is set only once here\n     */\n    function initialize(\n        address initialOwner,\n        IPauserRegistry _pauserRegistry,\n        uint256 initialPausedStatus,\n        uint256 _minWithdrawalDelayBlocks,\n        IStrategy[] calldata _strategies,\n        uint256[] calldata _withdrawalDelayBlocks\n    ) external initializer {\n        _initializePauser(_pauserRegistry, initialPausedStatus);\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator();\n        _transferOwnership(initialOwner);\n        _setMinWithdrawalDelayBlocks(_minWithdrawalDelayBlocks);\n        _setStrategyWithdrawalDelayBlocks(_strategies, _withdrawalDelayBlocks);\n    }\n\n    /*******************************************************************************\n                            EXTERNAL FUNCTIONS \n    *******************************************************************************/\n\n    /**\n     * @notice Registers the caller as an operator in EigenLayer.\n     * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\n     * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\n     *\n     * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \"delegated to themself\".\n     * @dev This function will revert if the caller is already delegated to an operator.\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\n     */\n    function registerAsOperator(\n        OperatorDetails calldata registeringOperatorDetails,\n        string calldata metadataURI\n    ) external {\n        require(!isDelegated(msg.sender), \"DelegationManager.registerAsOperator: caller is already actively delegated\");\n        _setOperatorDetails(msg.sender, registeringOperatorDetails);\n        SignatureWithExpiry memory emptySignatureAndExpiry;\n        // delegate from the operator to themselves\n        _delegate(msg.sender, msg.sender, emptySignatureAndExpiry, bytes32(0));\n        // emit events\n        emit OperatorRegistered(msg.sender, registeringOperatorDetails);\n        emit OperatorMetadataURIUpdated(msg.sender, metadataURI);\n    }\n\n    /**\n     * @notice Updates an operator's stored `OperatorDetails`.\n     * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\n     *\n     * @dev The caller must have previously registered as an operator in EigenLayer.\n     */\n    function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external {\n        require(isOperator(msg.sender), \"DelegationManager.modifyOperatorDetails: caller must be an operator\");\n        _setOperatorDetails(msg.sender, newOperatorDetails);\n    }\n\n    /**\n     * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\n     * @param metadataURI The URI for metadata associated with an operator\n     */\n    function updateOperatorMetadataURI(string calldata metadataURI) external {\n        require(isOperator(msg.sender), \"DelegationManager.updateOperatorMetadataURI: caller must be an operator\");\n        emit OperatorMetadataURIUpdated(msg.sender, metadataURI);\n    }\n\n    /**\n     * @notice Caller delegates their stake to an operator.\n     * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on EigenLayer.\n     * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\n     * @param approverSalt A unique single use value tied to an individual signature.\n     * @dev The approverSignatureAndExpiry is used in the event that:\n     *          1) the operator's `delegationApprover` address is set to a non-zero value.\n     *                  AND\n     *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\n     *             or their delegationApprover is the `msg.sender`, then approval is assumed.\n     * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n     * in this case to save on complexity + gas costs\n     */\n    function delegateTo(\n        address operator,\n        SignatureWithExpiry memory approverSignatureAndExpiry,\n        bytes32 approverSalt\n    ) external {\n        require(!isDelegated(msg.sender), \"DelegationManager.delegateTo: staker is already actively delegated\");\n        require(isOperator(operator), \"DelegationManager.delegateTo: operator is not registered in EigenLayer\");\n        // go through the internal delegation flow, checking the `approverSignatureAndExpiry` if applicable\n        _delegate(msg.sender, operator, approverSignatureAndExpiry, approverSalt);\n    }\n\n    /**\n     * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\n     * @param staker The account delegating stake to an `operator` account\n     * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on EigenLayer.\n     * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\n     * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\n     * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\n     *\n     * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\n     * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\n     * @dev the operator's `delegationApprover` address is set to a non-zero value.\n     * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\n     * is the `msg.sender`, then approval is assumed.\n     * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\n     * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\n     * in this case to save on complexity + gas costs\n     */\n    function delegateToBySignature(\n        address staker,\n        address operator,\n        SignatureWithExpiry memory stakerSignatureAndExpiry,\n        SignatureWithExpiry memory approverSignatureAndExpiry,\n        bytes32 approverSalt\n    ) external {\n        // check the signature expiry\n        require(\n            stakerSignatureAndExpiry.expiry >= block.timestamp,\n            \"DelegationManager.delegateToBySignature: staker signature expired\"\n        );\n        require(!isDelegated(staker), \"DelegationManager.delegateToBySignature: staker is already actively delegated\");\n        require(isOperator(operator), \"DelegationManager.delegateToBySignature: operator is not registered in EigenLayer\");\n\n        // calculate the digest hash, then increment `staker`'s nonce\n        uint256 currentStakerNonce = stakerNonce[staker];\n        bytes32 stakerDigestHash = calculateStakerDelegationDigestHash(\n            staker,\n            currentStakerNonce,\n            operator,\n            stakerSignatureAndExpiry.expiry\n        );\n        unchecked {\n            stakerNonce[staker] = currentStakerNonce + 1;\n        }\n\n        // actually check that the signature is valid\n        EIP1271SignatureUtils.checkSignature_EIP1271(staker, stakerDigestHash, stakerSignatureAndExpiry.signature);\n\n        // go through the internal delegation flow, checking the `approverSignatureAndExpiry` if applicable\n        _delegate(staker, operator, approverSignatureAndExpiry, approverSalt);\n    }\n\n    /**\n     * Allows the staker, the staker's operator, or that operator's delegationApprover to undelegate\n     * a staker from their operator. Undelegation immediately removes ALL active shares/strategies from\n     * both the staker and operator, and places the shares and strategies in the withdrawal queue\n     */\n    function undelegate(address staker) external onlyWhenNotPaused(PAUSED_ENTER_WITHDRAWAL_QUEUE) returns (bytes32[] memory withdrawalRoots) {\n        require(isDelegated(staker), \"DelegationManager.undelegate: staker must be delegated to undelegate\");\n        require(!isOperator(staker), \"DelegationManager.undelegate: operators cannot be undelegated\");\n        require(staker != address(0), \"DelegationManager.undelegate: cannot undelegate zero address\");\n        address operator = delegatedTo[staker];\n        require(\n            msg.sender == staker ||\n                msg.sender == operator ||\n                msg.sender == _operatorDetails[operator].delegationApprover,\n            \"DelegationManager.undelegate: caller cannot undelegate staker\"\n        );\n\n        // Gather strategies and shares to remove from staker/operator during undelegation\n        // Undelegation removes ALL currently-active strategies and shares\n        (IStrategy[] memory strategies, uint256[] memory shares) = getDelegatableShares(staker);\n\n        // emit an event if this action was not initiated by the staker themselves\n        if (msg.sender != staker) {\n            emit StakerForceUndelegated(staker, operator);\n        }\n\n        // undelegate the staker\n        emit StakerUndelegated(staker, operator);\n        delegatedTo[staker] = address(0);\n\n        // if no delegatable shares, return an empty array, and don't queue a withdrawal\n        if (strategies.length == 0) {\n            withdrawalRoots = new bytes32[](0);\n        } else {\n            withdrawalRoots = new bytes32[](strategies.length);\n            for (uint256 i = 0; i < strategies.length; i++) {\n                IStrategy[] memory singleStrategy = new IStrategy[](1);\n                uint256[] memory singleShare = new uint256[](1);\n                singleStrategy[0] = strategies[i];\n                singleShare[0] = shares[i];\n\n                withdrawalRoots[i] = _removeSharesAndQueueWithdrawal({\n                    staker: staker,\n                    operator: operator,\n                    withdrawer: staker,\n                    strategies: singleStrategy,\n                    shares: singleShare\n                });\n            }\n        }\n\n        return withdrawalRoots;\n    }\n\n    /**\n     * Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed\n     * from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from\n     * their operator.\n     *\n     * All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay.\n     */\n    function queueWithdrawals(\n        QueuedWithdrawalParams[] calldata queuedWithdrawalParams\n    ) external onlyWhenNotPaused(PAUSED_ENTER_WITHDRAWAL_QUEUE) returns (bytes32[] memory) {\n        bytes32[] memory withdrawalRoots = new bytes32[](queuedWithdrawalParams.length);\n        address operator = delegatedTo[msg.sender];\n\n        for (uint256 i = 0; i < queuedWithdrawalParams.length; i++) {\n            require(queuedWithdrawalParams[i].strategies.length == queuedWithdrawalParams[i].shares.length, \"DelegationManager.queueWithdrawal: input length mismatch\");\n            require(queuedWithdrawalParams[i].withdrawer == msg.sender, \"DelegationManager.queueWithdrawal: withdrawer must be staker\");\n\n            // Remove shares from staker's strategies and place strategies/shares in queue.\n            // If the staker is delegated to an operator, the operator's delegated shares are also reduced\n            // NOTE: This will fail if the staker doesn't have the shares implied by the input parameters\n            withdrawalRoots[i] = _removeSharesAndQueueWithdrawal({\n                staker: msg.sender,\n                operator: operator,\n                withdrawer: queuedWithdrawalParams[i].withdrawer,\n                strategies: queuedWithdrawalParams[i].strategies,\n                shares: queuedWithdrawalParams[i].shares\n            });\n        }\n        return withdrawalRoots;\n    }\n\n    /**\n     * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\n     * @param withdrawal The Withdrawal to complete.\n     * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\n     * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\n     * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\n     * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves\n     * and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\n     * will simply be transferred to the caller directly.\n     * @dev middlewareTimesIndex is unused, but will be used in the Slasher eventually\n     * @dev beaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\n     * any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\n     * any other strategies, which will be transferred to the withdrawer.\n     */\n    function completeQueuedWithdrawal(\n        Withdrawal calldata withdrawal,\n        IERC20[] calldata tokens,\n        uint256 middlewareTimesIndex,\n        bool receiveAsTokens\n    ) external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE) nonReentrant {\n        _completeQueuedWithdrawal(withdrawal, tokens, middlewareTimesIndex, receiveAsTokens);\n    }\n\n    /**\n     * @notice Array-ified version of `completeQueuedWithdrawal`.\n     * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\n     * @param withdrawals The Withdrawals to complete.\n     * @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\n     * @param middlewareTimesIndexes One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\n     * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\n     * @dev See `completeQueuedWithdrawal` for relevant dev tags\n     */\n    function completeQueuedWithdrawals(\n        Withdrawal[] calldata withdrawals,\n        IERC20[][] calldata tokens,\n        uint256[] calldata middlewareTimesIndexes,\n        bool[] calldata receiveAsTokens\n    ) external onlyWhenNotPaused(PAUSED_EXIT_WITHDRAWAL_QUEUE) nonReentrant {\n        for (uint256 i = 0; i < withdrawals.length; ++i) {\n            _completeQueuedWithdrawal(withdrawals[i], tokens[i], middlewareTimesIndexes[i], receiveAsTokens[i]);\n        }\n    }\n\n    /**\n     * @notice Increases a staker's delegated share balance in a strategy.\n     * @param staker The address to increase the delegated shares for their operator.\n     * @param strategy The strategy in which to increase the delegated shares.\n     * @param shares The number of shares to increase.\n     *\n     * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n     * @dev Callable only by the StrategyManager or EigenPodManager.\n     */\n    function increaseDelegatedShares(\n        address staker,\n        IStrategy strategy,\n        uint256 shares\n    ) external onlyStrategyManagerOrEigenPodManager {\n        // if the staker is delegated to an operator\n        if (isDelegated(staker)) {\n            address operator = delegatedTo[staker];\n\n            // add strategy shares to delegate's shares\n            _increaseOperatorShares({operator: operator, staker: staker, strategy: strategy, shares: shares});\n        }\n    }\n\n    /**\n     * @notice Decreases a staker's delegated share balance in a strategy.\n     * @param staker The address to increase the delegated shares for their operator.\n     * @param strategy The strategy in which to decrease the delegated shares.\n     * @param shares The number of shares to decrease.\n     *\n     * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\n     * @dev Callable only by the StrategyManager or EigenPodManager.\n     */\n    function decreaseDelegatedShares(\n        address staker,\n        IStrategy strategy,\n        uint256 shares\n    ) external onlyStrategyManagerOrEigenPodManager {\n        // if the staker is delegated to an operator\n        if (isDelegated(staker)) {\n            address operator = delegatedTo[staker];\n\n            // subtract strategy shares from delegate's shares\n            _decreaseOperatorShares({\n                operator: operator,\n                staker: staker,\n                strategy: strategy,\n                shares: shares\n            });\n        }\n    }\n\n    /**\n     * @notice Owner-only function for modifying the value of the `minWithdrawalDelayBlocks` variable.\n     * @param newMinWithdrawalDelayBlocks new value of `minWithdrawalDelayBlocks`.\n     */\n    function setMinWithdrawalDelayBlocks(uint256 newMinWithdrawalDelayBlocks) external onlyOwner {\n        _setMinWithdrawalDelayBlocks(newMinWithdrawalDelayBlocks);\n    }\n\n    /**\n     * @notice Called by owner to set the minimum withdrawal delay blocks for each passed in strategy\n     * Note that the min number of blocks to complete a withdrawal of a strategy is \n     * MAX(minWithdrawalDelayBlocks, strategyWithdrawalDelayBlocks[strategy])\n     * @param strategies The strategies to set the minimum withdrawal delay blocks for\n     * @param withdrawalDelayBlocks The minimum withdrawal delay blocks to set for each strategy\n     */\n    function setStrategyWithdrawalDelayBlocks(\n        IStrategy[] calldata strategies,\n        uint256[] calldata withdrawalDelayBlocks\n    ) external onlyOwner {\n        _setStrategyWithdrawalDelayBlocks(strategies, withdrawalDelayBlocks);\n    }\n\n    /*******************************************************************************\n                            INTERNAL FUNCTIONS\n    *******************************************************************************/\n\n    /**\n     * @notice Sets operator parameters in the `_operatorDetails` mapping.\n     * @param operator The account registered as an operator updating their operatorDetails\n     * @param newOperatorDetails The new parameters for the operator\n     */\n    function _setOperatorDetails(address operator, OperatorDetails calldata newOperatorDetails) internal {\n        require(\n            newOperatorDetails.stakerOptOutWindowBlocks <= MAX_STAKER_OPT_OUT_WINDOW_BLOCKS,\n            \"DelegationManager._setOperatorDetails: stakerOptOutWindowBlocks cannot be > MAX_STAKER_OPT_OUT_WINDOW_BLOCKS\"\n        );\n        require(\n            newOperatorDetails.stakerOptOutWindowBlocks >= _operatorDetails[operator].stakerOptOutWindowBlocks,\n            \"DelegationManager._setOperatorDetails: stakerOptOutWindowBlocks cannot be decreased\"\n        );\n        _operatorDetails[operator] = newOperatorDetails;\n        emit OperatorDetailsModified(msg.sender, newOperatorDetails);\n    }\n\n    /**\n     * @notice Delegates *from* a `staker` *to* an `operator`.\n     * @param staker The address to delegate *from* -- this address is delegating control of its own assets.\n     * @param operator The address to delegate *to* -- this address is being given power to place the `staker`'s assets at risk on services\n     * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\n     * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\n     * @dev Assumes the following is checked before calling this function:\n     *          1) the `staker` is not already delegated to an operator\n     *          2) the `operator` has indeed registered as an operator in EigenLayer\n     * Ensures that:\n     *          1) if applicable, that the approver signature is valid and non-expired\n     *          2) new delegations are not paused (PAUSED_NEW_DELEGATION)\n     */\n    function _delegate(\n        address staker,\n        address operator,\n        SignatureWithExpiry memory approverSignatureAndExpiry,\n        bytes32 approverSalt\n    ) internal onlyWhenNotPaused(PAUSED_NEW_DELEGATION) {\n        // fetch the operator's `delegationApprover` address and store it in memory in case we need to use it multiple times\n        address _delegationApprover = _operatorDetails[operator].delegationApprover;\n        /**\n         * Check the `_delegationApprover`'s signature, if applicable.\n         * If the `_delegationApprover` is the zero address, then the operator allows all stakers to delegate to them and this verification is skipped.\n         * If the `_delegationApprover` or the `operator` themselves is the caller, then approval is assumed and signature verification is skipped as well.\n         */\n        if (_delegationApprover != address(0) && msg.sender != _delegationApprover && msg.sender != operator) {\n            // check the signature expiry\n            require(\n                approverSignatureAndExpiry.expiry >= block.timestamp,\n                \"DelegationManager._delegate: approver signature expired\"\n            );\n            // check that the salt hasn't been used previously, then mark the salt as spent\n            require(\n                !delegationApproverSaltIsSpent[_delegationApprover][approverSalt],\n                \"DelegationManager._delegate: approverSalt already spent\"\n            );\n            delegationApproverSaltIsSpent[_delegationApprover][approverSalt] = true;\n\n            // calculate the digest hash\n            bytes32 approverDigestHash = calculateDelegationApprovalDigestHash(\n                staker,\n                operator,\n                _delegationApprover,\n                approverSalt,\n                approverSignatureAndExpiry.expiry\n            );\n\n            // actually check that the signature is valid\n            EIP1271SignatureUtils.checkSignature_EIP1271(\n                _delegationApprover,\n                approverDigestHash,\n                approverSignatureAndExpiry.signature\n            );\n        }\n\n        // record the delegation relation between the staker and operator, and emit an event\n        delegatedTo[staker] = operator;\n        emit StakerDelegated(staker, operator);\n\n        (IStrategy[] memory strategies, uint256[] memory shares)\n            = getDelegatableShares(staker);\n\n        for (uint256 i = 0; i < strategies.length;) {\n            _increaseOperatorShares({\n                operator: operator,\n                staker: staker,\n                strategy: strategies[i],\n                shares: shares[i]\n            });\n\n            unchecked { ++i; }\n        }\n    }\n\n    /**\n     * @dev commented-out param (middlewareTimesIndex) is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\n     * This param is intended to be passed on to the Slasher contract, but is unused in the M2 release of these contracts, and is thus commented-out.\n     */\n    function _completeQueuedWithdrawal(\n        Withdrawal calldata withdrawal,\n        IERC20[] calldata tokens,\n        uint256 /*middlewareTimesIndex*/,\n        bool receiveAsTokens\n    ) internal {\n        bytes32 withdrawalRoot = calculateWithdrawalRoot(withdrawal);\n\n        require(\n            pendingWithdrawals[withdrawalRoot], \n            \"DelegationManager._completeQueuedWithdrawal: action is not in queue\"\n        );\n\n        require(\n            withdrawal.startBlock + minWithdrawalDelayBlocks <= block.number, \n            \"DelegationManager._completeQueuedWithdrawal: minWithdrawalDelayBlocks period has not yet passed\"\n        );\n\n        require(\n            msg.sender == withdrawal.withdrawer, \n            \"DelegationManager._completeQueuedWithdrawal: only withdrawer can complete action\"\n        );\n\n        if (receiveAsTokens) {\n            require(\n                tokens.length == withdrawal.strategies.length, \n                \"DelegationManager._completeQueuedWithdrawal: input length mismatch\"\n            );\n        }\n\n        // Remove `withdrawalRoot` from pending roots\n        delete pendingWithdrawals[withdrawalRoot];\n\n        // Finalize action by converting shares to tokens for each strategy, or\n        // by re-awarding shares in each strategy.\n        if (receiveAsTokens) {\n            for (uint256 i = 0; i < withdrawal.strategies.length; ) {\n                require(\n                    withdrawal.startBlock + strategyWithdrawalDelayBlocks[withdrawal.strategies[i]] <= block.number,\n                    \"DelegationManager._completeQueuedWithdrawal: withdrawalDelayBlocks period has not yet passed for this strategy\"\n                );\n\n                _withdrawSharesAsTokens({\n                    staker: withdrawal.staker,\n                    withdrawer: msg.sender,\n                    strategy: withdrawal.strategies[i],\n                    shares: withdrawal.shares[i],\n                    token: tokens[i]\n                });\n                unchecked { ++i; }\n            }\n        // Award shares back in StrategyManager/EigenPodManager. If withdrawer is delegated, increase the shares delegated to the operator\n        } else {\n            address currentOperator = delegatedTo[msg.sender];\n            for (uint256 i = 0; i < withdrawal.strategies.length; ) {\n                require(\n                    withdrawal.startBlock + strategyWithdrawalDelayBlocks[withdrawal.strategies[i]] <= block.number, \n                    \"DelegationManager._completeQueuedWithdrawal: withdrawalDelayBlocks period has not yet passed for this strategy\"\n                );\n\n                /** When awarding podOwnerShares in EigenPodManager, we need to be sure to only give them back to the original podOwner.\n                 * Other strategy shares can + will be awarded to the withdrawer.\n                 */\n                if (withdrawal.strategies[i] == beaconChainETHStrategy) {\n                    address staker = withdrawal.staker;\n                    /**\n                    * Update shares amount depending upon the returned value.\n                    * The return value will be lower than the input value in the case where the staker has an existing share deficit\n                    */\n                    uint256 increaseInDelegateableShares = eigenPodManager.addShares({\n                        podOwner: staker,\n                        shares: withdrawal.shares[i]\n                    });\n                    address podOwnerOperator = delegatedTo[staker];\n                    // Similar to `isDelegated` logic\n                    if (podOwnerOperator != address(0)) {\n                        _increaseOperatorShares({\n                            operator: podOwnerOperator,\n                            // the 'staker' here is the address receiving new shares\n                            staker: staker,\n                            strategy: withdrawal.strategies[i],\n                            shares: increaseInDelegateableShares\n                        });\n                    }\n                } else {\n                    strategyManager.addShares(msg.sender, tokens[i], withdrawal.strategies[i], withdrawal.shares[i]);\n                    // Similar to `isDelegated` logic\n                    if (currentOperator != address(0)) {\n                        _increaseOperatorShares({\n                            operator: currentOperator,\n                            // the 'staker' here is the address receiving new shares\n                            staker: msg.sender,\n                            strategy: withdrawal.strategies[i],\n                            shares: withdrawal.shares[i]\n                        });\n                    }\n                }\n                unchecked { ++i; }\n            }\n        }\n\n        emit WithdrawalCompleted(withdrawalRoot);\n    }\n\n    // @notice Increases `operator`s delegated shares in `strategy` by `shares` and emits an `OperatorSharesIncreased` event\n    function _increaseOperatorShares(address operator, address staker, IStrategy strategy, uint256 shares) internal {\n        operatorShares[operator][strategy] += shares;\n        emit OperatorSharesIncreased(operator, staker, strategy, shares);\n    }\n\n    // @notice Decreases `operator`s delegated shares in `strategy` by `shares` and emits an `OperatorSharesDecreased` event\n    function _decreaseOperatorShares(address operator, address staker, IStrategy strategy, uint256 shares) internal {\n        // This will revert on underflow, so no check needed\n        operatorShares[operator][strategy] -= shares;\n        emit OperatorSharesDecreased(operator, staker, strategy, shares);\n    }\n\n    /**\n     * @notice Removes `shares` in `strategies` from `staker` who is currently delegated to `operator` and queues a withdrawal to the `withdrawer`.\n     * @dev If the `operator` is indeed an operator, then the operator's delegated shares in the `strategies` are also decreased appropriately.\n     * @dev If `withdrawer` is not the same address as `staker`, then thirdPartyTransfersForbidden[strategy] must be set to false in the StrategyManager.\n     */\n    function _removeSharesAndQueueWithdrawal(\n        address staker, \n        address operator,\n        address withdrawer,\n        IStrategy[] memory strategies, \n        uint256[] memory shares\n    ) internal returns (bytes32) {\n        require(staker != address(0), \"DelegationManager._removeSharesAndQueueWithdrawal: staker cannot be zero address\");\n        require(strategies.length != 0, \"DelegationManager._removeSharesAndQueueWithdrawal: strategies cannot be empty\");\n    \n        // Remove shares from staker and operator\n        // Each of these operations fail if we attempt to remove more shares than exist\n        for (uint256 i = 0; i < strategies.length;) {\n            // Similar to `isDelegated` logic\n            if (operator != address(0)) {\n                _decreaseOperatorShares({\n                    operator: operator,\n                    staker: staker,\n                    strategy: strategies[i],\n                    shares: shares[i]\n                });\n            }\n\n            // Remove active shares from EigenPodManager/StrategyManager\n            if (strategies[i] == beaconChainETHStrategy) {\n                /**\n                 * This call will revert if it would reduce the Staker's virtual beacon chain ETH shares below zero.\n                 * This behavior prevents a Staker from queuing a withdrawal which improperly removes excessive\n                 * shares from the operator to whom the staker is delegated.\n                 * It will also revert if the share amount being withdrawn is not a whole Gwei amount.\n                 */\n                eigenPodManager.removeShares(staker, shares[i]);\n            } else {\n                require(\n                    staker == withdrawer || !strategyManager.thirdPartyTransfersForbidden(strategies[i]),\n                    \"DelegationManager._removeSharesAndQueueWithdrawal: withdrawer must be same address as staker if thirdPartyTransfersForbidden are set\"\n                );\n                // this call will revert if `shares[i]` exceeds the Staker's current shares in `strategies[i]`\n                strategyManager.removeShares(staker, strategies[i], shares[i]);\n            }\n\n            unchecked { ++i; }\n        }\n\n        // Create queue entry and increment withdrawal nonce\n        uint256 nonce = cumulativeWithdrawalsQueued[staker];\n        cumulativeWithdrawalsQueued[staker]++;\n\n        Withdrawal memory withdrawal = Withdrawal({\n            staker: staker,\n            delegatedTo: operator,\n            withdrawer: withdrawer,\n            nonce: nonce,\n            startBlock: uint32(block.number),\n            strategies: strategies,\n            shares: shares\n        });\n\n        bytes32 withdrawalRoot = calculateWithdrawalRoot(withdrawal);\n\n        // Place withdrawal in queue\n        pendingWithdrawals[withdrawalRoot] = true;\n\n        emit WithdrawalQueued(withdrawalRoot, withdrawal);\n        return withdrawalRoot;\n    }\n\n    /**\n     * @notice Withdraws `shares` in `strategy` to `withdrawer`. If the shares are virtual beaconChainETH shares, then a call is ultimately forwarded to the\n     * `staker`s EigenPod; otherwise a call is ultimately forwarded to the `strategy` with info on the `token`.\n     */\n    function _withdrawSharesAsTokens(address staker, address withdrawer, IStrategy strategy, uint256 shares, IERC20 token) internal {\n        if (strategy == beaconChainETHStrategy) {\n            eigenPodManager.withdrawSharesAsTokens({\n                podOwner: staker,\n                destination: withdrawer,\n                shares: shares\n            });\n        } else {\n            strategyManager.withdrawSharesAsTokens(withdrawer, strategy, shares, token);\n        }\n    }\n\n    function _setMinWithdrawalDelayBlocks(uint256 _minWithdrawalDelayBlocks) internal {\n        require(\n            _minWithdrawalDelayBlocks <= MAX_WITHDRAWAL_DELAY_BLOCKS,\n            \"DelegationManager._setMinWithdrawalDelayBlocks: _minWithdrawalDelayBlocks cannot be > MAX_WITHDRAWAL_DELAY_BLOCKS\"\n        );\n        emit MinWithdrawalDelayBlocksSet(minWithdrawalDelayBlocks, _minWithdrawalDelayBlocks);\n        minWithdrawalDelayBlocks = _minWithdrawalDelayBlocks;\n    }\n\n    /**\n     * @notice Sets the withdrawal delay blocks for each strategy in `_strategies` to `_withdrawalDelayBlocks`.\n     * gets called when initializing contract or by calling `setStrategyWithdrawalDelayBlocks`\n     */\n    function _setStrategyWithdrawalDelayBlocks(\n        IStrategy[] calldata _strategies,\n        uint256[] calldata _withdrawalDelayBlocks\n    ) internal {\n        require(\n            _strategies.length == _withdrawalDelayBlocks.length,\n            \"DelegationManager._setStrategyWithdrawalDelayBlocks: input length mismatch\"\n        );\n        uint256 numStrats = _strategies.length;\n        for (uint256 i = 0; i < numStrats; ++i) {\n            IStrategy strategy = _strategies[i];\n            uint256 prevStrategyWithdrawalDelayBlocks = strategyWithdrawalDelayBlocks[strategy];\n            uint256 newStrategyWithdrawalDelayBlocks = _withdrawalDelayBlocks[i];\n            require(\n                newStrategyWithdrawalDelayBlocks <= MAX_WITHDRAWAL_DELAY_BLOCKS,\n                \"DelegationManager._setStrategyWithdrawalDelayBlocks: _withdrawalDelayBlocks cannot be > MAX_WITHDRAWAL_DELAY_BLOCKS\"\n            );\n\n            // set the new withdrawal delay blocks\n            strategyWithdrawalDelayBlocks[strategy] = newStrategyWithdrawalDelayBlocks;\n            emit StrategyWithdrawalDelayBlocksSet(\n                strategy,\n                prevStrategyWithdrawalDelayBlocks,\n                newStrategyWithdrawalDelayBlocks\n            );\n        }\n    }\n\n    /*******************************************************************************\n                            VIEW FUNCTIONS\n    *******************************************************************************/\n\n    /**\n     * @notice Getter function for the current EIP-712 domain separator for this contract.\n     *\n     * @dev The domain separator will change in the event of a fork that changes the ChainID.\n     * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\n     * for more detailed information please read EIP-712.\n     */\n    function domainSeparator() public view returns (bytes32) {\n        if (block.chainid == ORIGINAL_CHAIN_ID) {\n            return _DOMAIN_SEPARATOR;\n        } else {\n            return _calculateDomainSeparator();\n        }\n    }\n\n    /**\n     * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\n     */\n    function isDelegated(address staker) public view returns (bool) {\n        return (delegatedTo[staker] != address(0));\n    }\n\n    /**\n     * @notice Returns true is an operator has previously registered for delegation.\n     */\n    function isOperator(address operator) public view returns (bool) {\n        return delegatedTo[operator] == operator;\n    }\n\n    /**\n     * @notice Returns the OperatorDetails struct associated with an `operator`.\n     */\n    function operatorDetails(address operator) external view returns (OperatorDetails memory) {\n        return _operatorDetails[operator];\n    }\n\n    /**\n     * @notice Returns the delegationApprover account for an operator\n     */\n    function delegationApprover(address operator) external view returns (address) {\n        return _operatorDetails[operator].delegationApprover;\n    }\n\n    /**\n     * @notice Returns the stakerOptOutWindowBlocks for an operator\n     */\n    function stakerOptOutWindowBlocks(address operator) external view returns (uint256) {\n        return _operatorDetails[operator].stakerOptOutWindowBlocks;\n    }\n\n    /// @notice Given array of strategies, returns array of shares for the operator\n    function getOperatorShares(\n        address operator,\n        IStrategy[] memory strategies\n    ) public view returns (uint256[] memory) {\n        uint256[] memory shares = new uint256[](strategies.length);\n        for (uint256 i = 0; i < strategies.length; ++i) {\n            shares[i] = operatorShares[operator][strategies[i]];\n        }\n        return shares;\n    }\n\n    /**\n     * @notice Returns the number of actively-delegatable shares a staker has across all strategies.\n     * @dev Returns two empty arrays in the case that the Staker has no actively-delegateable shares.\n     */\n    function getDelegatableShares(address staker) public view returns (IStrategy[] memory, uint256[] memory) {\n        // Get currently active shares and strategies for `staker`\n        int256 podShares = eigenPodManager.podOwnerShares(staker);\n        (IStrategy[] memory strategyManagerStrats, uint256[] memory strategyManagerShares) \n            = strategyManager.getDeposits(staker);\n\n        // Has no shares in EigenPodManager, but potentially some in StrategyManager\n        if (podShares <= 0) {\n            return (strategyManagerStrats, strategyManagerShares);\n        }\n\n        IStrategy[] memory strategies;\n        uint256[] memory shares;\n\n        if (strategyManagerStrats.length == 0) {\n            // Has shares in EigenPodManager, but not in StrategyManager\n            strategies = new IStrategy[](1);\n            shares = new uint256[](1);\n            strategies[0] = beaconChainETHStrategy;\n            shares[0] = uint256(podShares);\n        } else {\n            // Has shares in both\n            \n            // 1. Allocate return arrays\n            strategies = new IStrategy[](strategyManagerStrats.length + 1);\n            shares = new uint256[](strategies.length);\n            \n            // 2. Place StrategyManager strats/shares in return arrays\n            for (uint256 i = 0; i < strategyManagerStrats.length; ) {\n                strategies[i] = strategyManagerStrats[i];\n                shares[i] = strategyManagerShares[i];\n\n                unchecked { ++i; }\n            }\n\n            // 3. Place EigenPodManager strat/shares in return arrays\n            strategies[strategies.length - 1] = beaconChainETHStrategy;\n            shares[strategies.length - 1] = uint256(podShares);\n        }\n\n        return (strategies, shares);\n    }\n\n    /**\n     * @notice Given a list of strategies, return the minimum number of blocks that must pass to withdraw\n     * from all the inputted strategies. Return value is >= minWithdrawalDelayBlocks as this is the global min withdrawal delay.\n     * @param strategies The strategies to check withdrawal delays for\n     */\n    function getWithdrawalDelay(IStrategy[] calldata strategies) public view returns (uint256) {\n        uint256 withdrawalDelay = minWithdrawalDelayBlocks;\n        for (uint256 i = 0; i < strategies.length; ++i) {\n            uint256 currWithdrawalDelay = strategyWithdrawalDelayBlocks[strategies[i]];\n            if (currWithdrawalDelay > withdrawalDelay) {\n                withdrawalDelay = currWithdrawalDelay;\n            }\n        }\n        return withdrawalDelay;\n    }\n\n    /// @notice Returns the keccak256 hash of `withdrawal`.\n    function calculateWithdrawalRoot(Withdrawal memory withdrawal) public pure returns (bytes32) {\n        return keccak256(abi.encode(withdrawal));\n    }\n\n    /**\n     * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\n     * @param staker The signing staker\n     * @param operator The operator who is being delegated to\n     * @param expiry The desired expiry time of the staker's signature\n     */\n    function calculateCurrentStakerDelegationDigestHash(\n        address staker,\n        address operator,\n        uint256 expiry\n    ) external view returns (bytes32) {\n        // fetch the staker's current nonce\n        uint256 currentStakerNonce = stakerNonce[staker];\n        // calculate the digest hash\n        return calculateStakerDelegationDigestHash(staker, currentStakerNonce, operator, expiry);\n    }\n\n    /**\n     * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\n     * @param staker The signing staker\n     * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\n     * @param operator The operator who is being delegated to\n     * @param expiry The desired expiry time of the staker's signature\n     */\n    function calculateStakerDelegationDigestHash(\n        address staker,\n        uint256 _stakerNonce,\n        address operator,\n        uint256 expiry\n    ) public view returns (bytes32) {\n        // calculate the struct hash\n        bytes32 stakerStructHash = keccak256(\n            abi.encode(STAKER_DELEGATION_TYPEHASH, staker, operator, _stakerNonce, expiry)\n        );\n        // calculate the digest hash\n        bytes32 stakerDigestHash = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator(), stakerStructHash));\n        return stakerDigestHash;\n    }\n\n    /**\n     * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\n     * @param staker The account delegating their stake\n     * @param operator The account receiving delegated stake\n     * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\n     * @param approverSalt A unique and single use value associated with the approver signature.\n     * @param expiry Time after which the approver's signature becomes invalid\n     */\n    function calculateDelegationApprovalDigestHash(\n        address staker,\n        address operator,\n        address _delegationApprover,\n        bytes32 approverSalt,\n        uint256 expiry\n    ) public view returns (bytes32) {\n        // calculate the struct hash\n        bytes32 approverStructHash = keccak256(\n            abi.encode(DELEGATION_APPROVAL_TYPEHASH, _delegationApprover, staker, operator, approverSalt, expiry)\n        );\n        // calculate the digest hash\n        bytes32 approverDigestHash = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator(), approverStructHash));\n        return approverDigestHash;\n    }\n\n    /**\n     * @dev Recalculates the domain separator when the chainid changes due to a fork.\n     */\n    function _calculateDomainSeparator() internal view returns (bytes32) {\n        return keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(\"EigenLayer\")), block.chainid, address(this)));\n    }\n}\n\n// lib/eigenlayer-middleware/src/unaudited/ECDSAStakeRegistry.sol\n\n/// @title ECDSA Stake Registry\n/// @dev THIS CONTRACT IS NOT AUDITED\n/// @notice Manages operator registration and quorum updates for an AVS using ECDSA signatures.\ncontract ECDSAStakeRegistry is\n    IERC1271Upgradeable,\n    OwnableUpgradeable,\n    ECDSAStakeRegistryStorage\n{\n    using SignatureCheckerUpgradeable for address;\n    using CheckpointsUpgradeable for CheckpointsUpgradeable.History;\n\n    /// @dev Constructor to create ECDSAStakeRegistry.\n    /// @param _delegationManager Address of the DelegationManager contract that this registry interacts with.\n    constructor(\n        IDelegationManager _delegationManager\n    ) ECDSAStakeRegistryStorage(_delegationManager) {\n        // _disableInitializers();\n    }\n\n    /// @notice Initializes the contract with the given parameters.\n    /// @param _serviceManager The address of the service manager.\n    /// @param _thresholdWeight The threshold weight in basis points.\n    /// @param _quorum The quorum struct containing the details of the quorum thresholds.\n    function initialize(\n        address _serviceManager,\n        uint256 _thresholdWeight,\n        Quorum memory _quorum\n    ) external initializer {\n        __ECDSAStakeRegistry_init(_serviceManager, _thresholdWeight, _quorum);\n    }\n\n    /// @notice Registers a new operator using a provided signature and signing key\n    /// @param _operatorSignature Contains the operator's signature, salt, and expiry\n    /// @param _signingKey The signing key to add to the operator's history\n    function registerOperatorWithSignature(\n        ISignatureUtils.SignatureWithSaltAndExpiry memory _operatorSignature,\n        address _signingKey\n    ) external {\n        _registerOperatorWithSig(msg.sender, _operatorSignature, _signingKey);\n    }\n\n    /// @notice Deregisters an existing operator\n    function deregisterOperator() external {\n        _deregisterOperator(msg.sender);\n    }\n\n    /**\n     * @notice Updates the signing key for an operator\n     * @dev Only callable by the operator themselves\n     * @param _newSigningKey The new signing key to set for the operator\n     */\n    function updateOperatorSigningKey(address _newSigningKey) external {\n        if (!_operatorRegistered[msg.sender]) {\n            revert OperatorNotRegistered();\n        }\n        _updateOperatorSigningKey(msg.sender, _newSigningKey);\n    }\n\n    /**\n     * @notice Updates the StakeRegistry's view of one or more operators' stakes adding a new entry in their history of stake checkpoints,\n     * @dev Queries stakes from the Eigenlayer core DelegationManager contract\n     * @param _operators A list of operator addresses to update\n     */\n    function updateOperators(address[] memory _operators) external {\n        _updateOperators(_operators);\n    }\n\n    /**\n     * @notice Updates the quorum configuration and the set of operators\n     * @dev Only callable by the contract owner.\n     * It first updates the quorum configuration and then updates the list of operators.\n     * @param _quorum The new quorum configuration, including strategies and their new weights\n     * @param _operators The list of operator addresses to update stakes for\n     */\n    function updateQuorumConfig(\n        Quorum memory _quorum,\n        address[] memory _operators\n    ) external onlyOwner {\n        _updateQuorumConfig(_quorum);\n        _updateOperators(_operators);\n    }\n\n    /// @notice Updates the weight an operator must have to join the operator set\n    /// @dev Access controlled to the contract owner\n    /// @param _newMinimumWeight The new weight an operator must have to join the operator set\n    function updateMinimumWeight(\n        uint256 _newMinimumWeight,\n        address[] memory _operators\n    ) external onlyOwner {\n        _updateMinimumWeight(_newMinimumWeight);\n        _updateOperators(_operators);\n    }\n\n    /**\n     * @notice Sets a new cumulative threshold weight for message validation by operator set signatures.\n     * @dev This function can only be invoked by the owner of the contract. It delegates the update to\n     * an internal function `_updateStakeThreshold`.\n     * @param _thresholdWeight The updated threshold weight required to validate a message. This is the\n     * cumulative weight that must be met or exceeded by the sum of the stakes of the signatories for\n     * a message to be deemed valid.\n     */\n    function updateStakeThreshold(uint256 _thresholdWeight) external onlyOwner {\n        _updateStakeThreshold(_thresholdWeight);\n    }\n\n    /// @notice Verifies if the provided signature data is valid for the given data hash.\n    /// @param _dataHash The hash of the data that was signed.\n    /// @param _signatureData Encoded signature data consisting of an array of operators, an array of signatures, and a reference block number.\n    /// @return The function selector that indicates the signature is valid according to ERC1271 standard.\n    function isValidSignature(\n        bytes32 _dataHash,\n        bytes memory _signatureData\n    ) external view returns (bytes4) {\n        (\n            address[] memory operators,\n            bytes[] memory signatures,\n            uint32 referenceBlock\n        ) = abi.decode(_signatureData, (address[], bytes[], uint32));\n        _checkSignatures(_dataHash, operators, signatures, referenceBlock);\n        return IERC1271Upgradeable.isValidSignature.selector;\n    }\n\n    /// @notice Retrieves the current stake quorum details.\n    /// @return Quorum - The current quorum of strategies and weights\n    function quorum() external view returns (Quorum memory) {\n        return _quorum;\n    }\n\n    /**\n     * @notice Retrieves the latest signing key for a given operator.\n     * @param _operator The address of the operator.\n     * @return The latest signing key of the operator.\n     */\n    function getLastestOperatorSigningKey(\n        address _operator\n    ) external view returns (address) {\n        return address(uint160(_operatorSigningKeyHistory[_operator].latest()));\n    }\n\n    /**\n     * @notice Retrieves the latest signing key for a given operator at a specific block number.\n     * @param _operator The address of the operator.\n     * @param _blockNumber The block number to get the operator's signing key.\n     * @return The signing key of the operator at the given block.\n     */\n    function getOperatorSigningKeyAtBlock(\n        address _operator,\n        uint256 _blockNumber\n    ) external view returns (address) {\n        return\n            address(\n                uint160(\n                    _operatorSigningKeyHistory[_operator].getAtBlock(\n                        _blockNumber\n                    )\n                )\n            );\n    }\n\n    /// @notice Retrieves the last recorded weight for a given operator.\n    /// @param _operator The address of the operator.\n    /// @return uint256 - The latest weight of the operator.\n    function getLastCheckpointOperatorWeight(\n        address _operator\n    ) external view returns (uint256) {\n        return _operatorWeightHistory[_operator].latest();\n    }\n\n    /// @notice Retrieves the last recorded total weight across all operators.\n    /// @return uint256 - The latest total weight.\n    function getLastCheckpointTotalWeight() external view returns (uint256) {\n        return _totalWeightHistory.latest();\n    }\n\n    /// @notice Retrieves the last recorded threshold weight\n    /// @return uint256 - The latest threshold weight.\n    function getLastCheckpointThresholdWeight()\n        external\n        view\n        returns (uint256)\n    {\n        return _thresholdWeightHistory.latest();\n    }\n\n    /// @notice Retrieves the operator's weight at a specific block number.\n    /// @param _operator The address of the operator.\n    /// @param _blockNumber The block number to get the operator weight for the quorum\n    /// @return uint256 - The weight of the operator at the given block.\n    function getOperatorWeightAtBlock(\n        address _operator,\n        uint32 _blockNumber\n    ) external view returns (uint256) {\n        return _operatorWeightHistory[_operator].getAtBlock(_blockNumber);\n    }\n\n    /// @notice Retrieves the total weight at a specific block number.\n    /// @param _blockNumber The block number to get the total weight for the quorum\n    /// @return uint256 - The total weight at the given block.\n    function getLastCheckpointTotalWeightAtBlock(\n        uint32 _blockNumber\n    ) external view returns (uint256) {\n        return _totalWeightHistory.getAtBlock(_blockNumber);\n    }\n\n    /// @notice Retrieves the threshold weight at a specific block number.\n    /// @param _blockNumber The block number to get the threshold weight for the quorum\n    /// @return uint256 - The threshold weight the given block.\n    function getLastCheckpointThresholdWeightAtBlock(\n        uint32 _blockNumber\n    ) external view returns (uint256) {\n        return _thresholdWeightHistory.getAtBlock(_blockNumber);\n    }\n\n    function operatorRegistered(\n        address _operator\n    ) external view returns (bool) {\n        return _operatorRegistered[_operator];\n    }\n\n    /// @notice Returns the weight an operator must have to contribute to validating an AVS\n    function minimumWeight() external view returns (uint256) {\n        return _minimumWeight;\n    }\n\n    /// @notice Calculates the current weight of an operator based on their delegated stake in the strategies considered in the quorum\n    /// @param _operator The address of the operator.\n    /// @return uint256 - The current weight of the operator; returns 0 if below the threshold.\n    function getOperatorWeight(\n        address _operator\n    ) public view returns (uint256) {\n        StrategyParams[] memory strategyParams = _quorum.strategies;\n        uint256 weight;\n        IStrategy[] memory strategies = new IStrategy[](strategyParams.length);\n        for (uint256 i; i < strategyParams.length; i++) {\n            strategies[i] = strategyParams[i].strategy;\n        }\n        uint256[] memory shares = DELEGATION_MANAGER.getOperatorShares(\n            _operator,\n            strategies\n        );\n        for (uint256 i; i < strategyParams.length; i++) {\n            weight += shares[i] * strategyParams[i].multiplier;\n        }\n        weight = weight / BPS;\n\n        if (weight >= _minimumWeight) {\n            return weight;\n        } else {\n            return 0;\n        }\n    }\n\n    /// @notice Initializes state for the StakeRegistry\n    /// @param _serviceManagerAddr The AVS' ServiceManager contract's address\n    function __ECDSAStakeRegistry_init(\n        address _serviceManagerAddr,\n        uint256 _thresholdWeight,\n        Quorum memory _quorum\n    ) internal onlyInitializing {\n        _serviceManager = _serviceManagerAddr;\n        _updateStakeThreshold(_thresholdWeight);\n        _updateQuorumConfig(_quorum);\n        __Ownable_init();\n    }\n\n    /// @notice Updates the set of operators for the first quorum.\n    /// @param operatorsPerQuorum An array of operator address arrays, one for each quorum.\n    /// @dev This interface maintains compatibility with avs-sync which handles multiquorums while this registry has a single quorum\n    function updateOperatorsForQuorum(\n        address[][] memory operatorsPerQuorum,\n        bytes memory\n    ) external {\n        _updateAllOperators(operatorsPerQuorum[0]);\n    }\n\n    /// @dev Updates the list of operators if the provided list has the correct number of operators.\n    /// Reverts if the provided list of operators does not match the expected total count of operators.\n    /// @param _operators The list of operator addresses to update.\n    function _updateAllOperators(address[] memory _operators) internal {\n        if (_operators.length != _totalOperators) {\n            revert MustUpdateAllOperators();\n        }\n        _updateOperators(_operators);\n    }\n\n    /// @dev Updates the weights for a given list of operator addresses.\n    /// When passing an operator that isn't registered, then 0 is added to their history\n    /// @param _operators An array of addresses for which to update the weights.\n    function _updateOperators(address[] memory _operators) internal {\n        int256 delta;\n        for (uint256 i; i < _operators.length; i++) {\n            delta += _updateOperatorWeight(_operators[i]);\n        }\n        _updateTotalWeight(delta);\n    }\n\n    /// @dev Updates the stake threshold weight and records the history.\n    /// @param _thresholdWeight The new threshold weight to set and record in the history.\n    function _updateStakeThreshold(uint256 _thresholdWeight) internal {\n        _thresholdWeightHistory.push(_thresholdWeight);\n        emit ThresholdWeightUpdated(_thresholdWeight);\n    }\n\n    /// @dev Updates the weight an operator must have to join the operator set\n    /// @param _newMinimumWeight The new weight an operator must have to join the operator set\n    function _updateMinimumWeight(uint256 _newMinimumWeight) internal {\n        uint256 oldMinimumWeight = _minimumWeight;\n        _minimumWeight = _newMinimumWeight;\n        emit MinimumWeightUpdated(oldMinimumWeight, _newMinimumWeight);\n    }\n\n    /// @notice Updates the quorum configuration\n    /// @dev Replaces the current quorum configuration with `_newQuorum` if valid.\n    /// Reverts with `InvalidQuorum` if the new quorum configuration is not valid.\n    /// Emits `QuorumUpdated` event with the old and new quorum configurations.\n    /// @param _newQuorum The new quorum configuration to set.\n    function _updateQuorumConfig(Quorum memory _newQuorum) internal {\n        if (!_isValidQuorum(_newQuorum)) {\n            revert InvalidQuorum();\n        }\n        Quorum memory oldQuorum = _quorum;\n        delete _quorum;\n        for (uint256 i; i < _newQuorum.strategies.length; i++) {\n            _quorum.strategies.push(_newQuorum.strategies[i]);\n        }\n        emit QuorumUpdated(oldQuorum, _newQuorum);\n    }\n\n    /// @dev Internal function to deregister an operator\n    /// @param _operator The operator's address to deregister\n    function _deregisterOperator(address _operator) internal {\n        if (!_operatorRegistered[_operator]) {\n            revert OperatorNotRegistered();\n        }\n        _totalOperators--;\n        delete _operatorRegistered[_operator];\n        int256 delta = _updateOperatorWeight(_operator);\n        _updateTotalWeight(delta);\n        IServiceManager(_serviceManager).deregisterOperatorFromAVS(_operator);\n        emit OperatorDeregistered(_operator, address(_serviceManager));\n    }\n\n    /// @dev registers an operator through a provided signature\n    /// @param _operatorSignature Contains the operator's signature, salt, and expiry\n    /// @param _signingKey The signing key to add to the operator's history\n    function _registerOperatorWithSig(\n        address _operator,\n        ISignatureUtils.SignatureWithSaltAndExpiry memory _operatorSignature,\n        address _signingKey\n    ) internal virtual {\n        if (_operatorRegistered[_operator]) {\n            revert OperatorAlreadyRegistered();\n        }\n        _totalOperators++;\n        _operatorRegistered[_operator] = true;\n        int256 delta = _updateOperatorWeight(_operator);\n        _updateTotalWeight(delta);\n        _updateOperatorSigningKey(_operator, _signingKey);\n        IServiceManager(_serviceManager).registerOperatorToAVS(\n            _operator,\n            _operatorSignature\n        );\n        emit OperatorRegistered(_operator, _serviceManager);\n    }\n\n    /// @dev Internal function to update an operator's signing key\n    /// @param _operator The address of the operator to update the signing key for\n    /// @param _newSigningKey The new signing key to set for the operator\n    function _updateOperatorSigningKey(\n        address _operator,\n        address _newSigningKey\n    ) internal {\n        address oldSigningKey = address(\n            uint160(_operatorSigningKeyHistory[_operator].latest())\n        );\n        if (_newSigningKey == oldSigningKey) {\n            return;\n        }\n        _operatorSigningKeyHistory[_operator].push(uint160(_newSigningKey));\n        emit SigningKeyUpdate(\n            _operator,\n            block.number,\n            _newSigningKey,\n            oldSigningKey\n        );\n    }\n\n    /// @notice Updates the weight of an operator and returns the previous and current weights.\n    /// @param _operator The address of the operator to update the weight of.\n    function _updateOperatorWeight(\n        address _operator\n    ) internal virtual returns (int256) {\n        int256 delta;\n        uint256 newWeight;\n        uint256 oldWeight = _operatorWeightHistory[_operator].latest();\n        if (!_operatorRegistered[_operator]) {\n            delta -= int256(oldWeight);\n            if (delta == 0) {\n                return delta;\n            }\n            _operatorWeightHistory[_operator].push(0);\n        } else {\n            newWeight = getOperatorWeight(_operator);\n            delta = int256(newWeight) - int256(oldWeight);\n            if (delta == 0) {\n                return delta;\n            }\n            _operatorWeightHistory[_operator].push(newWeight);\n        }\n        emit OperatorWeightUpdated(_operator, oldWeight, newWeight);\n        return delta;\n    }\n\n    /// @dev Internal function to update the total weight of the stake\n    /// @param delta The change in stake applied last total weight\n    /// @return oldTotalWeight The weight before the update\n    /// @return newTotalWeight The updated weight after applying the delta\n    function _updateTotalWeight(\n        int256 delta\n    ) internal returns (uint256 oldTotalWeight, uint256 newTotalWeight) {\n        oldTotalWeight = _totalWeightHistory.latest();\n        int256 newWeight = int256(oldTotalWeight) + delta;\n        newTotalWeight = uint256(newWeight);\n        _totalWeightHistory.push(newTotalWeight);\n        emit TotalWeightUpdated(oldTotalWeight, newTotalWeight);\n    }\n\n    /**\n     * @dev Verifies that a specified quorum configuration is valid. A valid quorum has:\n     *      1. Weights that sum to exactly 10,000 basis points, ensuring proportional representation.\n     *      2. Unique strategies without duplicates to maintain quorum integrity.\n     * @param _quorum The quorum configuration to be validated.\n     * @return bool True if the quorum configuration is valid, otherwise false.\n     */\n    function _isValidQuorum(\n        Quorum memory _quorum\n    ) internal pure returns (bool) {\n        StrategyParams[] memory strategies = _quorum.strategies;\n        address lastStrategy;\n        address currentStrategy;\n        uint256 totalMultiplier;\n        for (uint256 i; i < strategies.length; i++) {\n            currentStrategy = address(strategies[i].strategy);\n            if (lastStrategy >= currentStrategy) revert NotSorted();\n            lastStrategy = currentStrategy;\n            totalMultiplier += strategies[i].multiplier;\n        }\n        if (totalMultiplier != BPS) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @notice Common logic to verify a batch of ECDSA signatures against a hash, using either last stake weight or at a specific block.\n     * @param _dataHash The hash of the data the signers endorsed.\n     * @param _operators A collection of addresses that endorsed the data hash.\n     * @param _signatures A collection of signatures matching the signers.\n     * @param _referenceBlock The block number for evaluating stake weight; use max uint32 for latest weight.\n     */\n    function _checkSignatures(\n        bytes32 _dataHash,\n        address[] memory _operators,\n        bytes[] memory _signatures,\n        uint32 _referenceBlock\n    ) internal view {\n        uint256 signersLength = _operators.length;\n        address currentOperator;\n        address lastOperator;\n        address signer;\n        uint256 signedWeight;\n\n        _validateSignaturesLength(signersLength, _signatures.length);\n        for (uint256 i; i < signersLength; i++) {\n            currentOperator = _operators[i];\n            signer = _getOperatorSigningKey(currentOperator, _referenceBlock);\n\n            _validateSortedSigners(lastOperator, currentOperator);\n            _validateSignature(signer, _dataHash, _signatures[i]);\n\n            lastOperator = currentOperator;\n            uint256 operatorWeight = _getOperatorWeight(\n                currentOperator,\n                _referenceBlock\n            );\n            signedWeight += operatorWeight;\n        }\n\n        _validateThresholdStake(signedWeight, _referenceBlock);\n    }\n\n    /// @notice Validates that the number of signers equals the number of signatures, and neither is zero.\n    /// @param _signersLength The number of signers.\n    /// @param _signaturesLength The number of signatures.\n    function _validateSignaturesLength(\n        uint256 _signersLength,\n        uint256 _signaturesLength\n    ) internal pure {\n        if (_signersLength != _signaturesLength) {\n            revert LengthMismatch();\n        }\n        if (_signersLength == 0) {\n            revert InvalidLength();\n        }\n    }\n\n    /// @notice Ensures that signers are sorted in ascending order by address.\n    /// @param _lastSigner The address of the last signer.\n    /// @param _currentSigner The address of the current signer.\n    function _validateSortedSigners(\n        address _lastSigner,\n        address _currentSigner\n    ) internal pure {\n        if (_lastSigner >= _currentSigner) {\n            revert NotSorted();\n        }\n    }\n\n    /// @notice Validates a given signature against the signer's address and data hash.\n    /// @param _signer The address of the signer to validate.\n    /// @param _dataHash The hash of the data that is signed.\n    /// @param _signature The signature to validate.\n    function _validateSignature(\n        address _signer,\n        bytes32 _dataHash,\n        bytes memory _signature\n    ) internal view {\n        if (!_signer.isValidSignatureNow(_dataHash, _signature)) {\n            revert InvalidSignature();\n        }\n    }\n\n    /// @notice Retrieves the operator weight for a signer, either at the last checkpoint or a specified block.\n    /// @param _operator The operator to query their signing key history for\n    /// @param _referenceBlock The block number to query the operator's weight at, or the maximum uint32 value for the last checkpoint.\n    /// @return The weight of the operator.\n    function _getOperatorSigningKey(\n        address _operator,\n        uint32 _referenceBlock\n    ) internal view returns (address) {\n        if (_referenceBlock >= block.number) {\n            revert InvalidReferenceBlock();\n        }\n        return\n            address(\n                uint160(\n                    _operatorSigningKeyHistory[_operator].getAtBlock(\n                        _referenceBlock\n                    )\n                )\n            );\n    }\n\n    /// @notice Retrieves the operator weight for a signer, either at the last checkpoint or a specified block.\n    /// @param _signer The address of the signer whose weight is returned.\n    /// @param _referenceBlock The block number to query the operator's weight at, or the maximum uint32 value for the last checkpoint.\n    /// @return The weight of the operator.\n    function _getOperatorWeight(\n        address _signer,\n        uint32 _referenceBlock\n    ) internal view returns (uint256) {\n        if (_referenceBlock >= block.number) {\n            revert InvalidReferenceBlock();\n        }\n        return _operatorWeightHistory[_signer].getAtBlock(_referenceBlock);\n    }\n\n    /// @notice Retrieve the total stake weight at a specific block or the latest if not specified.\n    /// @dev If the `_referenceBlock` is the maximum value for uint32, the latest total weight is returned.\n    /// @param _referenceBlock The block number to retrieve the total stake weight from.\n    /// @return The total stake weight at the given block or the latest if the given block is the max uint32 value.\n    function _getTotalWeight(\n        uint32 _referenceBlock\n    ) internal view returns (uint256) {\n        if (_referenceBlock >= block.number) {\n            revert InvalidReferenceBlock();\n        }\n        return _totalWeightHistory.getAtBlock(_referenceBlock);\n    }\n\n    /// @notice Retrieves the threshold stake for a given reference block.\n    /// @param _referenceBlock The block number to query the threshold stake for.\n    /// If set to the maximum uint32 value, it retrieves the latest threshold stake.\n    /// @return The threshold stake in basis points for the reference block.\n    function _getThresholdStake(\n        uint32 _referenceBlock\n    ) internal view returns (uint256) {\n        if (_referenceBlock >= block.number) {\n            revert InvalidReferenceBlock();\n        }\n        return _thresholdWeightHistory.getAtBlock(_referenceBlock);\n    }\n\n    /// @notice Validates that the cumulative stake of signed messages meets or exceeds the required threshold.\n    /// @param _signedWeight The cumulative weight of the signers that have signed the message.\n    /// @param _referenceBlock The block number to verify the stake threshold for\n    function _validateThresholdStake(\n        uint256 _signedWeight,\n        uint32 _referenceBlock\n    ) internal view {\n        uint256 totalWeight = _getTotalWeight(_referenceBlock);\n        if (_signedWeight > totalWeight) {\n            revert InvalidSignedWeight();\n        }\n        uint256 thresholdStake = _getThresholdStake(_referenceBlock);\n        if (thresholdStake > _signedWeight) {\n            revert InsufficientSignedStake();\n        }\n    }\n}\n\n// lib/eigenlayer-middleware/src/unaudited/ECDSAServiceManagerBase.sol\n\nabstract contract ECDSAServiceManagerBase is IServiceManager, OwnableUpgradeable {\n    /// @notice Address of the stake registry contract, which manages registration and stake recording.\n    address public immutable stakeRegistry;\n\n    /// @notice Address of the AVS directory contract, which manages AVS-related data for registered operators.\n    address public immutable avsDirectory;\n\n    /// @notice Address of the rewards coordinator contract, which handles rewards distributions.\n    address internal immutable rewardsCoordinator;\n\n    /// @notice Address of the delegation manager contract, which manages staker delegations to operators.\n    address internal immutable delegationManager;\n\n    /// @notice Address of the rewards initiator, which is allowed to create AVS rewards submissions.\n    address public rewardsInitiator;\n\n    /**\n     * @dev Ensures that the function is only callable by the `stakeRegistry` contract.\n     * This is used to restrict certain registration and deregistration functionality to the `stakeRegistry`\n     */\n    modifier onlyStakeRegistry() {\n        require(\n            msg.sender == stakeRegistry,\n            \"ECDSAServiceManagerBase.onlyStakeRegistry: caller is not the stakeRegistry\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Ensures that the function is only callable by the `rewardsInitiator`.\n     */\n    modifier onlyRewardsInitiator() {\n        _checkRewardsInitiator();\n        _;\n    }\n\n    function _checkRewardsInitiator() internal view {\n        require(\n            msg.sender == rewardsInitiator,\n            \"ECDSAServiceManagerBase.onlyRewardsInitiator: caller is not the rewards initiator\"\n        );\n    }\n\n    /**\n     * @dev Constructor for ECDSAServiceManagerBase, initializing immutable contract addresses and disabling initializers.\n     * @param _avsDirectory The address of the AVS directory contract, managing AVS-related data for registered operators.\n     * @param _stakeRegistry The address of the stake registry contract, managing registration and stake recording.\n     * @param _rewardsCoordinator The address of the rewards coordinator contract, handling rewards distributions.\n     * @param _delegationManager The address of the delegation manager contract, managing staker delegations to operators.\n     */\n    constructor(\n        address _avsDirectory,\n        address _stakeRegistry,\n        address _rewardsCoordinator,\n        address _delegationManager\n    ) {\n        avsDirectory = _avsDirectory;\n        stakeRegistry = _stakeRegistry;\n        rewardsCoordinator = _rewardsCoordinator;\n        delegationManager = _delegationManager;\n        _disableInitializers();\n    }\n\n    /**\n     * @dev Initializes the base service manager by transferring ownership to the initial owner.\n     * @param initialOwner The address to which the ownership of the contract will be transferred.\n     * @param _rewardsInitiator The address which is allowed to create AVS rewards submissions.\n     */\n    function __ServiceManagerBase_init(\n        address initialOwner,\n        address _rewardsInitiator\n    ) internal virtual onlyInitializing {\n        _transferOwnership(initialOwner);\n        _setRewardsInitiator(_rewardsInitiator);\n    }\n\n    /// @inheritdoc IServiceManagerUI\n    function updateAVSMetadataURI(\n        string memory _metadataURI\n    ) external virtual onlyOwner {\n        _updateAVSMetadataURI(_metadataURI);\n    }\n\n    /// @inheritdoc IServiceManager\n    function createAVSRewardsSubmission(\n        IRewardsCoordinator.RewardsSubmission[] calldata rewardsSubmissions\n    ) external virtual onlyRewardsInitiator {\n        _createAVSRewardsSubmission(rewardsSubmissions);\n    }\n\n    /// @inheritdoc IServiceManagerUI\n    function registerOperatorToAVS(\n        address operator,\n        ISignatureUtils.SignatureWithSaltAndExpiry memory operatorSignature\n    ) external virtual onlyStakeRegistry {\n        _registerOperatorToAVS(operator, operatorSignature);\n    }\n\n    /// @inheritdoc IServiceManagerUI\n    function deregisterOperatorFromAVS(\n        address operator\n    ) external virtual onlyStakeRegistry {\n        _deregisterOperatorFromAVS(operator);\n    }\n\n    /// @inheritdoc IServiceManagerUI\n    function getRestakeableStrategies()\n        external\n        view\n        virtual\n        returns (address[] memory)\n    {\n        return _getRestakeableStrategies();\n    }\n\n    /// @inheritdoc IServiceManagerUI\n    function getOperatorRestakedStrategies(\n        address _operator\n    ) external view virtual returns (address[] memory) {\n        return _getOperatorRestakedStrategies(_operator);\n    }\n\n    /**\n     * @notice Forwards the call to update AVS metadata URI in the AVSDirectory contract.\n     * @dev This internal function is a proxy to the `updateAVSMetadataURI` function of the AVSDirectory contract.\n     * @param _metadataURI The new metadata URI to be set.\n     */\n    function _updateAVSMetadataURI(\n        string memory _metadataURI\n    ) internal virtual {\n        IAVSDirectory(avsDirectory).updateAVSMetadataURI(_metadataURI);\n    }\n\n    /**\n     * @notice Forwards the call to register an operator in the AVSDirectory contract.\n     * @dev This internal function is a proxy to the `registerOperatorToAVS` function of the AVSDirectory contract.\n     * @param operator The address of the operator to register.\n     * @param operatorSignature The signature, salt, and expiry details of the operator's registration.\n     */\n    function _registerOperatorToAVS(\n        address operator,\n        ISignatureUtils.SignatureWithSaltAndExpiry memory operatorSignature\n    ) internal virtual {\n        IAVSDirectory(avsDirectory).registerOperatorToAVS(\n            operator,\n            operatorSignature\n        );\n    }\n\n    /**\n     * @notice Forwards the call to deregister an operator from the AVSDirectory contract.\n     * @dev This internal function is a proxy to the `deregisterOperatorFromAVS` function of the AVSDirectory contract.\n     * @param operator The address of the operator to deregister.\n     */\n    function _deregisterOperatorFromAVS(address operator) internal virtual {\n        IAVSDirectory(avsDirectory).deregisterOperatorFromAVS(operator);\n    }\n\n    /**\n     * @notice Processes a batch of rewards submissions by transferring the specified amounts from the sender to this contract and then approving the RewardsCoordinator to use these amounts.\n     * @dev This function handles the transfer and approval of tokens necessary for rewards submissions. It then delegates the actual rewards logic to the RewardsCoordinator contract.\n     * @param rewardsSubmissions An array of `RewardsSubmission` structs, each representing rewards for a specific range.\n     */\n    function _createAVSRewardsSubmission(\n        IRewardsCoordinator.RewardsSubmission[] calldata rewardsSubmissions\n    ) internal virtual {\n        for (uint256 i = 0; i < rewardsSubmissions.length; ++i) {\n            rewardsSubmissions[i].token.transferFrom(\n                msg.sender,\n                address(this),\n                rewardsSubmissions[i].amount\n            );\n            uint256 allowance =\n                rewardsSubmissions[i].token.allowance(address(this), rewardsCoordinator);\n            rewardsSubmissions[i].token.approve(\n                rewardsCoordinator,\n                rewardsSubmissions[i].amount + allowance\n            );\n        }\n\n        IRewardsCoordinator(rewardsCoordinator).createAVSRewardsSubmission(rewardsSubmissions);\n    }\n\n    /**\n     * @notice Retrieves the addresses of all strategies that are part of the current quorum.\n     * @dev Fetches the quorum configuration from the ECDSAStakeRegistry and extracts the strategy addresses.\n     * @return strategies An array of addresses representing the strategies in the current quorum.\n     */\n    function _getRestakeableStrategies()\n        internal\n        view\n        virtual\n        returns (address[] memory)\n    {\n        Quorum memory quorum = ECDSAStakeRegistry(stakeRegistry).quorum();\n        address[] memory strategies = new address[](quorum.strategies.length);\n        for (uint256 i = 0; i < quorum.strategies.length; i++) {\n            strategies[i] = address(quorum.strategies[i].strategy);\n        }\n        return strategies;\n    }\n\n    /**\n     * @notice Retrieves the addresses of strategies where the operator has restaked.\n     * @dev This function fetches the quorum details from the ECDSAStakeRegistry, retrieves the operator's shares for each strategy,\n     * and filters out strategies with non-zero shares indicating active restaking by the operator.\n     * @param _operator The address of the operator whose restaked strategies are to be retrieved.\n     * @return restakedStrategies An array of addresses of strategies where the operator has active restakes.\n     */\n    function _getOperatorRestakedStrategies(\n        address _operator\n    ) internal view virtual returns (address[] memory) {\n        Quorum memory quorum = ECDSAStakeRegistry(stakeRegistry).quorum();\n        uint256 count = quorum.strategies.length;\n        IStrategy[] memory strategies = new IStrategy[](count);\n        for (uint256 i; i < count; i++) {\n            strategies[i] = quorum.strategies[i].strategy;\n        }\n        uint256[] memory shares = IDelegationManager(delegationManager)\n            .getOperatorShares(_operator, strategies);\n\n        address[] memory activeStrategies = new address[](count);\n        uint256 activeCount;\n        for (uint256 i; i < count; i++) {\n            if (shares[i] > 0) {\n                activeCount++;\n            }\n        }\n\n        // Resize the array to fit only the active strategies\n        address[] memory restakedStrategies = new address[](activeCount);\n        for (uint256 j = 0; j < count; j++) {\n            if (shares[j] > 0) {\n                restakedStrategies[j] = activeStrategies[j];\n            }\n        }\n\n        return restakedStrategies;\n    }\n\n    /**\n     * @notice Sets the rewards initiator address.\n     * @param newRewardsInitiator The new rewards initiator address.\n     * @dev Only callable by the owner.\n     */\n    function setRewardsInitiator(address newRewardsInitiator) external onlyOwner {\n        _setRewardsInitiator(newRewardsInitiator);\n    }\n\n    function _setRewardsInitiator(address newRewardsInitiator) internal {\n        emit RewardsInitiatorUpdated(rewardsInitiator, newRewardsInitiator);\n        rewardsInitiator = newRewardsInitiator;\n    }\n\n    // storage gap for upgradeability\n    // slither-disable-next-line shadowing-state\n    uint256[49] private __GAP;\n}\n\n// src/templates/HelloWorldTemplate.sol\n\n/**\n * @title Primary entrypoint for procuring services from HelloWorld.\n * @author Eigen Labs, Inc.\n */\ncontract HelloWorldTemplate is ECDSAServiceManagerBase, OperatorAllowlist {\n    using BytesLib for bytes;\n    using ECDSAUpgradeable for bytes32;\n\n    // EVENTS\n    event NewTaskCreated(uint32 indexed taskIndex, Task task);\n\n    event TaskResponded(uint32 indexed taskIndex, Task task, address operator);\n\n    // STRUCTS\n    struct Task {\n        string name;\n        uint32 taskCreatedBlock;\n    }\n\n    /* STORAGE */\n    // The latest task index\n    uint32 public latestTaskNum;\n\n    // mapping of task indices to all tasks hashes\n    // when a task is created, task hash is stored here,\n    // and responses need to pass the actual task,\n    // which is hashed onchain and checked against this mapping\n    mapping(uint32 => bytes32) public allTaskHashes;\n\n    // mapping of task indices to hash of abi.encode(taskResponse, taskResponseMetadata)\n    mapping(address => mapping(uint32 => bytes)) public allTaskResponses;\n\n    /* MODIFIERS */\n    modifier onlyOperator() {\n        require(ECDSAStakeRegistry(stakeRegistry).operatorRegistered(msg.sender), \"Operator must be the caller\");\n        _;\n    }\n\n    constructor(address _avsDirectory, address _stakeRegistry, address _delegationManager)\n        ECDSAServiceManagerBase(\n            _avsDirectory,\n            _stakeRegistry,\n            address(0), // hello-world doesn't need to deal with payments\n            _delegationManager\n        )\n    {}\n\n    function initialize(address initialOwner_, address rewardsInitiator_, address allowlistManager_)\n        external\n        initializer\n    {\n        __ServiceManagerBase_init(initialOwner_, rewardsInitiator_);\n        __OperatorAllowlist_init(allowlistManager_, true);\n    }\n\n    /* FUNCTIONS */\n    // NOTE: this function creates new task, assigns it a taskId\n    function createNewTask(string memory name) external {\n        // create a new task struct\n        Task memory newTask;\n        newTask.name = name;\n        newTask.taskCreatedBlock = uint32(block.number);\n\n        // store hash of task onchain, emit event, and increase taskNum\n        allTaskHashes[latestTaskNum] = keccak256(abi.encode(newTask));\n        emit NewTaskCreated(latestTaskNum, newTask);\n        latestTaskNum = latestTaskNum + 1;\n    }\n\n    // NOTE: this function responds to existing tasks.\n    function respondToTask(Task calldata task, uint32 referenceTaskIndex, bytes calldata signature)\n        external\n        onlyOperator\n    {\n        require(operatorHasMinimumWeight(msg.sender), \"Operator does not have match the weight requirements\");\n        // check that the task is valid, hasn't been responsed yet, and is being responded in time\n        require(\n            keccak256(abi.encode(task)) == allTaskHashes[referenceTaskIndex],\n            \"supplied task does not match the one recorded in the contract\"\n        );\n        // some logical checks\n        require(\n            allTaskResponses[msg.sender][referenceTaskIndex].length == 0, \"Operator has already responded to the task\"\n        );\n\n        // The message that was signed\n        bytes32 messageHash = keccak256(abi.encodePacked(\"Hello, \", task.name));\n        bytes32 ethSignedMessageHash = messageHash.toEthSignedMessageHash();\n\n        // Recover the signer address from the signature\n        address signer = ethSignedMessageHash.recover(signature);\n\n        require(signer == msg.sender, \"Message signer is not operator\");\n\n        // updating the storage with task responses\n        allTaskResponses[msg.sender][referenceTaskIndex] = signature;\n\n        // emitting event\n        emit TaskResponded(referenceTaskIndex, task, msg.sender);\n    }\n\n    // HELPER\n    function operatorHasMinimumWeight(address operator) public view returns (bool) {\n        return ECDSAStakeRegistry(stakeRegistry).getOperatorWeight(operator)\n            >= ECDSAStakeRegistry(stakeRegistry).minimumWeight();\n    }\n}\n\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris"
  }
}